#pragma once
#include <map>
#include <string>
#include <tuple>

std::map<int, std::tuple<std::string, std::string>> explain_wm{
	{ 0x6,
	  { "WM_ACTIVATE",
		"The WM_ACTIVATE message is sent when a window is being activated or deactivated. This "
		"message is sent first to the window procedure of the top-level window being deactivated; "
		"it is then sent to the window procedure of the top-level window being activated." } },
	{ 0x1C,
	  { "WM_ACTIVATEAPP",
		"The WM_ACTIVATEAPP message is sent when a window belonging to a different application "
		"than the active window is about to be activated. The message is sent to the "
		"application whose window is being activated and to the application whose window is "
		"being deactivated." } },
	{ 0x360, { "WM_AFXFIRST", "The WM_AFXFIRST specifies the first afx message." } },
	{ 0x37F, { "WM_AFXLAST", "The WM_AFXFIRST specifies the last afx message." } },
	{ 0x8000,
	  { "WM_APP",
		"The WM_APP constant is used by applications to help define private messages, usually "
		"of the form WM_APP+X, where X is an integer value." } },
	{ 0x30C,
	  { "WM_ASKCBFORMATNAME",
		"The WM_ASKCBFORMATNAME message is sent to the clipboard owner by a clipboard viewer "
		"window to request the name of a CF_OWNERDISPLAY clipboard format." } },
	{ 0x4B,
	  { "WM_CANCELJOURNAL",
		"The WM_CANCELJOURNAL message is posted to an application when a user cancels the "
		"application's journaling activities. The message is posted with a NULL window "
		"handle." } },
	{ 0x1F,
	  { "WM_CANCELMODE",
		"The WM_CANCELMODE message is sent to cancel certain modes, such as mouse capture. For "
		"example, the system sends this message to the active window when a dialog box or "
		"message box is displayed. Certain functions also send this message explicitly to the "
		"specified window regardless of whether it is the active window. For example, the "
		"EnableWindow function sends this message when disabling the specified window." } },
	{ 0x215,
	  { "WM_CAPTURECHANGED",
		"The WM_CAPTURECHANGED message is sent to the window that is losing the mouse "
		"capture." } },
	{ 0x30D,
	  { "WM_CHANGECBCHAIN",
		"The WM_CHANGECBCHAIN message is sent to the first window in the clipboard viewer "
		"chain when a window is being removed from the chain." } },
	{ 0x127,
	  { "WM_CHANGEUISTATE",
		"An application sends the WM_CHANGEUISTATE message to indicate that the user interface "
		"(UI) state should be changed." } },
	{ 0x102,
	  { "WM_CHAR",
		"The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN "
		"message is translated by the TranslateMessage function. The WM_CHAR message contains "
		"the character code of the key that was pressed." } },
	{ 0x2F,
	  { "WM_CHARTOITEM",
		"Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a "
		"WM_CHAR message." } },
	{ 0x22,
	  { "WM_CHILDACTIVATE",
		"The WM_CHILDACTIVATE message is sent to a child window when the user clicks the "
		"window's title bar or when the window is activated, moved, or sized." } },
	{ 0x303,
	  { "WM_CLEAR",
		"An application sends a WM_CLEAR message to an edit control or combo box to delete "
		"(clear) the current selection, if any, from the edit control." } },
	{ 0x10,
	  { "WM_CLOSE",
		"The WM_CLOSE message is sent as a signal that a window or an application should "
		"terminate." } },
	{ 0x111,
	  { "WM_COMMAND",
		"The WM_COMMAND message is sent when the user selects a command item from a menu, when "
		"a control sends a notification message to its parent window, or when an accelerator "
		"keystroke is translated." } },
	{ 0x41,
	  { "WM_COMPACTING",
		"The WM_COMPACTING message is sent to all top-level windows when the system detects "
		"more than 12.5 percent of system time over a 30- to 60-second interval is being spent "
		"compacting memory. This indicates that system memory is low." } },
	{ 0x39,
	  { "WM_COMPAREITEM",
		"The system sends the WM_COMPAREITEM message to determine the relative position of a "
		"new item in the sorted list of an owner-drawn combo box or list box. Whenever the "
		"application adds a new item, the system sends this message to the owner of a combo "
		"box or list box created with the CBS_SORT or LBS_SORT style." } },
	{ 0x7B,
	  { "WM_CONTEXTMENU",
		"The WM_CONTEXTMENU message notifies a window that the user clicked the right mouse "
		"button (right-clicked) in the window." } },
	{ 0x301,
	  { "WM_COPY",
		"An application sends the WM_COPY message to an edit control or combo box to copy the "
		"current selection to the clipboard in CF_TEXT format." } },
	{ 0x4A,
	  { "WM_COPYDATA",
		"An application sends the WM_COPYDATA message to pass data to another application." } },
	{ 0x1,
	  { "WM_CREATE",
		"The WM_CREATE message is sent when an application requests that a window be created "
		"by calling the CreateWindowEx or CreateWindow function. (The message is sent before "
		"the function returns.) The window procedure of the new window receives this message "
		"after the window is created, but before the window becomes visible." } },
	{ 0x135,
	  { "WM_CTLCOLORBTN",
		"The WM_CTLCOLORBTN message is sent to the parent window of a button before drawing "
		"the button. The parent window can change the button's text and background colors. "
		"However, only owner-drawn buttons respond to the parent window processing this "
		"message." } },
	{ 0x136,
	  { "WM_CTLCOLORDLG",
		"The WM_CTLCOLORDLG message is sent to a dialog box before the system draws the dialog "
		"box. By responding to this message, the dialog box can set its text and background "
		"colors using the specified display device context handle." } },
	{ 0x133,
	  { "WM_CTLCOLOREDIT",
		"An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message "
		"to its parent window when the control is about to be drawn. By responding to this "
		"message, the parent window can use the specified device context handle to set the "
		"text and background colors of the edit control." } },
	{ 0x134,
	  { "WM_CTLCOLORLISTBOX",
		"Sent to the parent window of a list box before the system draws the list box. By "
		"responding to this message, the parent window can set the text and background colors "
		"of the list box by using the specified display device context handle." } },
	{ 0x132,
	  { "WM_CTLCOLORMSGBOX",
		"The WM_CTLCOLORMSGBOX message is sent to the owner window of a message box before "
		"Windows draws the message box. By responding to this message, the owner window can "
		"set the text and background colors of the message box by using the given display "
		"device context handle." } },
	{ 0x137,
	  { "WM_CTLCOLORSCROLLBAR",
		"The WM_CTLCOLORSCROLLBAR message is sent to the parent window of a scroll bar control "
		"when the control is about to be drawn. By responding to this message, the parent "
		"window can use the display context handle to set the background color of the scroll "
		"bar control." } },
	{ 0x138,
	  { "WM_CTLCOLORSTATIC",
		"A static control, or an edit control that is read-only or disabled, sends the "
		"WM_CTLCOLORSTATIC message to its parent window when the control is about to be drawn. "
		"By responding to this message, the parent window can use the specified device context "
		"handle to set the text and background colors of the static control." } },
	{ 0x300,
	  { "WM_CUT",
		"An application sends a WM_CUT message to an edit control or combo box to delete (cut) "
		"the current selection, if any, in the edit control and copy the deleted text to the "
		"clipboard in CF_TEXT format." } },
	{ 0x103,
	  { "WM_DEADCHAR",
		"The WM_DEADCHAR message is posted to the window with the keyboard focus when a "
		"WM_KEYUP message is translated by the TranslateMessage function. WM_DEADCHAR "
		"specifies a character code generated by a dead key. A dead key is a key that "
		"generates a character, such as the umlaut (double-dot), that is combined with another "
		"character to form a composite character. For example, the umlaut-O character (Ö) is "
		"generated by typing the dead key for the umlaut character, and then typing the O "
		"key." } },
	{ 0x2D,
	  { "WM_DELETEITEM",
		"Sent to the owner of a list box or combo box when the list box or combo box is "
		"destroyed or when items are removed by the LB_DELETESTRING, LB_RESETCONTENT, "
		"CB_DELETESTRING, or CB_RESETCONTENT message. The system sends a WM_DELETEITEM message "
		"for each deleted item. The system sends the WM_DELETEITEM message for any deleted "
		"list box or combo box item with nonzero item data." } },
	{ 0x2,
	  { "WM_DESTROY",
		"The WM_DESTROY message is sent when a window is being destroyed. It is sent to the "
		"window procedure of the window being destroyed after the window is removed from the "
		"screen. This message is sent first to the window being destroyed and then to the "
		"child windows (if any) as they are destroyed. During the processing of the message, "
		"it can be assumed that all child windows still exist." } },
	{ 0x307,
	  { "WM_DESTROYCLIPBOARD",
		"The WM_DESTROYCLIPBOARD message is sent to the clipboard owner when a call to the "
		"EmptyClipboard function empties the clipboard." } },
	{ 0x219,
	  { "WM_DEVICECHANGE",
		"Notifies an application of a change to the hardware configuration of a device or the "
		"computer." } },
	{ 0x1B,
	  { "WM_DEVMODECHANGE",
		"The WM_DEVMODECHANGE message is sent to all top-level windows whenever the user "
		"changes device-mode settings." } },
	{ 0x7E,
	  { "WM_DISPLAYCHANGE",
		"The WM_DISPLAYCHANGE message is sent to all windows when the display resolution has "
		"changed." } },
	{ 0x308,
	  { "WM_DRAWCLIPBOARD",
		"The WM_DRAWCLIPBOARD message is sent to the first window in the clipboard viewer "
		"chain when the content of the clipboard changes. This enables a clipboard viewer "
		"window to display the new content of the clipboard." } },
	{ 0x2B,
	  { "WM_DRAWITEM",
		"The WM_DRAWITEM message is sent to the parent window of an owner-drawn button, combo "
		"box, list box, or menu when a visual aspect of the button, combo box, list box, or "
		"menu has changed." } },
	{ 0x233,
	  { "WM_DROPFILES",
		"Sent when the user drops a file on the window of an application that has registered "
		"itself as a recipient of dropped files." } },
	{ 0xA,
	  { "WM_ENABLE",
		"The WM_ENABLE message is sent when an application changes the enabled state of a "
		"window. It is sent to the window whose enabled state is changing. This message is "
		"sent before the EnableWindow function returns, but after the enabled state "
		"(WS_DISABLED style bit) of the window has changed." } },
	{ 0x16,
	  { "WM_ENDSESSION",
		"The WM_ENDSESSION message is sent to an application after the system processes the "
		"results of the WM_QUERYENDSESSION message. The WM_ENDSESSION message informs the "
		"application whether the session is ending." } },
	{ 0x121,
	  { "WM_ENTERIDLE",
		"The WM_ENTERIDLE message is sent to the owner window of a modal dialog box or menu "
		"that is entering an idle state. A modal dialog box or menu enters an idle state when "
		"no messages are waiting in its queue after it has processed one or more previous "
		"messages." } },
	{ 0x211,
	  { "WM_ENTERMENULOOP",
		"The WM_ENTERMENULOOP message informs an application's main window procedure that a "
		"menu modal loop has been entered." } },
	{ 0x231,
	  { "WM_ENTERSIZEMOVE",
		"The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving "
		"or sizing modal loop. The window enters the moving or sizing modal loop when the user "
		"clicks the window's title bar or sizing border, or when the window passes the "
		"WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the "
		"message specifies the SC_MOVE or SC_SIZE value. The operation is complete when "
		"DefWindowProc returns." } },
	{ 0x14,
	  { "WM_ERASEBKGND",
		"The WM_ERASEBKGND message is sent when the window background must be erased (for "
		"example, when a window is resized). The message is sent to prepare an invalidated "
		"portion of a window for painting." } },
	{ 0x212,
	  { "WM_EXITMENULOOP",
		"The WM_EXITMENULOOP message informs an application's main window procedure that a "
		"menu modal loop has been exited." } },
	{ 0x232,
	  { "WM_EXITSIZEMOVE",
		"The WM_EXITSIZEMOVE message is sent one time to a window, after it has exited the "
		"moving or sizing modal loop. The window enters the moving or sizing modal loop when "
		"the user clicks the window's title bar or sizing border, or when the window passes "
		"the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of "
		"the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when "
		"DefWindowProc returns." } },
	{ 0x1D,
	  { "WM_FONTCHANGE",
		"An application sends the WM_FONTCHANGE message to all top-level windows in the system "
		"after changing the pool of font resources." } },
	{ 0x87,
	  { "WM_GETDLGCODE",
		"The WM_GETDLGCODE message is sent to the window procedure associated with a control. "
		"By default, the system handles all keyboard input to the control; the system "
		"interprets certain types of keyboard input as dialog box navigation keys. To override "
		"this default behavior, the control can respond to the WM_GETDLGCODE message to "
		"indicate the types of input it wants to process itself." } },
	{ 0x31,
	  { "WM_GETFONT",
		"An application sends a WM_GETFONT message to a control to retrieve the font with "
		"which the control is currently drawing its text." } },
	{ 0x33,
	  { "WM_GETHOTKEY",
		"An application sends a WM_GETHOTKEY message to determine the hot key associated with "
		"a window." } },
	{ 0x7F,
	  { "WM_GETICON",
		"The WM_GETICON message is sent to a window to retrieve a handle to the large or small "
		"icon associated with a window. The system displays the large icon in the ALT+TAB "
		"dialog, and the small icon in the window caption." } },
	{ 0x24,
	  { "WM_GETMINMAXINFO",
		"The WM_GETMINMAXINFO message is sent to a window when the size or position of the "
		"window is about to change. An application can use this message to override the "
		"window's default maximized size and position, or its default minimum or maximum "
		"tracking size." } },
	{ 0x3D,
	  { "WM_GETOBJECT",
		"Active Accessibility sends the WM_GETOBJECT message to obtain information about an "
		"accessible object contained in a server application. Applications never send this "
		"message directly. It is sent only by Active Accessibility in response to calls to "
		"AccessibleObjectFromPoint, AccessibleObjectFromEvent, or AccessibleObjectFromWindow. "
		"However, server applications handle this message." } },
	{ 0xD,
	  { "WM_GETTEXT",
		"An application sends a WM_GETTEXT message to copy the text that corresponds to a "
		"window into a buffer provided by the caller." } },
	{ 0xE,
	  { "WM_GETTEXTLENGTH",
		"An application sends a WM_GETTEXTLENGTH message to determine the length, in "
		"characters, of the text associated with a window." } },
	{ 0x358, { "WM_HANDHELDFIRST", "Definition Needed" } },
	{ 0x35F, { "WM_HANDHELDLAST", "Definition Needed" } },
	{ 0x53,
	  { "WM_HELP",
		"Indicates that the user pressed the F1 key. If a menu is active when F1 is pressed, "
		"WM_HELP is sent to the window associated with the menu; otherwise, WM_HELP is sent to "
		"the window that has the keyboard focus. If no window has the keyboard focus, WM_HELP "
		"is sent to the currently active window." } },
	{ 0x312,
	  { "WM_HOTKEY",
		"The WM_HOTKEY message is posted when the user presses a hot key registered by the "
		"RegisterHotKey function. The message is placed at the top of the message queue "
		"associated with the thread that registered the hot key." } },
	{ 0x114,
	  { "WM_HSCROLL",
		"This message is sent to a window when a scroll event occurs in the window's standard "
		"horizontal scroll bar. This message is also sent to the owner of a horizontal scroll "
		"bar control when a scroll event occurs in the control." } },
	{ 0x30E,
	  { "WM_HSCROLLCLIPBOARD",
		"The WM_HSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer "
		"window. This occurs when the clipboard contains data in the CF_OWNERDISPLAY format "
		"and an event occurs in the clipboard viewer's horizontal scroll bar. The owner should "
		"scroll the clipboard image and update the scroll bar values." } },
	{ 0x27,
	  { "WM_ICONERASEBKGND",
		"Windows NT 3.51 and earlier: The WM_ICONERASEBKGND message is sent to a minimized "
		"window when the background of the icon must be filled before painting the icon. A "
		"window receives this message only if a class icon is defined for the window; "
		"otherwise, WM_ERASEBKGND is sent. This message is not sent by newer versions of "
		"Windows." } },
	{ 0x286,
	  { "WM_IME_CHAR",
		"Sent to an application when the IME gets a character of the conversion result. A "
		"window receives this message through its WindowProc function." } },
	{ 0x10F,
	  { "WM_IME_COMPOSITION",
		"Sent to an application when the IME changes composition status as a result of a "
		"keystroke. A window receives this message through its WindowProc function." } },
	{ 0x284,
	  { "WM_IME_COMPOSITIONFULL",
		"Sent to an application when the IME window finds no space to extend the area for the "
		"composition window. A window receives this message through its WindowProc "
		"function." } },
	{ 0x283,
	  { "WM_IME_CONTROL",
		"Sent by an application to direct the IME window to carry out the requested command. "
		"The application uses this message to control the IME window that it has created. To "
		"send this message, the application calls the SendMessage function with the following "
		"parameters." } },
	{ 0x10E,
	  { "WM_IME_ENDCOMPOSITION",
		"Sent to an application when the IME ends composition. A window receives this message "
		"through its WindowProc function." } },
	{ 0x290,
	  { "WM_IME_KEYDOWN",
		"Sent to an application by the IME to notify the application of a key press and to "
		"keep message order. A window receives this message through its WindowProc "
		"function." } },
	{ 0x10F, { "WM_IME_KEYLAST", "Definition Needed" } },
	{ 0x291,
	  { "WM_IME_KEYUP",
		"Sent to an application by the IME to notify the application of a key release and to "
		"keep message order. A window receives this message through its WindowProc "
		"function." } },
	{ 0x282,
	  { "WM_IME_NOTIFY",
		"Sent to an application to notify it of changes to the IME window. A window receives "
		"this message through its WindowProc function." } },
	{ 0x288,
	  { "WM_IME_REQUEST",
		"Sent to an application to provide commands and request information. A window receives "
		"this message through its WindowProc function." } },
	{ 0x285,
	  { "WM_IME_SELECT",
		"Sent to an application when the operating system is about to change the current IME. "
		"A window receives this message through its WindowProc function." } },
	{ 0x281,
	  { "WM_IME_SETCONTEXT",
		"Sent to an application when a window is activated. A window receives this message "
		"through its WindowProc function." } },
	{ 0x10D,
	  { "WM_IME_STARTCOMPOSITION",
		"Sent immediately before the IME generates the composition string as a result of a "
		"keystroke. A window receives this message through its WindowProc function." } },
	{ 0x110,
	  { "WM_INITDIALOG",
		"The WM_INITDIALOG message is sent to the dialog box procedure immediately before a "
		"dialog box is displayed. Dialog box procedures typically use this message to "
		"initialize controls and carry out any other initialization tasks that affect the "
		"appearance of the dialog box." } },
	{ 0x116,
	  { "WM_INITMENU",
		"The WM_INITMENU message is sent when a menu is about to become active. It occurs when "
		"the user clicks an item on the menu bar or presses a menu key. This allows the "
		"application to modify the menu before it is displayed." } },
	{ 0x117,
	  { "WM_INITMENUPOPUP",
		"The WM_INITMENUPOPUP message is sent when a drop-down menu or submenu is about to "
		"become active. This allows an application to modify the menu before it is displayed, "
		"without changing the entire menu." } },
	{ 0x51,
	  { "WM_INPUTLANGCHANGE",
		"The WM_INPUTLANGCHANGE message is sent to the topmost affected window after an "
		"application's input language has been changed. You should make any "
		"application-specific settings and pass the message to the DefWindowProc function, "
		"which passes the message to all first-level child windows. These child windows can "
		"pass the message to DefWindowProc to have it pass the message to their child windows, "
		"and so on." } },
	{ 0x50,
	  { "WM_INPUTLANGCHANGEREQUEST",
		"The WM_INPUTLANGCHANGEREQUEST message is posted to the window with the focus when the "
		"user chooses a new input language, either with the hotkey (specified in the Keyboard "
		"control panel application) or from the indicator on the system taskbar. An "
		"application can accept the change by passing the message to the DefWindowProc "
		"function or reject the change (and prevent it from taking place) by returning "
		"immediately." } },
	{ 0x100,
	  { "WM_KEYDOWN",
		"The WM_KEYDOWN message is posted to the window with the keyboard focus when a "
		"nonsystem key is pressed. A nonsystem key is a key that is pressed when the ALT key "
		"is not pressed." } },
	{ 0x100, { "WM_KEYFIRST", "This message filters for keyboard messages." } },
	{ 0x108, { "WM_KEYLAST", "This message filters for keyboard messages." } },
	{ 0x101,
	  { "WM_KEYUP",
		"The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem "
		"key is released. A nonsystem key is a key that is pressed when the ALT key is not "
		"pressed, or a keyboard key that is pressed when a window has the keyboard focus." } },
	{ 0x8,
	  { "WM_KILLFOCUS",
		"The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard "
		"focus." } },
	{ 0x203,
	  { "WM_LBUTTONDBLCLK",
		"The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse "
		"button while the cursor is in the client area of a window. If the mouse is not "
		"captured, the message is posted to the window beneath the cursor. Otherwise, the "
		"message is posted to the window that has captured the mouse." } },
	{ 0x201,
	  { "WM_LBUTTONDOWN",
		"The WM_LBUTTONDOWN message is posted when the user presses the left mouse button "
		"while the cursor is in the client area of a window. If the mouse is not captured, the "
		"message is posted to the window beneath the cursor. Otherwise, the message is posted "
		"to the window that has captured the mouse." } },
	{ 0x202,
	  { "WM_LBUTTONUP",
		"The WM_LBUTTONUP message is posted when the user releases the left mouse button while "
		"the cursor is in the client area of a window. If the mouse is not captured, the "
		"message is posted to the window beneath the cursor. Otherwise, the message is posted "
		"to the window that has captured the mouse." } },
	{ 0x209,
	  { "WM_MBUTTONDBLCLK",
		"The WM_MBUTTONDBLCLK message is posted when the user double-clicks the middle mouse "
		"button while the cursor is in the client area of a window. If the mouse is not "
		"captured, the message is posted to the window beneath the cursor. Otherwise, the "
		"message is posted to the window that has captured the mouse." } },
	{ 0x207,
	  { "WM_MBUTTONDOWN",
		"The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button "
		"while the cursor is in the client area of a window. If the mouse is not captured, the "
		"message is posted to the window beneath the cursor. Otherwise, the message is posted "
		"to the window that has captured the mouse." } },
	{ 0x208,
	  { "WM_MBUTTONUP",
		"The WM_MBUTTONUP message is posted when the user releases the middle mouse button "
		"while the cursor is in the client area of a window. If the mouse is not captured, the "
		"message is posted to the window beneath the cursor. Otherwise, the message is posted "
		"to the window that has captured the mouse." } },
	{ 0x222,
	  { "WM_MDIACTIVATE",
		"An application sends the WM_MDIACTIVATE message to a multiple-document interface "
		"(MDI) client window to instruct the client window to activate a different MDI child "
		"window." } },
	{ 0x227,
	  { "WM_MDICASCADE",
		"An application sends the WM_MDICASCADE message to a multiple-document interface (MDI) "
		"client window to arrange all its child windows in a cascade format." } },
	{ 0x220,
	  { "WM_MDICREATE",
		"An application sends the WM_MDICREATE message to a multiple-document interface (MDI) "
		"client window to create an MDI child window." } },
	{ 0x221,
	  { "WM_MDIDESTROY",
		"An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) "
		"client window to close an MDI child window." } },
	{ 0x229,
	  { "WM_MDIGETACTIVE",
		"An application sends the WM_MDIGETACTIVE message to a multiple-document interface "
		"(MDI) client window to retrieve the handle to the active MDI child window." } },
	{ 0x228,
	  { "WM_MDIICONARRANGE",
		"An application sends the WM_MDIICONARRANGE message to a multiple-document interface "
		"(MDI) client window to arrange all minimized MDI child windows. It does not affect "
		"child windows that are not minimized." } },
	{ 0x225,
	  { "WM_MDIMAXIMIZE",
		"An application sends the WM_MDIMAXIMIZE message to a multiple-document interface "
		"(MDI) client window to maximize an MDI child window. The system resizes the child "
		"window to make its client area fill the client window. The system places the child "
		"window's window menu icon in the rightmost position of the frame window's menu bar, "
		"and places the child window's restore icon in the leftmost position. The system also "
		"appends the title bar text of the child window to that of the frame window." } },
	{ 0x224,
	  { "WM_MDINEXT",
		"An application sends the WM_MDINEXT message to a multiple-document interface (MDI) "
		"client window to activate the next or previous child window." } },
	{ 0x234,
	  { "WM_MDIREFRESHMENU",
		"An application sends the WM_MDIREFRESHMENU message to a multiple-document interface "
		"(MDI) client window to refresh the window menu of the MDI frame window." } },
	{ 0x223,
	  { "WM_MDIRESTORE",
		"An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) "
		"client window to restore an MDI child window from maximized or minimized size." } },
	{ 0x230,
	  { "WM_MDISETMENU",
		"An application sends the WM_MDISETMENU message to a multiple-document interface (MDI) "
		"client window to replace the entire menu of an MDI frame window, to replace the "
		"window menu of the frame window, or both." } },
	{ 0x226,
	  { "WM_MDITILE",
		"An application sends the WM_MDITILE message to a multiple-document interface (MDI) "
		"client window to arrange all of its MDI child windows in a tile format." } },
	{ 0x2C,
	  { "WM_MEASUREITEM",
		"The WM_MEASUREITEM message is sent to the owner window of a combo box, list box, list "
		"view control, or menu item when the control or menu is created." } },
	{ 0x120,
	  { "WM_MENUCHAR",
		"The WM_MENUCHAR message is sent when a menu is active and the user presses a key that "
		"does not correspond to any mnemonic or accelerator key. This message is sent to the "
		"window that owns the menu." } },
	{ 0x126,
	  { "WM_MENUCOMMAND",
		"The WM_MENUCOMMAND message is sent when the user makes a selection from a menu." } },
	{ 0x123,
	  { "WM_MENUDRAG",
		"The WM_MENUDRAG message is sent to the owner of a drag-and-drop menu when the user "
		"drags a menu item." } },
	{ 0x124,
	  { "WM_MENUGETOBJECT",
		"The WM_MENUGETOBJECT message is sent to the owner of a drag-and-drop menu when the "
		"mouse cursor enters a menu item or moves from the center of the item to the top or "
		"bottom of the item." } },
	{ 0x122,
	  { "WM_MENURBUTTONUP",
		"The WM_MENURBUTTONUP message is sent when the user releases the right mouse button "
		"while the cursor is on a menu item." } },
	{ 0x11F,
	  { "WM_MENUSELECT",
		"The WM_MENUSELECT message is sent to a menu's owner window when the user selects a "
		"menu item." } },
	{ 0x21,
	  { "WM_MOUSEACTIVATE",
		"The WM_MOUSEACTIVATE message is sent when the cursor is in an inactive window and the "
		"user presses a mouse button. The parent window receives this message only if the "
		"child window passes it to the DefWindowProc function." } },
	{ 0x200,
	  { "WM_MOUSEFIRST",
		"Use WM_MOUSEFIRST to specify the first mouse message. Use the PeekMessage() "
		"Function." } },
	{ 0x2A1,
	  { "WM_MOUSEHOVER",
		"The WM_MOUSEHOVER message is posted to a window when the cursor hovers over the "
		"client area of the window for the period of time specified in a prior call to "
		"TrackMouseEvent." } },
	{ 0x20D, { "WM_MOUSELAST", "Definition Needed" } },
	{ 0x2A3,
	  { "WM_MOUSELEAVE",
		"The WM_MOUSELEAVE message is posted to a window when the cursor leaves the client "
		"area of the window specified in a prior call to TrackMouseEvent." } },
	{ 0x200,
	  { "WM_MOUSEMOVE",
		"The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse is "
		"not captured, the message is posted to the window that contains the cursor. "
		"Otherwise, the message is posted to the window that has captured the mouse." } },
	{ 0x20A,
	  { "WM_MOUSEWHEEL",
		"The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is "
		"rotated. The DefWindowProc function propagates the message to the window's parent. "
		"There should be no internal forwarding of the message, since DefWindowProc propagates "
		"it up the parent chain until it finds a window that processes it." } },
	{ 0x20E,
	  { "WM_MOUSEHWHEEL",
		"The WM_MOUSEHWHEEL message is sent to the focus window when the mouse's horizontal "
		"scroll wheel is tilted or rotated. The DefWindowProc function propagates the message "
		"to the window's parent. There should be no internal forwarding of the message, since "
		"DefWindowProc propagates it up the parent chain until it finds a window that "
		"processes it." } },
	{ 0x3, { "WM_MOVE", "The WM_MOVE message is sent after a window has been moved." } },
	{ 0x216,
	  { "WM_MOVING",
		"The WM_MOVING message is sent to a window that the user is moving. By processing this "
		"message, an application can monitor the position of the drag rectangle and, if "
		"needed, change its position." } },
	{ 0x86, { "WM_NCACTIVATE", "Non Client Area Activated Caption(Title) of the Form" } },
	{ 0x83,
	  { "WM_NCCALCSIZE",
		"The WM_NCCALCSIZE message is sent when the size and position of a window's client "
		"area must be calculated. By processing this message, an application can control the "
		"content of the window's client area when the size or position of the window "
		"changes." } },
	{ 0x81,
	  { "WM_NCCREATE",
		"The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first "
		"created." } },
	{ 0x82,
	  { "WM_NCDESTROY",
		"The WM_NCDESTROY message informs a window that its nonclient area is being destroyed. "
		"The DestroyWindow function sends the WM_NCDESTROY message to the window following the "
		"WM_DESTROY message. WM_DESTROY is used to free the allocated memory object associated "
		"with the window." } },
	{ 0x84,
	  { "WM_NCHITTEST",
		"The WM_NCHITTEST message is sent to a window when the cursor moves, or when a mouse "
		"button is pressed or released. If the mouse is not captured, the message is sent to "
		"the window beneath the cursor. Otherwise, the message is sent to the window that has "
		"captured the mouse." } },
	{ 0xA3,
	  { "WM_NCLBUTTONDBLCLK",
		"The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the left mouse "
		"button while the cursor is within the nonclient area of a window. This message is "
		"posted to the window that contains the cursor. If a window has captured the mouse, "
		"this message is not posted." } },
	{ 0xA1,
	  { "WM_NCLBUTTONDOWN",
		"The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button "
		"while the cursor is within the nonclient area of a window. This message is posted to "
		"the window that contains the cursor. If a window has captured the mouse, this message "
		"is not posted." } },
	{ 0xA2,
	  { "WM_NCLBUTTONUP",
		"The WM_NCLBUTTONUP message is posted when the user releases the left mouse button "
		"while the cursor is within the nonclient area of a window. This message is posted to "
		"the window that contains the cursor. If a window has captured the mouse, this message "
		"is not posted." } },
	{ 0xA9,
	  { "WM_NCMBUTTONDBLCLK",
		"The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle mouse "
		"button while the cursor is within the nonclient area of a window. This message is "
		"posted to the window that contains the cursor. If a window has captured the mouse, "
		"this message is not posted." } },
	{ 0xA7,
	  { "WM_NCMBUTTONDOWN",
		"The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse button "
		"while the cursor is within the nonclient area of a window. This message is posted to "
		"the window that contains the cursor. If a window has captured the mouse, this message "
		"is not posted." } },
	{ 0xA8,
	  { "WM_NCMBUTTONUP",
		"The WM_NCMBUTTONUP message is posted when the user releases the middle mouse button "
		"while the cursor is within the nonclient area of a window. This message is posted to "
		"the window that contains the cursor. If a window has captured the mouse, this message "
		"is not posted." } },
	{ 0x2A0,
	  { "WM_NCMOUSEHOVER",
		"The WM_NCMOUSEHOVER message is posted to a window when the cursor hovers over the "
		"nonclient area of the window for the period of time specified in a prior call to "
		"TrackMouseEvent." } },
	{ 0x2A2,
	  { "WM_NCMOUSELEAVE",
		"The WM_NCMOUSELEAVE message is posted to a window when the cursor leaves the "
		"nonclient area of the window specified in a prior call to TrackMouseEvent." } },
	{ 0xA0,
	  { "WM_NCMOUSEMOVE",
		"The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the "
		"nonclient area of the window. This message is posted to the window that contains the "
		"cursor. If a window has captured the mouse, this message is not posted." } },
	{ 0x85,
	  { "WM_NCPAINT",
		"The WM_NCPAINT message is sent to a window when its frame must be painted." } },
	{ 0xA6,
	  { "WM_NCRBUTTONDBLCLK",
		"The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right mouse "
		"button while the cursor is within the nonclient area of a window. This message is "
		"posted to the window that contains the cursor. If a window has captured the mouse, "
		"this message is not posted." } },
	{ 0xA4,
	  { "WM_NCRBUTTONDOWN",
		"The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse button "
		"while the cursor is within the nonclient area of a window. This message is posted to "
		"the window that contains the cursor. If a window has captured the mouse, this message "
		"is not posted." } },
	{ 0xA5,
	  { "WM_NCRBUTTONUP",
		"The WM_NCRBUTTONUP message is posted when the user releases the right mouse button "
		"while the cursor is within the nonclient area of a window. This message is posted to "
		"the window that contains the cursor. If a window has captured the mouse, this message "
		"is not posted." } },
	{ 0xAD,
	  { "WM_NCXBUTTONDBLCLK",
		"The WM_NCXBUTTONDBLCLK message is posted when the user double-clicks the first or "
		"second X button while the cursor is within the nonclient area of a window. This "
		"message is posted to the window that contains the cursor. If a window has captured "
		"the mouse, this message is not posted." } },
	{ 0xAB,
	  { "WM_NCXBUTTONDOWN",
		"The WM_NCXBUTTONDOWN message is posted when the user presses the first or second X "
		"button while the cursor is within the nonclient area of a window. This message is "
		"posted to the window that contains the cursor. If a window has captured the mouse, "
		"this message is not posted." } },
	{ 0xAC,
	  { "WM_NCXBUTTONUP",
		"The WM_NCXBUTTONUP message is posted when the user releases the first or second X "
		"button while the cursor is within the nonclient area of a window. This message is "
		"posted to the window that contains the cursor. If a window has captured the mouse, "
		"this message is not posted." } },
	{ 0xAE,
	  { "WM_NCUAHDRAWCAPTION",
		"The WM_NCUAHDRAWCAPTION message is an undocumented message related to themes. When "
		"handling WM_NCPAINT, this message should also be handled." } },
	{ 0xAF,
	  { "WM_NCUAHDRAWFRAME",
		"The WM_NCUAHDRAWFRAME message is an undocumented message related to themes. When "
		"handling WM_NCPAINT, this message should also be handled." } },
	{ 0x28,
	  { "WM_NEXTDLGCTL",
		"The WM_NEXTDLGCTL message is sent to a dialog box procedure to set the keyboard focus "
		"to a different control in the dialog box" } },
	{ 0x213,
	  { "WM_NEXTMENU",
		"The WM_NEXTMENU message is sent to an application when the right or left arrow key is "
		"used to switch between the menu bar and the system menu." } },
	{ 0x4E,
	  { "WM_NOTIFY",
		"Sent by a common control to its parent window when an event has occurred or the "
		"control requires some information." } },
	{ 0x55,
	  { "WM_NOTIFYFORMAT",
		"Determines if a window accepts ANSI or Unicode structures in the WM_NOTIFY "
		"notification message. WM_NOTIFYFORMAT messages are sent from a common control to its "
		"parent window and from the parent window to the common control." } },
	{ 0x0,
	  { "WM_NULL",
		"The WM_NULL message performs no operation. An application sends the WM_NULL message "
		"if it wants to post a message that the recipient window will ignore." } },
	{ 0xF, { "WM_PAINT", "Occurs when the control needs repainting" } },
	{ 0x309,
	  { "WM_PAINTCLIPBOARD",
		"The WM_PAINTCLIPBOARD message is sent to the clipboard owner by a clipboard viewer "
		"window when the clipboard contains data in the CF_OWNERDISPLAY format and the "
		"clipboard viewer's client area needs repainting." } },
	{ 0x26,
	  { "WM_PAINTICON",
		"Windows NT 3.51 and earlier: The WM_PAINTICON message is sent to a minimized window "
		"when the icon is to be painted. This message is not sent by newer versions of "
		"Microsoft Windows, except in unusual circumstances explained in the Remarks." } },
	{ 0x311,
	  { "WM_PALETTECHANGED",
		"This message is sent by the OS to all top-level and overlapped windows after the "
		"window with the keyboard focus realizes its logical palette. This message enables "
		"windows that do not have the keyboard focus to realize their logical palettes and "
		"update their client areas." } },
	{ 0x310,
	  { "WM_PALETTEISCHANGING",
		"The WM_PALETTEISCHANGING message informs applications that an application is going to "
		"realize its logical palette." } },
	{ 0x210,
	  { "WM_PARENTNOTIFY",
		"The WM_PARENTNOTIFY message is sent to the parent of a child window when the child "
		"window is created or destroyed, or when the user clicks a mouse button while the "
		"cursor is over the child window. When the child window is being created, the system "
		"sends WM_PARENTNOTIFY just before the CreateWindow or CreateWindowEx function that "
		"creates the window returns. When the child window is being destroyed, the system "
		"sends the message before any processing to destroy the window takes place." } },
	{ 0x302,
	  { "WM_PASTE",
		"An application sends a WM_PASTE message to an edit control or combo box to copy the "
		"current content of the clipboard to the edit control at the current caret position. "
		"Data is inserted only if the clipboard contains data in CF_TEXT format." } },
	{ 0x380, { "WM_PENWINFIRST", "Definition Needed" } },
	{ 0x38F, { "WM_PENWINLAST", "Definition Needed" } },
	{ 0x48,
	  { "WM_POWER",
		"Notifies applications that the system, typically a battery-powered personal computer, "
		"is about to enter a suspended mode. Obsolete : use POWERBROADCAST instead" } },
	{ 0x218,
	  { "WM_POWERBROADCAST",
		"Notifies applications that a power-management event has occurred." } },
	{ 0x317,
	  { "WM_PRINT",
		"The WM_PRINT message is sent to a window to request that it draw itself in the "
		"specified device context, most commonly in a printer device context." } },
	{ 0x318,
	  { "WM_PRINTCLIENT",
		"The WM_PRINTCLIENT message is sent to a window to request that it draw its client "
		"area in the specified device context, most commonly in a printer device context." } },
	{ 0x37,
	  { "WM_QUERYDRAGICON",
		"The WM_QUERYDRAGICON message is sent to a minimized (iconic) window. The window is "
		"about to be dragged by the user but does not have an icon defined for its class. An "
		"application can return a handle to an icon or cursor. The system displays this cursor "
		"or icon while the user drags the icon." } },
	{ 0x11,
	  { "WM_QUERYENDSESSION",
		"The WM_QUERYENDSESSION message is sent when the user chooses to end the session or "
		"when an application calls one of the system shutdown functions. If any application "
		"returns zero, the session is not ended. The system stops sending WM_QUERYENDSESSION "
		"messages as soon as one application returns zero. After processing this message, the "
		"system sends the WM_ENDSESSION message with the wParam parameter set to the results "
		"of the WM_QUERYENDSESSION message." } },
	{ 0x30F,
	  { "WM_QUERYNEWPALETTE",
		"This message informs a window that it is about to receive the keyboard focus, giving "
		"the window the opportunity to realize its logical palette when it receives the "
		"focus." } },
	{ 0x13,
	  { "WM_QUERYOPEN",
		"The WM_QUERYOPEN message is sent to an icon when the user requests that the window be "
		"restored to its previous size and position." } },
	{ 0x23,
	  { "WM_QUEUESYNC",
		"The WM_QUEUESYNC message is sent by a computer-based training (CBT) application to "
		"separate user-input messages from other messages sent through the WH_JOURNALPLAYBACK "
		"Hook procedure." } },
	{ 0x12,
	  { "WM_QUIT",
		"Once received, it ends the application's Message Loop, signaling the application to "
		"end. It can be sent by pressing Alt+F4, Clicking the X in the upper right-hand of the "
		"program, or going to File->Exit." } },
	{ 0x206,
	  { "WM_RBUTTONDBLCLK",
		"he WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse "
		"button while the cursor is in the client area of a window. If the mouse is not "
		"captured, the message is posted to the window beneath the cursor. Otherwise, the "
		"message is posted to the window that has captured the mouse." } },
	{ 0x204,
	  { "WM_RBUTTONDOWN",
		"The WM_RBUTTONDOWN message is posted when the user presses the right mouse button "
		"while the cursor is in the client area of a window. If the mouse is not captured, the "
		"message is posted to the window beneath the cursor. Otherwise, the message is posted "
		"to the window that has captured the mouse." } },
	{ 0x205,
	  { "WM_RBUTTONUP",
		"The WM_RBUTTONUP message is posted when the user releases the right mouse button "
		"while the cursor is in the client area of a window. If the mouse is not captured, the "
		"message is posted to the window beneath the cursor. Otherwise, the message is posted "
		"to the window that has captured the mouse." } },
	{ 0x306,
	  { "WM_RENDERALLFORMATS",
		"The WM_RENDERALLFORMATS message is sent to the clipboard owner before it is "
		"destroyed, if the clipboard owner has delayed rendering one or more clipboard "
		"formats. For the content of the clipboard to remain available to other applications, "
		"the clipboard owner must render data in all the formats it is capable of generating, "
		"and place the data on the clipboard by calling the SetClipboardData function." } },
	{ 0x305,
	  { "WM_RENDERFORMAT",
		"The WM_RENDERFORMAT message is sent to the clipboard owner if it has delayed "
		"rendering a specific clipboard format and if an application has requested data in "
		"that format. The clipboard owner must render data in the specified format and place "
		"it on the clipboard by calling the SetClipboardData function." } },
	{ 0x20,
	  { "WM_SETCURSOR",
		"The WM_SETCURSOR message is sent to a window if the mouse causes the cursor to move "
		"within a window and mouse input is not captured." } },
	{ 0x7, { "WM_SETFOCUS", "When the controll got the focus" } },
	{ 0x30,
	  { "WM_SETFONT",
		"An application sends a WM_SETFONT message to specify the font that a control is to "
		"use when drawing text." } },
	{ 0x32,
	  { "WM_SETHOTKEY",
		"An application sends a WM_SETHOTKEY message to a window to associate a hot key with "
		"the window. When the user presses the hot key, the system activates the window." } },
	{ 0x80,
	  { "WM_SETICON",
		"An application sends the WM_SETICON message to associate a new large or small icon "
		"with a window. The system displays the large icon in the ALT+TAB dialog box, and the "
		"small icon in the window caption." } },
	{ 0xB,
	  { "WM_SETREDRAW",
		"An application sends the WM_SETREDRAW message to a window to allow changes in that "
		"window to be redrawn or to prevent changes in that window from being redrawn." } },
	{ 0xC,
	  { "WM_SETTEXT",
		"Text / Caption changed on the control. An application sends a WM_SETTEXT message to "
		"set the text of a window." } },
	{ 0x1A,
	  { "WM_SETTINGCHANGE",
		"An application sends the WM_SETTINGCHANGE message to all top-level windows after "
		"making a change to the WIN.INI file. The SystemParametersInfo function sends this "
		"message after an application uses the function to change a setting in WIN.INI." } },
	{ 0x18,
	  { "WM_SHOWWINDOW",
		"The WM_SHOWWINDOW message is sent to a window when the window is about to be hidden "
		"or shown" } },
	{ 0x5, { "WM_SIZE", "The WM_SIZE message is sent to a window after its size has changed." } },
	{ 0x30B,
	  { "WM_SIZECLIPBOARD",
		"The WM_SIZECLIPBOARD message is sent to the clipboard owner by a clipboard viewer "
		"window when the clipboard contains data in the CF_OWNERDISPLAY format and the "
		"clipboard viewer's client area has changed size." } },
	{ 0x214,
	  { "WM_SIZING",
		"The WM_SIZING message is sent to a window that the user is resizing. By processing "
		"this message, an application can monitor the size and position of the drag rectangle "
		"and, if needed, change its size or position." } },
	{ 0x2A,
	  { "WM_SPOOLERSTATUS",
		"The WM_SPOOLERSTATUS message is sent from Print Manager whenever a job is added to or "
		"removed from the Print Manager queue." } },
	{ 0x7D,
	  { "WM_STYLECHANGED",
		"The WM_STYLECHANGED message is sent to a window after the SetWindowLong function has "
		"changed one or more of the window's styles." } },
	{ 0x7C,
	  { "WM_STYLECHANGING",
		"The WM_STYLECHANGING message is sent to a window when the SetWindowLong function is "
		"about to change one or more of the window's styles." } },
	{ 0x88,
	  { "WM_SYNCPAINT",
		"The WM_SYNCPAINT message is used to synchronize painting while avoiding linking "
		"independent GUI threads." } },
	{ 0x106,
	  { "WM_SYSCHAR",
		"The WM_SYSCHAR message is posted to the window with the keyboard focus when a "
		"WM_SYSKEYDOWN message is translated by the TranslateMessage function. It specifies "
		"the character code of a system character key  that is, a character key that is "
		"pressed while the ALT key is down." } },
	{ 0x15,
	  { "WM_SYSCOLORCHANGE",
		"This message is sent to all top-level windows when a change is made to a system color "
		"setting." } },
	{ 0x112,
	  { "WM_SYSCOMMAND",
		"A window receives this message when the user chooses a command from the Window menu "
		"(formerly known as the system or control menu) or when the user chooses the maximize "
		"button, minimize button, restore button, or close button." } },
	{ 0x107,
	  { "WM_SYSDEADCHAR",
		"The WM_SYSDEADCHAR message is sent to the window with the keyboard focus when a "
		"WM_SYSKEYDOWN message is translated by the TranslateMessage function. WM_SYSDEADCHAR "
		"specifies the character code of a system dead key  that is, a dead key that is "
		"pressed while holding down the ALT key." } },
	{ 0x104,
	  { "WM_SYSKEYDOWN",
		"The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the "
		"user presses the F10 key (which activates the menu bar) or holds down the ALT key and "
		"then presses another key. It also occurs when no window currently has the keyboard "
		"focus; in this case, the WM_SYSKEYDOWN message is sent to the active window. The "
		"window that receives the message can distinguish between these two contexts by "
		"checking the context code in the lParam parameter." } },
	{ 0x105,
	  { "WM_SYSKEYUP",
		"The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user "
		"releases a key that was pressed while the ALT key was held down. It also occurs when "
		"no window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is "
		"sent to the active window. The window that receives the message can distinguish "
		"between these two contexts by checking the context code in the lParam parameter." } },
	{ 0x52,
	  { "WM_TCARD",
		"Sent to an application that has initiated a training card with Microsoft Windows "
		"Help. The message informs the application when the user clicks an authorable button. "
		"An application initiates a training card by specifying the HELP_TCARD command in a "
		"call to the WinHelp function." } },
	{ 0x1E,
	  { "WM_TIMECHANGE",
		"A message that is sent whenever there is a change in the system time." } },
	{ 0x113,
	  { "WM_TIMER",
		"The WM_TIMER message is posted to the installing thread's message queue when a timer "
		"expires. The message is posted by the GetMessage or PeekMessage function." } },
	{ 0x304,
	  { "WM_UNDO",
		"An application sends a WM_UNDO message to an edit control to undo the last operation. "
		"When this message is sent to an edit control, the previously deleted text is restored "
		"or the previously added text is deleted." } },
	{ 0x125,
	  { "WM_UNINITMENUPOPUP",
		"The WM_UNINITMENUPOPUP message is sent when a drop-down menu or submenu has been "
		"destroyed." } },
	{ 0x400,
	  { "WM_USER",
		"The WM_USER constant is used by applications to help define private messages for use "
		"by private window classes, usually of the form WM_USER+X, where X is an integer "
		"value." } },
	{ 0x54,
	  { "WM_USERCHANGED",
		"The WM_USERCHANGED message is sent to all windows after the user has logged on or "
		"off. When the user logs on or off, the system updates the user-specific settings. The "
		"system sends this message immediately after updating the settings." } },
	{ 0x2E,
	  { "WM_VKEYTOITEM",
		"Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a "
		"WM_KEYDOWN message." } },
	{ 0x115,
	  { "WM_VSCROLL",
		"The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's "
		"standard vertical scroll bar. This message is also sent to the owner of a vertical "
		"scroll bar control when a scroll event occurs in the control." } },
	{ 0x30A,
	  { "WM_VSCROLLCLIPBOARD",
		"The WM_VSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer "
		"window when the clipboard contains data in the CF_OWNERDISPLAY format and an event "
		"occurs in the clipboard viewer's vertical scroll bar. The owner should scroll the "
		"clipboard image and update the scroll bar values." } },
	{ 0x47,
	  { "WM_WINDOWPOSCHANGED",
		"The WM_WINDOWPOSCHANGED message is sent to a window whose size, position, or place in "
		"the Z order has changed as a result of a call to the SetWindowPos function or another "
		"window-management function." } },
	{ 0x46,
	  { "WM_WINDOWPOSCHANGING",
		"The WM_WINDOWPOSCHANGING message is sent to a window whose size, position, or place "
		"in the Z order is about to change as a result of a call to the SetWindowPos function "
		"or another window-management function." } },
	{ 0x1A,
	  { "WM_WININICHANGE",
		"An application sends the WM_WININICHANGE message to all top-level windows after "
		"making a change to the WIN.INI file. The SystemParametersInfo function sends this "
		"message after an application uses the function to change a setting in WIN.INI. Note "
		"The WM_WININICHANGE message is provided only for compatibility with earlier versions "
		"of the system. Applications should use the WM_SETTINGCHANGE message." } },
	{ 0x20D,
	  { "WM_XBUTTONDBLCLK",
		"The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or "
		"second X button while the cursor is in the client area of a window. If the mouse is "
		"not captured, the message is posted to the window beneath the cursor. Otherwise, the "
		"message is posted to the window that has captured the mouse." } },
	{ 0x20B,
	  { "WM_XBUTTONDOWN",
		"The WM_XBUTTONDOWN message is posted when the user presses the first or second X "
		"button while the cursor is in the client area of a window. If the mouse is not "
		"captured, the message is posted to the window beneath the cursor. Otherwise, the "
		"message is posted to the window that has captured the mouse." } },
	{ 0x20C,
	  { "WM_XBUTTONUP",
		"The WM_XBUTTONUP message is posted when the user releases the first or second X "
		"button while the cursor is in the client area of a window. If the mouse is not "
		"captured, the message is posted to the window beneath the cursor. Otherwise, the "
		"message is posted to the window that has captured the mouse." } },
};

std::map<int, std::tuple<std::string, std::string>> explain_wm_fallback{
	{ 0000, { "WM_NULL", "" } },
	{ 0x01, { "WM_CREATE", "" } },
	{ 0x02, { "WM_DESTROY", "" } },
	{ 0x03, { "WM_MOVE", "" } },
	{ 0x04, { "WM_SIZEWAIT", "" } },
	{ 0x05, { "WM_SIZE", "" } },
	{ 0x06, { "WM_ACTIVATE", "" } },
	{ 0x07, { "WM_SETFOCUS", "" } },
	{ 0x08, { "WM_KILLFOCUS", "" } },
	{ 0x09, { "WM_SETVISIBLE", "" } },
	{ 0x0a, { "WM_ENABLE", "" } },
	{ 0x0b, { "WM_SETREDRAW", "" } },
	{ 0x0c, { "WM_SETTEXT", "" } },
	{ 0x0d, { "WM_GETTEXT", "" } },
	{ 0x0e, { "WM_GETTEXTLENGTH", "" } },
	{ 0x0f, { "WM_PAINT", "" } },
	{ 0x10, { "WM_CLOSE", "" } },
	{ 0x11, { "WM_QUERYENDSESSION", "" } },
	{ 0x12, { "WM_QUIT", "" } },
	{ 0x13, { "WM_QUERYOPEN", "" } },
	{ 0x14, { "WM_ERASEBKGND", "" } },
	{ 0x15, { "WM_SYSCOLORCHANGE", "" } },
	{ 0x16, { "WM_ENDSESSION", "" } },
	{ 0x17, { "WM_SYSTEMERROR", "" } },
	{ 0x18, { "WM_SHOWWINDOW", "" } },
	{ 0x19, { "WM_CTLCOLOR", "" } },
	{ 0x1a, { "WM_WININICHANGE", "" } },
	{ 0x1b, { "WM_DEVMODECHANGE", "" } },
	{ 0x1c, { "WM_ACTIVATEAPP", "" } },
	{ 0x1d, { "WM_FONTCHANGE", "" } },
	{ 0x1e, { "WM_TIMECHANGE", "" } },
	{ 0x1f, { "WM_CANCELMODE", "" } },
	{ 0x20, { "WM_SETCURSOR", "" } },
	{ 0x21, { "WM_MOUSEACTIVATE", "" } },
	{ 0x22, { "WM_CHILDACTIVATE", "" } },
	{ 0x23, { "WM_QUEUESYNC", "" } },
	{ 0x24, { "WM_GETMINMAXINFO", "" } },
	{ 0x25, { "WM_LOGOFF", "" } },
	{ 0x26, { "WM_PAINTICON", "" } },
	{ 0x27, { "WM_ICONERASEBKGND", "" } },
	{ 0x28, { "WM_NEXTDLGCTL", "" } },
	{ 0x29, { "WM_ALTTABACTIVE", "" } },
	{ 0x2a, { "WM_SPOOLERSTATUS", "" } },
	{ 0x2b, { "WM_DRAWITEM", "" } },
	{ 0x2c, { "WM_MEASUREITEM", "" } },
	{ 0x2d, { "WM_DELETEITEM", "" } },
	{ 0x2e, { "WM_VKEYTOITEM", "" } },
	{ 0x2f, { "WM_CHARTOITEM", "" } },
	{ 0x30, { "WM_SETFONT", "" } },
	{ 0x31, { "WM_GETFONT", "" } },
	{ 0x32, { "WM_SETHOTKEY", "" } },
	{ 0x33, { "WM_GETHOTKEY", "" } },
	{ 0x34, { "WM_SHELLNOTIFY", "" } },
	{ 0x35, { "WM_ISACTIVEICON", "" } },
	{ 0x36, { "WM_QUERYPARKICON", "" } },
	{ 0x37, { "WM_QUERYDRAGICON", "" } },
	{ 0x38, { "WM_WINHELP", "" } },
	{ 0x39, { "WM_COMPAREITEM", "" } },
	{ 0x3a, { "WM_FULLSCREEN", "" } },
	{ 0x3b, { "WM_CLIENTSHUTDOWN", "" } },
	{ 0x3c, { "WM_DDEMLEVENT", "" } },
	{ 0x3d, { "WM_GETOBJECT", "" } },
	{ 0x3e, { "undefined_1", "" } },
	{ 0x3f, { "undefined_2", "" } },
	{ 0x40, { "WM_TESTING", "" } },
	{ 0x41, { "WM_COMPACTING", "" } },
	{ 0x42, { "WM_OTHERWINDOWCREATED", "" } },
	{ 0x43, { "WM_OTHERWINDOWDESTROYED", "" } },
	{ 0x44, { "WM_COMMNOTIFY", "" } },
	{ 0x45, { "undefined_3", "" } },
	{ 0x46, { "WM_WINDOWPOSCHANGING", "" } },
	{ 0x47, { "WM_WINDOWPOSCHANGED", "" } },
	{ 0x48, { "WM_POWER", "" } },
	{ 0x49, { "WM_COPYGLOBALDATA", "" } },
	{ 0x4a, { "WM_COPYDATA", "" } },
	{ 0x4b, { "WM_CANCELJOURNAL", "" } },
	{ 0x4c, { "undefined_4", "" } },
	{ 0x4d, { "WM_KEYF1", "" } },
	{ 0x4e, { "WM_NOTIFY", "" } },
	{ 0x4f, { "WM_ACCESS_WINDOW", "" } },
	{ 0x50, { "WM_INPUTLANGCHANGEREQUEST", "" } },
	{ 0x51, { "WM_INPUTLANGCHANGE", "" } },
	{ 0x52, { "WM_TCARD", "" } },
	{ 0x53, { "WM_HELP", "" } },
	{ 0x54, { "WM_USERCHANGED", "" } },
	{ 0x55, { "WM_NOTIFYFORMAT", "" } },
	{ 0x56, { "undefined_5", "" } },
	{ 0x57, { "undefined_6", "" } },
	{ 0x58, { "undefined_7", "" } },
	{ 0x59, { "undefined_8", "" } },
	{ 0x5a, { "undefined_9", "" } },
	{ 0x5b, { "undefined_10", "" } },
	{ 0x5c, { "undefined_11", "" } },
	{ 0x5d, { "undefined_12", "" } },
	{ 0x5e, { "undefined_13", "" } },
	{ 0x5f, { "undefined_14", "" } },
	{ 0x60, { "undefined_15", "" } },
	{ 0x61, { "undefined_16", "" } },
	{ 0x62, { "undefined_17", "" } },
	{ 0x63, { "undefined_18", "" } },
	{ 0x64, { "undefined_19", "" } },
	{ 0x65, { "undefined_20", "" } },
	{ 0x66, { "undefined_21", "" } },
	{ 0x67, { "undefined_22", "" } },
	{ 0x68, { "undefined_23", "" } },
	{ 0x69, { "undefined_24", "" } },
	{ 0x6a, { "undefined_25", "" } },
	{ 0x6b, { "undefined_26", "" } },
	{ 0x6c, { "undefined_27", "" } },
	{ 0x6d, { "undefined_28", "" } },
	{ 0x6e, { "undefined_29", "" } },
	{ 0x6f, { "undefined_30", "" } },
	{ 0x70, { "WM_FINALDESTROY", "" } },
	{ 0x71, { "WM_MEASUREITEM_CLIENTDATA", "" } },
	{ 0x72, { "undefined_31", "" } },
	{ 0x73, { "undefined_32", "" } },
	{ 0x74, { "undefined_33", "" } },
	{ 0x75, { "undefined_34", "" } },
	{ 0x76, { "undefined_35", "" } },
	{ 0x77, { "undefined_36", "" } },
	{ 0x78, { "undefined_37", "" } },
	{ 0x79, { "undefined_38", "" } },
	{ 0x7a, { "undefined_39", "" } },
	{ 0x7b, { "WM_CONTEXTMENU", "" } },
	{ 0x7c, { "WM_STYLECHANGING", "" } },
	{ 0x7d, { "WM_STYLECHANGED", "" } },
	{ 0x7e, { "WM_DISPLAYCHANGE", "" } },
	{ 0x7f, { "WM_GETICON", "" } },
	{ 0x80, { "WM_SETICON", "" } },
	{ 0x81, { "WM_NCCREATE", "" } },
	{ 0x82, { "WM_NCDESTROY", "" } },
	{ 0x83, { "WM_NCCALCSIZE", "" } },
	{ 0x84, { "WM_NCHITTEST", "" } },
	{ 0x85, { "WM_NCPAINT", "" } },
	{ 0x86, { "WM_NCACTIVATE", "" } },
	{ 0x87, { "WM_GETDLGCODE", "" } },
	{ 0x88, { "WM_SYNCPAINT", "" } },
	{ 0x89, { "WM_SYNCTASK", "" } },
	{ 0x8a, { "undefined_40", "" } },
	{ 0x8b, { "WM_KLUDGEMINRECT", "" } },
	{ 0x8c, { "WM_LPKDRAWSWITCHWND", "" } },
	{ 0x8d, { "undefined_41", "" } },
	{ 0x8e, { "undefined_42", "" } },
	{ 0x8f, { "undefined_43", "" } },
	{ 0x90, { "WM_UAHDESTROYWINDOW", "" } },
	{ 0x91, { "WM_UAHDRAWMENU", "" } },
	{ 0x92, { "WM_UAHDRAWMENUITEM", "" } },
	{ 0x93, { "WM_UAHINITMENU", "" } },
	{ 0x94, { "WM_UAHMEASUREMENUITEM", "" } },
	{ 0x95, { "WM_UAHNCPAINTMENUPOPUP", "" } },
	{ 0x96, { "WM_UAHUPDATE", "" } },
	{ 0x97, { "undefined_44", "" } },
	{ 0x98, { "undefined_45", "" } },
	{ 0x99, { "undefined_46", "" } },
	{ 0x9a, { "undefined_47", "" } },
	{ 0x9b, { "undefined_48", "" } },
	{ 0x9c, { "undefined_49", "" } },
	{ 0x9d, { "undefined_50", "" } },
	{ 0x9e, { "undefined_51", "" } },
	{ 0x9f, { "undefined_52", "" } },
	{ 0xa0, { "WM_NCMOUSEMOVE", "" } },
	{ 0xa1, { "WM_NCLBUTTONDOWN", "" } },
	{ 0xa2, { "WM_NCLBUTTONUP", "" } },
	{ 0xa3, { "WM_NCLBUTTONDBLCLK", "" } },
	{ 0xa4, { "WM_NCRBUTTONDOWN", "" } },
	{ 0xa5, { "WM_NCRBUTTONUP", "" } },
	{ 0xa6, { "WM_NCRBUTTONDBLCLK", "" } },
	{ 0xa7, { "WM_NCMBUTTONDOWN", "" } },
	{ 0xa8, { "WM_NCMBUTTONUP", "" } },
	{ 0xa9, { "WM_NCMBUTTONDBLCLK", "" } },
	{ 0xaa, { "undefined_53", "" } },
	{ 0xab, { "WM_NCXBUTTONDOWN", "" } },
	{ 0xac, { "WM_NCXBUTTONUP", "" } },
	{ 0xad, { "WM_NCXBUTTONDBLCLK", "" } },
	{ 0xae, { "WM_NCUAHDRAWCAPTION", "" } },
	{ 0xaf, { "WM_NCUAHDRAWFRAME", "" } },
	{ 0xb0, { "EM_GETSEL", "" } },
	{ 0xb1, { "EM_SETSEL", "" } },
	{ 0xb2, { "EM_GETRECT", "" } },
	{ 0xb3, { "EM_SETRECT", "" } },
	{ 0xb4, { "EM_SETRECTNP", "" } },
	{ 0xb5, { "EM_SCROLL", "" } },
	{ 0xb6, { "EM_LINESCROLL", "" } },
	{ 0xb7, { "EM_SCROLLCARET", "" } },
	{ 0xb8, { "EM_GETMODIFY", "" } },
	{ 0xb9, { "EM_SETMODIFY", "" } },
	{ 0xba, { "EM_GETLINECOUNT", "" } },
	{ 0xbb, { "EM_LINEINDEX", "" } },
	{ 0xbc, { "EM_SETHANDLE", "" } },
	{ 0xbd, { "EM_GETHANDLE", "" } },
	{ 0xbe, { "EM_GETTHUMB", "" } },
	{ 0xbf, { "undefined_54", "" } },
	{ 0xc0, { "undefined_55", "" } },
	{ 0xc1, { "EM_LINELENGTH", "" } },
	{ 0xc2, { "EM_REPLACESEL", "" } },
	{ 0xc3, { "EM_SETFONT", "" } },
	{ 0xc4, { "EM_GETLINE", "" } },
	{ 0xc5, { "EM_LIMITTEXT", "" } },
	{ 0xc6, { "EM_CANUNDO", "" } },
	{ 0xc7, { "EM_UNDO", "" } },
	{ 0xc8, { "EM_FMTLINES", "" } },
	{ 0xc9, { "EM_LINEFROMCHAR", "" } },
	{ 0xca, { "EM_SETWORDBREAK", "" } },
	{ 0xcb, { "EM_SETTABSTOPS", "" } },
	{ 0xcc, { "EM_SETPASSWORDCHAR", "" } },
	{ 0xcd, { "EM_EMPTYUNDOBUFFER", "" } },
	{ 0xce, { "EM_GETFIRSTVISIBLELINE", "" } },
	{ 0xcf, { "EM_SETREADONLY", "" } },
	{ 0xd0, { "EM_SETWORDBREAKPROC", "" } },
	{ 0xd1, { "EM_GETWORDBREAKPROC", "" } },
	{ 0xd2, { "EM_GETPASSWORDCHAR", "" } },
	{ 0xd3, { "EM_SETMARGINS", "" } },
	{ 0xd4, { "EM_GETMARGINS", "" } },
	{ 0xd5, { "EM_GETLIMITTEXT", "" } },
	{ 0xd6, { "EM_POSFROMCHAR", "" } },
	{ 0xd7, { "EM_CHARFROMPOS", "" } },
	{ 0xd8, { "EM_SETIMESTATUS", "" } },
	{ 0xd9, { "EM_GETIMESTATUS", "" } },
	{ 0xda, { "EM_MSGMAX", "" } },
	{ 0xdb, { "undefined_56", "" } },
	{ 0xdc, { "undefined_57", "" } },
	{ 0xdd, { "undefined_58", "" } },
	{ 0xde, { "undefined_59", "" } },
	{ 0xdf, { "undefined_60", "" } },
	{ 0xe0, { "undefined_61", "" } },
	{ 0xe1, { "undefined_62", "" } },
	{ 0xe2, { "undefined_63", "" } },
	{ 0xe3, { "undefined_64", "" } },
	{ 0xe4, { "undefined_65", "" } },
	{ 0xe5, { "undefined_66", "" } },
	{ 0xe6, { "undefined_67", "" } },
	{ 0xe7, { "undefined_68", "" } },
	{ 0xe8, { "undefined_69", "" } },
	{ 0xe9, { "undefined_70", "" } },
	{ 0xea, { "undefined_71", "" } },
	{ 0xeb, { "undefined_72", "" } },
	{ 0xec, { "undefined_73", "" } },
	{ 0xed, { "undefined_74", "" } },
	{ 0xee, { "undefined_75", "" } },
	{ 0xef, { "undefined_76", "" } },
	{ 0xf0, { "undefined_77", "" } },
	{ 0xf1, { "undefined_78", "" } },
	{ 0xf2, { "undefined_79", "" } },
	{ 0xf3, { "undefined_80", "" } },
	{ 0xf4, { "undefined_81", "" } },
	{ 0xf5, { "undefined_82", "" } },
	{ 0xf6, { "undefined_83", "" } },
	{ 0xf7, { "undefined_84", "" } },
	{ 0xf8, { "undefined_85", "" } },
	{ 0xf9, { "undefined_86", "" } },
	{ 0xfa, { "undefined_87", "" } },
	{ 0xfb, { "undefined_88", "" } },
	{ 0xfc, { "undefined_89", "" } },
	{ 0xfd, { "undefined_90", "" } },
	{ 0xfe, { "WM_INPUT_DEVICE_CHANGE", "" } },
	{ 0xff, { "WM_INPUT", "" } },
	{ 0x100, { "WM_KEYDOWN", "" } },
	{ 0x101, { "WM_KEYUP", "" } },
	{ 0x102, { "WM_CHAR", "" } },
	{ 0x103, { "WM_DEADCHAR", "" } },
	{ 0x104, { "WM_SYSKEYDOWN", "" } },
	{ 0x105, { "WM_SYSKEYUP", "" } },
	{ 0x106, { "WM_SYSCHAR", "" } },
	{ 0x107, { "WM_SYSDEADCHAR", "" } },
	{ 0x108, { "WM_YOMICHAR", "" } },
	{ 0x109, { "WM_UNICHAR", "" } },
	{ 0x10a, { "WM_CONVERTREQUEST", "" } },
	{ 0x10b, { "WM_CONVERTRESULT", "" } },
	{ 0x10c, { "WM_INTERIM", "" } },
	{ 0x10d, { "WM_IME_STARTCOMPOSITION", "" } },
	{ 0x10e, { "WM_IME_ENDCOMPOSITION", "" } },
	{ 0x10f, { "WM_IME_COMPOSITION", "" } },
	{ 0x110, { "WM_INITDIALOG", "" } },
	{ 0x111, { "WM_COMMAND", "" } },
	{ 0x112, { "WM_SYSCOMMAND", "" } },
	{ 0x113, { "WM_TIMER", "" } },
	{ 0x114, { "WM_HSCROLL", "" } },
	{ 0x115, { "WM_VSCROLL", "" } },
	{ 0x116, { "WM_INITMENU", "" } },
	{ 0x117, { "WM_INITMENUPOPUP", "" } },
	{ 0x118, { "WM_SYSTIMER", "" } },
	{ 0x119, { "WM_GESTURE", "" } },
	{ 0x11a, { "WM_GESTURENOTIFY", "" } },
	{ 0x11b, { "WM_GESTUREINPUT", "" } },
	{ 0x11c, { "WM_GESTURENOTIFIED", "" } },
	{ 0x11d, { "undefined_91", "" } },
	{ 0x11e, { "undefined_92", "" } },
	{ 0x11f, { "WM_MENUSELECT", "" } },
	{ 0x120, { "WM_MENUCHAR", "" } },
	{ 0x121, { "WM_ENTERIDLE", "" } },
	{ 0x122, { "WM_MENURBUTTONUP", "" } },
	{ 0x123, { "WM_MENUDRAG", "" } },
	{ 0x124, { "WM_MENUGETOBJECT", "" } },
	{ 0x125, { "WM_UNINITMENUPOPUP", "" } },
	{ 0x126, { "WM_MENUCOMMAND", "" } },
	{ 0x127, { "WM_CHANGEUISTATE", "" } },
	{ 0x128, { "WM_UPDATEUISTATE", "" } },
	{ 0x129, { "WM_QUERYUISTATE", "" } },
	{ 0x12a, { "undefined_93", "" } },
	{ 0x12b, { "undefined_94", "" } },
	{ 0x12c, { "undefined_95", "" } },
	{ 0x12d, { "undefined_96", "" } },
	{ 0x12e, { "undefined_97", "" } },
	{ 0x12f, { "undefined_98", "" } },
	{ 0x130, { "undefined_99", "" } },
	{ 0x131, { "WM_LBTRACKPOINT", "" } },
	{ 0x132, { "WM_CTLCOLORMSGBOX", "" } },
	{ 0x133, { "WM_CTLCOLOREDIT", "" } },
	{ 0x134, { "WM_CTLCOLORLISTBOX", "" } },
	{ 0x135, { "WM_CTLCOLORBTN", "" } },
	{ 0x136, { "WM_CTLCOLORDLG", "" } },
	{ 0x137, { "WM_CTLCOLORSCROLLBAR", "" } },
	{ 0x138, { "WM_CTLCOLORSTATIC", "" } },
	{ 0x139, { "undefined_100", "" } },
	{ 0x13a, { "undefined_101", "" } },
	{ 0x13b, { "undefined_102", "" } },
	{ 0x13c, { "undefined_103", "" } },
	{ 0x13d, { "undefined_104", "" } },
	{ 0x13e, { "undefined_105", "" } },
	{ 0x13f, { "undefined_106", "" } },
	{ 0x140, { "CB_GETEDITSEL", "" } },
	{ 0x141, { "CB_LIMITTEXT", "" } },
	{ 0x142, { "CB_SETEDITSEL", "" } },
	{ 0x143, { "CB_ADDSTRING", "" } },
	{ 0x144, { "CB_DELETESTRING", "" } },
	{ 0x145, { "CB_DIR", "" } },
	{ 0x146, { "CB_GETCOUNT", "" } },
	{ 0x147, { "CB_GETCURSEL", "" } },
	{ 0x148, { "CB_GETLBTEXT", "" } },
	{ 0x149, { "CB_GETLBTEXTLEN", "" } },
	{ 0x14a, { "CB_INSERTSTRING", "" } },
	{ 0x14b, { "CB_RESETCONTENT", "" } },
	{ 0x14c, { "CB_FINDSTRING", "" } },
	{ 0x14d, { "CB_SELECTSTRING", "" } },
	{ 0x14e, { "CB_SETCURSEL", "" } },
	{ 0x14f, { "CB_SHOWDROPDOWN", "" } },
	{ 0x150, { "CB_GETITEMDATA", "" } },
	{ 0x151, { "CB_SETITEMDATA", "" } },
	{ 0x152, { "CB_GETDROPPEDCONTROLRECT", "" } },
	{ 0x153, { "CB_SETITEMHEIGHT", "" } },
	{ 0x154, { "CB_GETITEMHEIGHT", "" } },
	{ 0x155, { "CB_SETEXTENDEDUI", "" } },
	{ 0x156, { "CB_GETEXTENDEDUI", "" } },
	{ 0x157, { "CB_GETDROPPEDSTATE", "" } },
	{ 0x158, { "CB_FINDSTRINGEXACT", "" } },
	{ 0x159, { "CB_SETLOCALE", "" } },
	{ 0x15a, { "CB_GETLOCALE", "" } },
	{ 0x15b, { "CB_GETTOPINDEX", "" } },
	{ 0x15c, { "CB_SETTOPINDEX", "" } },
	{ 0x15d, { "CB_GETHORIZONTALEXTENT", "" } },
	{ 0x15e, { "CB_SETHORIZONTALEXTENT", "" } },
	{ 0x15f, { "CB_GETDROPPEDWIDTH", "" } },
	{ 0x160, { "CB_SETDROPPEDWIDTH", "" } },
	{ 0x161, { "CB_INITSTORAGE", "" } },
	{ 0x162, { "CB_MSGMAX_OLD", "" } },
	{ 0x163, { "CB_MULTIPLEADDSTRING", "" } },
	{ 0x164, { "CB_GETCOMBOBOXINFO", "" } },
	{ 0x165, { "CB_MSGMAX", "" } },
	{ 0x166, { "undefined_107", "" } },
	{ 0x167, { "undefined_108", "" } },
	{ 0x168, { "undefined_109", "" } },
	{ 0x169, { "undefined_110", "" } },
	{ 0x16a, { "undefined_111", "" } },
	{ 0x16b, { "undefined_112", "" } },
	{ 0x16c, { "undefined_113", "" } },
	{ 0x16d, { "undefined_114", "" } },
	{ 0x16e, { "undefined_115", "" } },
	{ 0x16f, { "undefined_116", "" } },
	{ 0x170, { "undefined_117", "" } },
	{ 0x171, { "undefined_118", "" } },
	{ 0x172, { "undefined_119", "" } },
	{ 0x173, { "undefined_120", "" } },
	{ 0x174, { "undefined_121", "" } },
	{ 0x175, { "undefined_122", "" } },
	{ 0x176, { "undefined_123", "" } },
	{ 0x177, { "undefined_124", "" } },
	{ 0x178, { "undefined_125", "" } },
	{ 0x179, { "undefined_126", "" } },
	{ 0x17a, { "undefined_127", "" } },
	{ 0x17b, { "undefined_128", "" } },
	{ 0x17c, { "undefined_129", "" } },
	{ 0x17d, { "undefined_130", "" } },
	{ 0x17e, { "undefined_131", "" } },
	{ 0x17f, { "undefined_132", "" } },
	{ 0x180, { "LB_ADDSTRING", "" } },
	{ 0x181, { "LB_INSERTSTRING", "" } },
	{ 0x182, { "LB_DELETESTRING", "" } },
	{ 0x183, { "LB_SELITEMRANGEEX", "" } },
	{ 0x184, { "LB_RESETCONTENT", "" } },
	{ 0x185, { "LB_SETSEL", "" } },
	{ 0x186, { "LB_SETCURSEL", "" } },
	{ 0x187, { "LB_GETSEL", "" } },
	{ 0x188, { "LB_GETCURSEL", "" } },
	{ 0x189, { "LB_GETTEXT", "" } },
	{ 0x18a, { "LB_GETTEXTLEN", "" } },
	{ 0x18b, { "LB_GETCOUNT", "" } },
	{ 0x18c, { "LB_SELECTSTRING", "" } },
	{ 0x18d, { "LB_DIR", "" } },
	{ 0x18e, { "LB_GETTOPINDEX", "" } },
	{ 0x18f, { "LB_FINDSTRING", "" } },
	{ 0x190, { "LB_GETSELCOUNT", "" } },
	{ 0x191, { "LB_GETSELITEMS", "" } },
	{ 0x192, { "LB_SETTABSTOPS", "" } },
	{ 0x193, { "LB_GETHORIZONTALEXTENT", "" } },
	{ 0x194, { "LB_SETHORIZONTALEXTENT", "" } },
	{ 0x195, { "LB_SETCOLUMNWIDTH", "" } },
	{ 0x196, { "LB_ADDFILE", "" } },
	{ 0x197, { "LB_SETTOPINDEX", "" } },
	{ 0x198, { "LB_GETITEMRECT", "" } },
	{ 0x199, { "LB_GETITEMDATA", "" } },
	{ 0x19a, { "LB_SETITEMDATA", "" } },
	{ 0x19b, { "LB_SELITEMRANGE", "" } },
	{ 0x19c, { "LB_SETANCHORINDEX", "" } },
	{ 0x19d, { "LB_GETANCHORINDEX", "" } },
	{ 0x19e, { "LB_SETCARETINDEX", "" } },
	{ 0x19f, { "LB_GETCARETINDEX", "" } },
	{ 0x1a0, { "LB_SETITEMHEIGHT", "" } },
	{ 0x1a1, { "LB_GETITEMHEIGHT", "" } },
	{ 0x1a2, { "LB_FINDSTRINGEXACT", "" } },
	{ 0x1a3, { "LBCB_CARETON", "" } },
	{ 0x1a4, { "LBCB_CARETOFF", "" } },
	{ 0x1a5, { "LB_SETLOCALE", "" } },
	{ 0x1a6, { "LB_GETLOCALE", "" } },
	{ 0x1a7, { "LB_SETCOUNT", "" } },
	{ 0x1a8, { "LB_INITSTORAGE", "" } },
	{ 0x1a9, { "LB_ITEMFROMPOINT", "" } },
	{ 0x1aa, { "LB_INSERTSTRINGUPPER", "" } },
	{ 0x1ab, { "LB_INSERTSTRINGLOWER", "" } },
	{ 0x1ac, { "LB_ADDSTRINGUPPER", "" } },
	{ 0x1ad, { "LB_ADDSTRINGLOWER", "" } },
	{ 0x1ae, { "LBCB_STARTTRACK", "" } },
	{ 0x1af, { "LBCB_ENDTRACK", "" } },
	{ 0x1b0, { "LB_MSGMAX_OLD", "" } },
	{ 0x1b1, { "LB_MULTIPLEADDSTRING", "" } },
	{ 0x1b2, { "LB_GETLISTBOXINFO", "" } },
	{ 0x1b3, { "LB_MSGMAX", "" } },
	{ 0x1b4, { "undefined_133", "" } },
	{ 0x1b5, { "undefined_134", "" } },
	{ 0x1b6, { "undefined_135", "" } },
	{ 0x1b7, { "undefined_136", "" } },
	{ 0x1b8, { "undefined_137", "" } },
	{ 0x1b9, { "undefined_138", "" } },
	{ 0x1ba, { "undefined_139", "" } },
	{ 0x1bb, { "undefined_140", "" } },
	{ 0x1bc, { "undefined_141", "" } },
	{ 0x1bd, { "undefined_142", "" } },
	{ 0x1be, { "undefined_143", "" } },
	{ 0x1bf, { "undefined_144", "" } },
	{ 0x1c0, { "undefined_145", "" } },
	{ 0x1c1, { "undefined_146", "" } },
	{ 0x1c2, { "undefined_147", "" } },
	{ 0x1c3, { "undefined_148", "" } },
	{ 0x1c4, { "undefined_149", "" } },
	{ 0x1c5, { "undefined_150", "" } },
	{ 0x1c6, { "undefined_151", "" } },
	{ 0x1c7, { "undefined_152", "" } },
	{ 0x1c8, { "undefined_153", "" } },
	{ 0x1c9, { "undefined_154", "" } },
	{ 0x1ca, { "undefined_155", "" } },
	{ 0x1cb, { "undefined_156", "" } },
	{ 0x1cc, { "undefined_157", "" } },
	{ 0x1cd, { "undefined_158", "" } },
	{ 0x1ce, { "undefined_159", "" } },
	{ 0x1cf, { "undefined_160", "" } },
	{ 0x1d0, { "undefined_161", "" } },
	{ 0x1d1, { "undefined_162", "" } },
	{ 0x1d2, { "undefined_163", "" } },
	{ 0x1d3, { "undefined_164", "" } },
	{ 0x1d4, { "undefined_165", "" } },
	{ 0x1d5, { "undefined_166", "" } },
	{ 0x1d6, { "undefined_167", "" } },
	{ 0x1d7, { "undefined_168", "" } },
	{ 0x1d8, { "undefined_169", "" } },
	{ 0x1d9, { "undefined_170", "" } },
	{ 0x1da, { "undefined_171", "" } },
	{ 0x1db, { "undefined_172", "" } },
	{ 0x1dc, { "undefined_173", "" } },
	{ 0x1dd, { "undefined_174", "" } },
	{ 0x1de, { "undefined_175", "" } },
	{ 0x1df, { "undefined_176", "" } },
	{ 0x1e0, { "MN_FIRST", "" } },
	{ 0x1e1, { "MN_GETHMENU", "" } },
	{ 0x1e2, { "undefined_177", "" } },
	{ 0x1e3, { "undefined_178", "" } },
	{ 0x1e4, { "undefined_179", "" } },
	{ 0x1e5, { "undefined_180", "" } },
	{ 0x1e6, { "undefined_181", "" } },
	{ 0x1e7, { "undefined_182", "" } },
	{ 0x1e8, { "undefined_183", "" } },
	{ 0x1e9, { "undefined_184", "" } },
	{ 0x1ea, { "undefined_185", "" } },
	{ 0x1eb, { "undefined_186", "" } },
	{ 0x1ec, { "undefined_187", "" } },
	{ 0x1ed, { "undefined_188", "" } },
	{ 0x1ee, { "undefined_189", "" } },
	{ 0x1ef, { "undefined_190", "" } },
	{ 0x1f0, { "undefined_191", "" } },
	{ 0x1f1, { "undefined_192", "" } },
	{ 0x1f2, { "undefined_193", "" } },
	{ 0x1f3, { "undefined_194", "" } },
	{ 0x1f4, { "undefined_195", "" } },
	{ 0x1f5, { "undefined_196", "" } },
	{ 0x1f6, { "undefined_197", "" } },
	{ 0x1f7, { "undefined_198", "" } },
	{ 0x1f8, { "undefined_199", "" } },
	{ 0x1f9, { "undefined_200", "" } },
	{ 0x1fa, { "undefined_201", "" } },
	{ 0x1fb, { "undefined_202", "" } },
	{ 0x1fc, { "undefined_203", "" } },
	{ 0x1fd, { "undefined_204", "" } },
	{ 0x1fe, { "undefined_205", "" } },
	{ 0x1ff, { "undefined_206", "" } },
	{ 0x200, { "WM_MOUSEMOVE", "" } },
	{ 0x201, { "WM_LBUTTONDOWN", "" } },
	{ 0x202, { "WM_LBUTTONUP", "" } },
	{ 0x203, { "WM_LBUTTONDBLCLK", "" } },
	{ 0x204, { "WM_RBUTTONDOWN", "" } },
	{ 0x205, { "WM_RBUTTONUP", "" } },
	{ 0x206, { "WM_RBUTTONDBLCLK", "" } },
	{ 0x207, { "WM_MBUTTONDOWN", "" } },
	{ 0x208, { "WM_MBUTTONUP", "" } },
	{ 0x209, { "WM_MBUTTONDBLCLK", "" } },
	{ 0x20a, { "WM_MOUSEWHEEL", "" } },
	{ 0x20b, { "WM_XBUTTONDOWN", "" } },
	{ 0x20c, { "WM_XBUTTONUP", "" } },
	{ 0x20d, { "WM_XBUTTONDBLCLK", "" } },
	{ 0x20e, { "WM_MOUSEHWHEEL", "" } },
	{ 0x20f, { "undefined_207", "" } },
	{ 0x210, { "WM_PARENTNOTIFY", "" } },
	{ 0x211, { "WM_ENTERMENULOOP", "" } },
	{ 0x212, { "WM_EXITMENULOOP", "" } },
	{ 0x213, { "WM_NEXTMENU", "" } },
	{ 0x214, { "WM_SIZING", "" } },
	{ 0x215, { "WM_CAPTURECHANGED", "" } },
	{ 0x216, { "WM_MOVING", "" } },
	{ 0x217, { "undefined_208", "" } },
	{ 0x218, { "WM_POWERBROADCAST", "" } },
	{ 0x219, { "WM_DEVICECHANGE", "" } },
	{ 0x21a, { "undefined_209", "" } },
	{ 0x21b, { "undefined_210", "" } },
	{ 0x21c, { "undefined_211", "" } },
	{ 0x21d, { "undefined_212", "" } },
	{ 0x21e, { "undefined_213", "" } },
	{ 0x21f, { "undefined_214", "" } },
	{ 0x220, { "WM_MDICREATE", "" } },
	{ 0x221, { "WM_MDIDESTROY", "" } },
	{ 0x222, { "WM_MDIACTIVATE", "" } },
	{ 0x223, { "WM_MDIRESTORE", "" } },
	{ 0x224, { "WM_MDINEXT", "" } },
	{ 0x225, { "WM_MDIMAXIMIZE", "" } },
	{ 0x226, { "WM_MDITILE", "" } },
	{ 0x227, { "WM_MDICASCADE", "" } },
	{ 0x228, { "WM_MDIICONARRANGE", "" } },
	{ 0x229, { "WM_MDIGETACTIVE", "" } },
	{ 0x22a, { "WM_DROPOBJECT", "" } },
	{ 0x22b, { "WM_QUERYDROPOBJECT", "" } },
	{ 0x22c, { "WM_BEGINDRAG", "" } },
	{ 0x22d, { "WM_DRAGLOOP", "" } },
	{ 0x22e, { "WM_DRAGSELECT", "" } },
	{ 0x22f, { "WM_DRAGMOVE", "" } },
	{ 0x230, { "WM_MDISETMENU", "" } },
	{ 0x231, { "WM_ENTERSIZEMOVE", "" } },
	{ 0x232, { "WM_EXITSIZEMOVE", "" } },
	{ 0x233, { "WM_DROPFILES", "" } },
	{ 0x234, { "WM_MDIREFRESHMENU", "" } },
	{ 0x235, { "undefined_215", "" } },
	{ 0x236, { "undefined_216", "" } },
	{ 0x237, { "undefined_217", "" } },
	{ 0x238, { "WM_POINTERDEVICECHANGE", "" } },
	{ 0x239, { "WM_POINTERDEVICEINRANGE", "" } },
	{ 0x23a, { "WM_POINTERDEVICEOUTOFRANGE", "" } },
	{ 0x23b, { "WM_STOPINERTIA", "" } },
	{ 0x23c, { "WM_ENDINERTIA", "" } },
	{ 0x23d, { "WM_EDGYINERTIA", "" } },
	{ 0x23e, { "undefined_218", "" } },
	{ 0x23f, { "undefined_219", "" } },
	{ 0x240, { "WM_TOUCH", "" } },
	{ 0x241, { "WM_NCPOINTERUPDATE", "" } },
	{ 0x242, { "WM_NCPOINTERDOWN", "" } },
	{ 0x243, { "WM_NCPOINTERUP", "" } },
	{ 0x244, { "WM_NCPOINTERLAST", "" } },
	{ 0x245, { "WM_POINTERUPDATE", "" } },
	{ 0x246, { "WM_POINTERDOWN", "" } },
	{ 0x247, { "WM_POINTERUP", "" } },
	{ 0x248, { "WM_POINTER_reserved_248", "" } },
	{ 0x249, { "WM_POINTERENTER", "" } },
	{ 0x24a, { "WM_POINTERLEAVE", "" } },
	{ 0x24b, { "WM_POINTERACTIVATE", "" } },
	{ 0x24c, { "WM_POINTERCAPTURECHANGED", "" } },
	{ 0x24d, { "WM_TOUCHHITTESTING", "" } },
	{ 0x24e, { "WM_POINTERWHEEL", "" } },
	{ 0x24f, { "WM_POINTERHWHEEL", "" } },
	{ 0x250, { "WM_POINTER_reserved_250", "" } },
	{ 0x251, { "WM_POINTER_reserved_251", "" } },
	{ 0x252, { "WM_POINTER_reserved_252", "" } },
	{ 0x253, { "WM_POINTER_reserved_253", "" } },
	{ 0x254, { "WM_POINTER_reserved_254", "" } },
	{ 0x255, { "WM_POINTER_reserved_255", "" } },
	{ 0x256, { "WM_POINTER_reserved_256", "" } },
	{ 0x257, { "WM_POINTERLAST", "" } },
	{ 0x258, { "undefined_220", "" } },
	{ 0x259, { "undefined_221", "" } },
	{ 0x25a, { "undefined_222", "" } },
	{ 0x25b, { "undefined_223", "" } },
	{ 0x25c, { "undefined_224", "" } },
	{ 0x25d, { "undefined_225", "" } },
	{ 0x25e, { "undefined_226", "" } },
	{ 0x25f, { "undefined_227", "" } },
	{ 0x260, { "undefined_228", "" } },
	{ 0x261, { "undefined_229", "" } },
	{ 0x262, { "undefined_230", "" } },
	{ 0x263, { "undefined_231", "" } },
	{ 0x264, { "undefined_232", "" } },
	{ 0x265, { "undefined_233", "" } },
	{ 0x266, { "undefined_234", "" } },
	{ 0x267, { "undefined_235", "" } },
	{ 0x268, { "undefined_236", "" } },
	{ 0x269, { "undefined_237", "" } },
	{ 0x26a, { "undefined_238", "" } },
	{ 0x26b, { "undefined_239", "" } },
	{ 0x26c, { "undefined_240", "" } },
	{ 0x26d, { "undefined_241", "" } },
	{ 0x26e, { "undefined_242", "" } },
	{ 0x26f, { "undefined_243", "" } },
	{ 0x270, { "WM_VISIBILITYCHANGED", "" } },
	{ 0x271, { "WM_VIEWSTATECHANGED", "" } },
	{ 0x272, { "WM_UNREGISTER_WINDOW_SERVICES", "" } },
	{ 0x273, { "WM_CONSOLIDATED", "" } },
	{ 0x274, { "undefined_244", "" } },
	{ 0x275, { "undefined_245", "" } },
	{ 0x276, { "undefined_246", "" } },
	{ 0x277, { "undefined_247", "" } },
	{ 0x278, { "undefined_248", "" } },
	{ 0x279, { "undefined_249", "" } },
	{ 0x27a, { "undefined_250", "" } },
	{ 0x27b, { "undefined_251", "" } },
	{ 0x27c, { "undefined_252", "" } },
	{ 0x27d, { "undefined_253", "" } },
	{ 0x27e, { "undefined_254", "" } },
	{ 0x27f, { "undefined_255", "" } },
	{ 0x280, { "WM_IME_REPORT", "" } },
	{ 0x281, { "WM_IME_SETCONTEXT", "" } },
	{ 0x282, { "WM_IME_NOTIFY", "" } },
	{ 0x283, { "WM_IME_CONTROL", "" } },
	{ 0x284, { "WM_IME_COMPOSITIONFULL", "" } },
	{ 0x285, { "WM_IME_SELECT", "" } },
	{ 0x286, { "WM_IME_CHAR", "" } },
	{ 0x287, { "WM_IME_SYSTEM", "" } },
	{ 0x288, { "WM_IME_REQUEST", "" } },
	{ 0x289, { "WM_KANJI_reserved_289", "" } },
	{ 0x28a, { "WM_KANJI_reserved_28a", "" } },
	{ 0x28b, { "WM_KANJI_reserved_28b", "" } },
	{ 0x28c, { "WM_KANJI_reserved_28c", "" } },
	{ 0x28d, { "WM_KANJI_reserved_28d", "" } },
	{ 0x28e, { "WM_KANJI_reserved_28e", "" } },
	{ 0x28f, { "WM_KANJI_reserved_28f", "" } },
	{ 0x290, { "WM_IME_KEYDOWN", "" } },
	{ 0x291, { "WM_IME_KEYUP", "" } },
	{ 0x292, { "WM_KANJI_reserved_292", "" } },
	{ 0x293, { "WM_KANJI_reserved_293", "" } },
	{ 0x294, { "WM_KANJI_reserved_294", "" } },
	{ 0x295, { "WM_KANJI_reserved_295", "" } },
	{ 0x296, { "WM_KANJI_reserved_296", "" } },
	{ 0x297, { "WM_KANJI_reserved_297", "" } },
	{ 0x298, { "WM_KANJI_reserved_298", "" } },
	{ 0x299, { "WM_KANJI_reserved_299", "" } },
	{ 0x29a, { "WM_KANJI_reserved_29a", "" } },
	{ 0x29b, { "WM_KANJI_reserved_29b", "" } },
	{ 0x29c, { "WM_KANJI_reserved_29c", "" } },
	{ 0x29d, { "WM_KANJI_reserved_29d", "" } },
	{ 0x29e, { "WM_KANJI_reserved_29e", "" } },
	{ 0x29f, { "WM_KANJILAST", "" } },
	{ 0x2a0, { "WM_NCMOUSEHOVER", "" } },
	{ 0x2a1, { "WM_MOUSEHOVER", "" } },
	{ 0x2a2, { "WM_NCMOUSELEAVE", "" } },
	{ 0x2a3, { "WM_MOUSELEAVE", "" } },
	{ 0x2a4, { "WM_TRACKMOUSEEVENT__reserved_2a4", "" } },
	{ 0x2a5, { "WM_TRACKMOUSEEVENT__reserved_2a5", "" } },
	{ 0x2a6, { "WM_TRACKMOUSEEVENT__reserved_2a6", "" } },
	{ 0x2a7, { "WM_TRACKMOUSEEVENT__reserved_2a7", "" } },
	{ 0x2a8, { "WM_TRACKMOUSEEVENT__reserved_2a8", "" } },
	{ 0x2a9, { "WM_TRACKMOUSEEVENT__reserved_2a9", "" } },
	{ 0x2aa, { "WM_TRACKMOUSEEVENT__reserved_2aa", "" } },
	{ 0x2ab, { "WM_TRACKMOUSEEVENT__reserved_2ab", "" } },
	{ 0x2ac, { "WM_TRACKMOUSEEVENT__reserved_2ac", "" } },
	{ 0x2ad, { "WM_TRACKMOUSEEVENT__reserved_2ad", "" } },
	{ 0x2ae, { "WM_TRACKMOUSEEVENT__reserved_2ae", "" } },
	{ 0x2af, { "WM_TRACKMOUSEEVENT_LAST", "" } },
	{ 0x2b0, { "undefined_256", "" } },
	{ 0x2b1, { "WM_WTSSESSION_CHANGE", "" } },
	{ 0x2b2, { "undefined_257", "" } },
	{ 0x2b3, { "undefined_258", "" } },
	{ 0x2b4, { "undefined_259", "" } },
	{ 0x2b5, { "undefined_260", "" } },
	{ 0x2b6, { "undefined_261", "" } },
	{ 0x2b7, { "undefined_262", "" } },
	{ 0x2b8, { "undefined_263", "" } },
	{ 0x2b9, { "undefined_264", "" } },
	{ 0x2ba, { "undefined_265", "" } },
	{ 0x2bb, { "undefined_266", "" } },
	{ 0x2bc, { "undefined_267", "" } },
	{ 0x2bd, { "undefined_268", "" } },
	{ 0x2be, { "undefined_269", "" } },
	{ 0x2bf, { "undefined_270", "" } },
	{ 0x2c0, { "WM_TABLET_FIRST", "" } },
	{ 0x2c1, { "WM_TABLET__reserved_2c1", "" } },
	{ 0x2c2, { "WM_TABLET__reserved_2c2", "" } },
	{ 0x2c3, { "WM_TABLET__reserved_2c3", "" } },
	{ 0x2c4, { "WM_TABLET__reserved_2c4", "" } },
	{ 0x2c5, { "WM_TABLET__reserved_2c5", "" } },
	{ 0x2c6, { "WM_TABLET__reserved_2c6", "" } },
	{ 0x2c7, { "WM_TABLET__reserved_2c7", "" } },
	{ 0x2c8, { "WM_POINTERDEVICEADDED", "" } },
	{ 0x2c9, { "WM_POINTERDEVICEDELETED", "" } },
	{ 0x2ca, { "WM_TABLET__reserved_2ca", "" } },
	{ 0x2cb, { "WM_FLICK", "" } },
	{ 0x2cc, { "WM_TABLET__reserved_2cc", "" } },
	{ 0x2cd, { "WM_FLICKINTERNAL", "" } },
	{ 0x2ce, { "WM_BRIGHTNESSCHANGED", "" } },
	{ 0x2cf, { "WM_TABLET__reserved_2cf", "" } },
	{ 0x2d0, { "WM_TABLET__reserved_2d0", "" } },
	{ 0x2d1, { "WM_TABLET__reserved_2d1", "" } },
	{ 0x2d2, { "WM_TABLET__reserved_2d2", "" } },
	{ 0x2d3, { "WM_TABLET__reserved_2d3", "" } },
	{ 0x2d4, { "WM_TABLET__reserved_2d4", "" } },
	{ 0x2d5, { "WM_TABLET__reserved_2d5", "" } },
	{ 0x2d6, { "WM_TABLET__reserved_2d6", "" } },
	{ 0x2d7, { "WM_TABLET__reserved_2d7", "" } },
	{ 0x2d8, { "WM_TABLET__reserved_2d8", "" } },
	{ 0x2d9, { "WM_TABLET__reserved_2d9", "" } },
	{ 0x2da, { "WM_TABLET__reserved_2da", "" } },
	{ 0x2db, { "WM_TABLET__reserved_2db", "" } },
	{ 0x2dc, { "WM_TABLET__reserved_2dc", "" } },
	{ 0x2dd, { "WM_TABLET__reserved_2dd", "" } },
	{ 0x2de, { "WM_TABLET__reserved_2de", "" } },
	{ 0x2df, { "WM_TABLET_LAST", "" } },
	{ 0x2e0, { "WM_DPICHANGED", "" } },
	{ 0x2e1, { "undefined_271", "" } },
	{ 0x2e2, { "undefined_272", "" } },
	{ 0x2e3, { "undefined_273", "" } },
	{ 0x2e4, { "undefined_274", "" } },
	{ 0x2e5, { "undefined_275", "" } },
	{ 0x2e6, { "undefined_276", "" } },
	{ 0x2e7, { "undefined_277", "" } },
	{ 0x2e8, { "undefined_278", "" } },
	{ 0x2e9, { "undefined_279", "" } },
	{ 0x2ea, { "undefined_280", "" } },
	{ 0x2eb, { "undefined_281", "" } },
	{ 0x2ec, { "undefined_282", "" } },
	{ 0x2ed, { "undefined_283", "" } },
	{ 0x2ee, { "undefined_284", "" } },
	{ 0x2ef, { "undefined_285", "" } },
	{ 0x2f0, { "undefined_286", "" } },
	{ 0x2f1, { "undefined_287", "" } },
	{ 0x2f2, { "undefined_288", "" } },
	{ 0x2f3, { "undefined_289", "" } },
	{ 0x2f4, { "undefined_290", "" } },
	{ 0x2f5, { "undefined_291", "" } },
	{ 0x2f6, { "undefined_292", "" } },
	{ 0x2f7, { "undefined_293", "" } },
	{ 0x2f8, { "undefined_294", "" } },
	{ 0x2f9, { "undefined_295", "" } },
	{ 0x2fa, { "undefined_296", "" } },
	{ 0x2fb, { "undefined_297", "" } },
	{ 0x2fc, { "undefined_298", "" } },
	{ 0x2fd, { "undefined_299", "" } },
	{ 0x2fe, { "undefined_300", "" } },
	{ 0x2ff, { "undefined_301", "" } },
	{ 0x300, { "WM_CUT", "" } },
	{ 0x301, { "WM_COPY", "" } },
	{ 0x302, { "WM_PASTE", "" } },
	{ 0x303, { "WM_CLEAR", "" } },
	{ 0x304, { "WM_UNDO", "" } },
	{ 0x305, { "WM_RENDERFORMAT", "" } },
	{ 0x306, { "WM_RENDERALLFORMATS", "" } },
	{ 0x307, { "WM_DESTROYCLIPBOARD", "" } },
	{ 0x308, { "WM_DRAWCLIPBOARD", "" } },
	{ 0x309, { "WM_PAINTCLIPBOARD", "" } },
	{ 0x30a, { "WM_VSCROLLCLIPBOARD", "" } },
	{ 0x30b, { "WM_SIZECLIPBOARD", "" } },
	{ 0x30c, { "WM_ASKCBFORMATNAME", "" } },
	{ 0x30d, { "WM_CHANGECBCHAIN", "" } },
	{ 0x30e, { "WM_HSCROLLCLIPBOARD", "" } },
	{ 0x30f, { "WM_QUERYNEWPALETTE", "" } },
	{ 0x310, { "WM_PALETTEISCHANGING", "" } },
	{ 0x311, { "WM_PALETTECHANGED", "" } },
	{ 0x312, { "WM_HOTKEY", "" } },
	{ 0x313, { "WM_SYSMENU", "" } },
	{ 0x314, { "WM_HOOKMSG", "" } },
	{ 0x315, { "WM_EXITPROCESS", "" } },
	{ 0x316, { "WM_WAKETHREAD", "" } },
	{ 0x317, { "WM_PRINT", "" } },
	{ 0x318, { "WM_PRINTCLIENT", "" } },
	{ 0x319, { "WM_APPCOMMAND", "" } },
	{ 0x31a, { "WM_THEMECHANGED", "" } },
	{ 0x31b, { "WM_UAHINIT", "" } },
	{ 0x31c, { "WM_DESKTOPNOTIFY", "" } },
	{ 0x31d, { "WM_CLIPBOARDUPDATE", "" } },
	{ 0x31e, { "WM_DWMCOMPOSITIONCHANGED", "" } },
	{ 0x31f, { "WM_DWMNCRENDERINGCHANGED", "" } },
	{ 0x320, { "WM_DWMCOLORIZATIONCOLORCHANGED", "" } },
	{ 0x321, { "WM_DWMWINDOWMAXIMIZEDCHANGE", "" } },
	{ 0x322, { "WM_DWMEXILEFRAME", "" } },
	{ 0x323, { "WM_DWMSENDICONICTHUMBNAIL", "" } },
	{ 0x324, { "WM_MAGNIFICATION_STARTED", "" } },
	{ 0x325, { "WM_MAGNIFICATION_ENDED", "" } },
	{ 0x326, { "WM_DWMSENDICONICLIVEPREVIEWBITMAP", "" } },
	{ 0x327, { "WM_DWMTHUMBNAILSIZECHANGED", "" } },
	{ 0x328, { "WM_MAGNIFICATION_OUTPUT", "" } },
	{ 0x329, { "WM_BSDRDATA", "" } },
	{ 0x32a, { "WM_DWMTRANSITIONSTATECHANGED", "" } },
	{ 0x32b, { "undefined_302", "" } },
	{ 0x32c, { "WM_KEYBOARDCORRECTIONCALLOUT", "" } },
	{ 0x32d, { "WM_KEYBOARDCORRECTIONACTION", "" } },
	{ 0x32e, { "WM_UIACTION", "" } },
	{ 0x32f, { "WM_ROUTED_UI_EVENT", "" } },
	{ 0x330, { "WM_MEASURECONTROL", "" } },
	{ 0x331, { "WM_GETACTIONTEXT", "" } },
	{ 0x332, { "WM_CE_ONLY__reserved_332", "" } },
	{ 0x333, { "WM_FORWARDKEYDOWN", "" } },
	{ 0x334, { "WM_FORWARDKEYUP", "" } },
	{ 0x335, { "WM_CE_ONLY__reserved_335", "" } },
	{ 0x336, { "WM_CE_ONLY__reserved_336", "" } },
	{ 0x337, { "WM_CE_ONLY__reserved_337", "" } },
	{ 0x338, { "WM_CE_ONLY__reserved_338", "" } },
	{ 0x339, { "WM_CE_ONLY__reserved_339", "" } },
	{ 0x33a, { "WM_CE_ONLY__reserved_33a", "" } },
	{ 0x33b, { "WM_CE_ONLY__reserved_33b", "" } },
	{ 0x33c, { "WM_CE_ONLY__reserved_33c", "" } },
	{ 0x33d, { "WM_CE_ONLY__reserved_33d", "" } },
	{ 0x33e, { "WM_CE_ONLY_LAST", "" } },
	{ 0x33f, { "WM_GETTITLEBARINFOEX", "" } },
	{ 0x340, { "WM_NOTIFYWOW", "" } },
	{ 0x341, { "undefined_303", "" } },
	{ 0x342, { "undefined_304", "" } },
	{ 0x343, { "undefined_305", "" } },
	{ 0x344, { "undefined_306", "" } },
	{ 0x345, { "undefined_307", "" } },
	{ 0x346, { "undefined_308", "" } },
	{ 0x347, { "undefined_309", "" } },
	{ 0x348, { "undefined_310", "" } },
	{ 0x349, { "undefined_311", "" } },
	{ 0x34a, { "undefined_312", "" } },
	{ 0x34b, { "undefined_313", "" } },
	{ 0x34c, { "undefined_314", "" } },
	{ 0x34d, { "undefined_315", "" } },
	{ 0x34e, { "undefined_316", "" } },
	{ 0x34f, { "undefined_317", "" } },
	{ 0x350, { "undefined_318", "" } },
	{ 0x351, { "undefined_319", "" } },
	{ 0x352, { "undefined_320", "" } },
	{ 0x353, { "undefined_321", "" } },
	{ 0x354, { "undefined_322", "" } },
	{ 0x355, { "undefined_323", "" } },
	{ 0x356, { "undefined_324", "" } },
	{ 0x357, { "undefined_325", "" } },
	{ 0x358, { "WM_HANDHELDFIRST", "" } },
	{ 0x359, { "WM_HANDHELD_reserved_359", "" } },
	{ 0x35a, { "WM_HANDHELD_reserved_35a", "" } },
	{ 0x35b, { "WM_HANDHELD_reserved_35b", "" } },
	{ 0x35c, { "WM_HANDHELD_reserved_35c", "" } },
	{ 0x35d, { "WM_HANDHELD_reserved_35d", "" } },
	{ 0x35e, { "WM_HANDHELD_reserved_35e", "" } },
	{ 0x35f, { "WM_HANDHELDLAST", "" } },
	{ 0x360, { "WM_AFXFIRST", "" } },
	{ 0x361, { "WM_AFX_reserved_361", "" } },
	{ 0x362, { "WM_AFX_reserved_362", "" } },
	{ 0x363, { "WM_AFX_reserved_363", "" } },
	{ 0x364, { "WM_AFX_reserved_364", "" } },
	{ 0x365, { "WM_AFX_reserved_365", "" } },
	{ 0x366, { "WM_AFX_reserved_366", "" } },
	{ 0x367, { "WM_AFX_reserved_367", "" } },
	{ 0x368, { "WM_AFX_reserved_368", "" } },
	{ 0x369, { "WM_AFX_reserved_369", "" } },
	{ 0x36a, { "WM_AFX_reserved_36a", "" } },
	{ 0x36b, { "WM_AFX_reserved_36b", "" } },
	{ 0x36c, { "WM_AFX_reserved_36c", "" } },
	{ 0x36d, { "WM_AFX_reserved_36d", "" } },
	{ 0x36e, { "WM_AFX_reserved_36e", "" } },
	{ 0x36f, { "WM_AFX_reserved_36f", "" } },
	{ 0x370, { "WM_AFX_reserved_370", "" } },
	{ 0x371, { "WM_AFX_reserved_371", "" } },
	{ 0x372, { "WM_AFX_reserved_372", "" } },
	{ 0x373, { "WM_AFX_reserved_373", "" } },
	{ 0x374, { "WM_AFX_reserved_374", "" } },
	{ 0x375, { "WM_AFX_reserved_375", "" } },
	{ 0x376, { "WM_AFX_reserved_376", "" } },
	{ 0x377, { "WM_AFX_reserved_377", "" } },
	{ 0x378, { "WM_AFX_reserved_378", "" } },
	{ 0x379, { "WM_AFX_reserved_379", "" } },
	{ 0x37a, { "WM_AFX_reserved_37a", "" } },
	{ 0x37b, { "WM_AFX_reserved_37b", "" } },
	{ 0x37c, { "WM_AFX_reserved_37c", "" } },
	{ 0x37d, { "WM_AFX_reserved_37d", "" } },
	{ 0x37e, { "WM_AFX_reserved_37e", "" } },
	{ 0x37f, { "WM_AFXLAST", "" } },
	{ 0x380, { "WM_PENWINFIRST", "" } },
	{ 0x381, { "WM_PENWIN_reserved_381", "" } },
	{ 0x382, { "WM_PENWIN_reserved_382", "" } },
	{ 0x383, { "WM_PENWIN_reserved_383", "" } },
	{ 0x384, { "WM_PENWIN_reserved_384", "" } },
	{ 0x385, { "WM_PENWIN_reserved_385", "" } },
	{ 0x386, { "WM_PENWIN_reserved_386", "" } },
	{ 0x387, { "WM_PENWIN_reserved_387", "" } },
	{ 0x388, { "WM_PENWIN_reserved_388", "" } },
	{ 0x389, { "WM_PENWIN_reserved_389", "" } },
	{ 0x38a, { "WM_PENWIN_reserved_38a", "" } },
	{ 0x38b, { "WM_PENWIN_reserved_38b", "" } },
	{ 0x38c, { "WM_PENWIN_reserved_38c", "" } },
	{ 0x38d, { "WM_PENWIN_reserved_38d", "" } },
	{ 0x38e, { "WM_PENWIN_reserved_38e", "" } },
	{ 0x38f, { "WM_PENWINLAST", "" } },
	{ 0x390, { "WM_COALESCE_FIRST", "" } },
	{ 0x391, { "WM_COALESCE__reserved_391", "" } },
	{ 0x392, { "WM_COALESCE__reserved_392", "" } },
	{ 0x393, { "WM_COALESCE__reserved_393", "" } },
	{ 0x394, { "WM_COALESCE__reserved_394", "" } },
	{ 0x395, { "WM_COALESCE__reserved_395", "" } },
	{ 0x396, { "WM_COALESCE__reserved_396", "" } },
	{ 0x397, { "WM_COALESCE__reserved_397", "" } },
	{ 0x398, { "WM_COALESCE__reserved_398", "" } },
	{ 0x399, { "WM_COALESCE__reserved_399", "" } },
	{ 0x39a, { "WM_COALESCE__reserved_39a", "" } },
	{ 0x39b, { "WM_COALESCE__reserved_39b", "" } },
	{ 0x39c, { "WM_COALESCE__reserved_39c", "" } },
	{ 0x39d, { "WM_COALESCE__reserved_39d", "" } },
	{ 0x39e, { "WM_COALESCE__reserved_39e", "" } },
	{ 0x39f, { "WM_COALESCE_LAST", "" } },
	{ 0x3a0, { "WM_MM_RESERVED_FIRST", "" } },
	{ 0x3a1, { "WM_MM_RESERVED__reserved_3a1", "" } },
	{ 0x3a2, { "WM_MM_RESERVED__reserved_3a2", "" } },
	{ 0x3a3, { "WM_MM_RESERVED__reserved_3a3", "" } },
	{ 0x3a4, { "WM_MM_RESERVED__reserved_3a4", "" } },
	{ 0x3a5, { "WM_MM_RESERVED__reserved_3a5", "" } },
	{ 0x3a6, { "WM_MM_RESERVED__reserved_3a6", "" } },
	{ 0x3a7, { "WM_MM_RESERVED__reserved_3a7", "" } },
	{ 0x3a8, { "WM_MM_RESERVED__reserved_3a8", "" } },
	{ 0x3a9, { "WM_MM_RESERVED__reserved_3a9", "" } },
	{ 0x3aa, { "WM_MM_RESERVED__reserved_3aa", "" } },
	{ 0x3ab, { "WM_MM_RESERVED__reserved_3ab", "" } },
	{ 0x3ac, { "WM_MM_RESERVED__reserved_3ac", "" } },
	{ 0x3ad, { "WM_MM_RESERVED__reserved_3ad", "" } },
	{ 0x3ae, { "WM_MM_RESERVED__reserved_3ae", "" } },
	{ 0x3af, { "WM_MM_RESERVED__reserved_3af", "" } },
	{ 0x3b0, { "WM_MM_RESERVED__reserved_3b0", "" } },
	{ 0x3b1, { "WM_MM_RESERVED__reserved_3b1", "" } },
	{ 0x3b2, { "WM_MM_RESERVED__reserved_3b2", "" } },
	{ 0x3b3, { "WM_MM_RESERVED__reserved_3b3", "" } },
	{ 0x3b4, { "WM_MM_RESERVED__reserved_3b4", "" } },
	{ 0x3b5, { "WM_MM_RESERVED__reserved_3b5", "" } },
	{ 0x3b6, { "WM_MM_RESERVED__reserved_3b6", "" } },
	{ 0x3b7, { "WM_MM_RESERVED__reserved_3b7", "" } },
	{ 0x3b8, { "WM_MM_RESERVED__reserved_3b8", "" } },
	{ 0x3b9, { "WM_MM_RESERVED__reserved_3b9", "" } },
	{ 0x3ba, { "WM_MM_RESERVED__reserved_3ba", "" } },
	{ 0x3bb, { "WM_MM_RESERVED__reserved_3bb", "" } },
	{ 0x3bc, { "WM_MM_RESERVED__reserved_3bc", "" } },
	{ 0x3bd, { "WM_MM_RESERVED__reserved_3bd", "" } },
	{ 0x3be, { "WM_MM_RESERVED__reserved_3be", "" } },
	{ 0x3bf, { "WM_MM_RESERVED__reserved_3bf", "" } },
	{ 0x3c0, { "WM_MM_RESERVED__reserved_3c0", "" } },
	{ 0x3c1, { "WM_MM_RESERVED__reserved_3c1", "" } },
	{ 0x3c2, { "WM_MM_RESERVED__reserved_3c2", "" } },
	{ 0x3c3, { "WM_MM_RESERVED__reserved_3c3", "" } },
	{ 0x3c4, { "WM_MM_RESERVED__reserved_3c4", "" } },
	{ 0x3c5, { "WM_MM_RESERVED__reserved_3c5", "" } },
	{ 0x3c6, { "WM_MM_RESERVED__reserved_3c6", "" } },
	{ 0x3c7, { "WM_MM_RESERVED__reserved_3c7", "" } },
	{ 0x3c8, { "WM_MM_RESERVED__reserved_3c8", "" } },
	{ 0x3c9, { "WM_MM_RESERVED__reserved_3c9", "" } },
	{ 0x3ca, { "WM_MM_RESERVED__reserved_3ca", "" } },
	{ 0x3cb, { "WM_MM_RESERVED__reserved_3cb", "" } },
	{ 0x3cc, { "WM_MM_RESERVED__reserved_3cc", "" } },
	{ 0x3cd, { "WM_MM_RESERVED__reserved_3cd", "" } },
	{ 0x3ce, { "WM_MM_RESERVED__reserved_3ce", "" } },
	{ 0x3cf, { "WM_MM_RESERVED__reserved_3cf", "" } },
	{ 0x3d0, { "WM_MM_RESERVED__reserved_3d0", "" } },
	{ 0x3d1, { "WM_MM_RESERVED__reserved_3d1", "" } },
	{ 0x3d2, { "WM_MM_RESERVED__reserved_3d2", "" } },
	{ 0x3d3, { "WM_MM_RESERVED__reserved_3d3", "" } },
	{ 0x3d4, { "WM_MM_RESERVED__reserved_3d4", "" } },
	{ 0x3d5, { "WM_MM_RESERVED__reserved_3d5", "" } },
	{ 0x3d6, { "WM_MM_RESERVED__reserved_3d6", "" } },
	{ 0x3d7, { "WM_MM_RESERVED__reserved_3d7", "" } },
	{ 0x3d8, { "WM_MM_RESERVED__reserved_3d8", "" } },
	{ 0x3d9, { "WM_MM_RESERVED__reserved_3d9", "" } },
	{ 0x3da, { "WM_MM_RESERVED__reserved_3da", "" } },
	{ 0x3db, { "WM_MM_RESERVED__reserved_3db", "" } },
	{ 0x3dc, { "WM_MM_RESERVED__reserved_3dc", "" } },
	{ 0x3dd, { "WM_MM_RESERVED__reserved_3dd", "" } },
	{ 0x3de, { "WM_MM_RESERVED__reserved_3de", "" } },
	{ 0x3df, { "WM_MM_RESERVED_LAST", "" } },
	{ 0x3e0, { "WM_INTERNAL_DDE_FIRST", "" } },
	{ 0x3e1, { "WM_INTERNAL_DDE__reserved_3e1", "" } },
	{ 0x3e2, { "WM_INTERNAL_DDE__reserved_3e2", "" } },
	{ 0x3e3, { "WM_INTERNAL_DDE__reserved_3e3", "" } },
	{ 0x3e4, { "WM_INTERNAL_DDE__reserved_3e4", "" } },
	{ 0x3e5, { "WM_INTERNAL_DDE__reserved_3e5", "" } },
	{ 0x3e6, { "WM_INTERNAL_DDE__reserved_3e6", "" } },
	{ 0x3e7, { "WM_INTERNAL_DDE__reserved_3e7", "" } },
	{ 0x3e8, { "WM_INTERNAL_DDE__reserved_3e8", "" } },
	{ 0x3e9, { "WM_INTERNAL_DDE__reserved_3e9", "" } },
	{ 0x3ea, { "WM_INTERNAL_DDE__reserved_3ea", "" } },
	{ 0x3eb, { "WM_INTERNAL_DDE__reserved_3eb", "" } },
	{ 0x3ec, { "WM_INTERNAL_DDE__reserved_3ec", "" } },
	{ 0x3ed, { "WM_INTERNAL_DDE__reserved_3ed", "" } },
	{ 0x3ee, { "WM_INTERNAL_DDE__reserved_3ee", "" } },
	{ 0x3ef, { "WM_INTERNAL_DDE_LAST", "" } },
	{ 0x3f0, { "WM_CBT_RESERVED_FIRST", "" } },
	{ 0x3f1, { "WM_CBT_RESERVED__reserved_3f1", "" } },
	{ 0x3f2, { "WM_CBT_RESERVED__reserved_3f2", "" } },
	{ 0x3f3, { "WM_CBT_RESERVED__reserved_3f3", "" } },
	{ 0x3f4, { "WM_CBT_RESERVED__reserved_3f4", "" } },
	{ 0x3f5, { "WM_CBT_RESERVED__reserved_3f5", "" } },
	{ 0x3f6, { "WM_CBT_RESERVED__reserved_3f6", "" } },
	{ 0x3f7, { "WM_CBT_RESERVED__reserved_3f7", "" } },
	{ 0x3f8, { "WM_CBT_RESERVED__reserved_3f8", "" } },
	{ 0x3f9, { "WM_CBT_RESERVED__reserved_3f9", "" } },
	{ 0x3fa, { "WM_CBT_RESERVED__reserved_3fa", "" } },
	{ 0x3fb, { "WM_CBT_RESERVED__reserved_3fb", "" } },
	{ 0x3fc, { "WM_CBT_RESERVED__reserved_3fc", "" } },
	{ 0x3fd, { "WM_CBT_RESERVED__reserved_3fd", "" } },
	{ 0x3fe, { "WM_CBT_RESERVED__reserved_3fe", "" } },
	{ 0x3ff, { "WM_CBT_RESERVED_LAST", "" } },
	{ 0x400, { "DDM_SETFMT", "" } },
	{ 0x400, { "DM_GETDEFID", "" } },
	{ 0x400, { "NIN_SELECT", "" } },
	{ 0x400, { "TBM_GETPOS", "" } },
	{ 0x400, { "WM_PSD_PAGESETUPDLG", "" } },
	{ 0x400, { "WM_USER", "" } },
	{ 0x401, { "CBEM_INSERTITEMA", "" } },
	{ 0x401, { "DDM_DRAW", "" } },
	{ 0x401, { "DM_SETDEFID", "" } },
	{ 0x401, { "HKM_SETHOTKEY", "" } },
	{ 0x401, { "PBM_SETRANGE", "" } },
	{ 0x401, { "RB_INSERTBANDA", "" } },
	{ 0x401, { "SB_SETTEXTA", "" } },
	{ 0x401, { "TB_ENABLEBUTTON", "" } },
	{ 0x401, { "TBM_GETRANGEMIN", "" } },
	{ 0x401, { "TTM_ACTIVATE", "" } },
	{ 0x401, { "WM_CHOOSEFONT_GETLOGFONT", "" } },
	{ 0x401, { "WM_PSD_FULLPAGERECT", "" } },
	{ 0x402, { "CBEM_SETIMAGELIST", "" } },
	{ 0x402, { "DDM_CLOSE", "" } },
	{ 0x402, { "DM_REPOSITION", "" } },
	{ 0x402, { "HKM_GETHOTKEY", "" } },
	{ 0x402, { "PBM_SETPOS", "" } },
	{ 0x402, { "RB_DELETEBAND", "" } },
	{ 0x402, { "SB_GETTEXTA", "" } },
	{ 0x402, { "TB_CHECKBUTTON", "" } },
	{ 0x402, { "TBM_GETRANGEMAX", "" } },
	{ 0x402, { "WM_PSD_MINMARGINRECT", "" } },
	{ 0x403, { "CBEM_GETIMAGELIST", "" } },
	{ 0x403, { "DDM_BEGIN", "" } },
	{ 0x403, { "HKM_SETRULES", "" } },
	{ 0x403, { "PBM_DELTAPOS", "" } },
	{ 0x403, { "RB_GETBARINFO", "" } },
	{ 0x403, { "SB_GETTEXTLENGTHA", "" } },
	{ 0x403, { "TBM_GETTIC", "" } },
	{ 0x403, { "TB_PRESSBUTTON", "" } },
	{ 0x403, { "TTM_SETDELAYTIME", "" } },
	{ 0x403, { "WM_PSD_MARGINRECT", "" } },
	{ 0x404, { "CBEM_GETITEMA", "" } },
	{ 0x404, { "DDM_END", "" } },
	{ 0x404, { "PBM_SETSTEP", "" } },
	{ 0x404, { "RB_SETBARINFO", "" } },
	{ 0x404, { "SB_SETPARTS", "" } },
	{ 0x404, { "TB_HIDEBUTTON", "" } },
	{ 0x404, { "TBM_SETTIC", "" } },
	{ 0x404, { "TTM_ADDTOOLA", "" } },
	{ 0x404, { "WM_PSD_GREEKTEXTRECT", "" } },
	{ 0x405, { "CBEM_SETITEMA", "" } },
	{ 0x405, { "PBM_STEPIT", "" } },
	{ 0x405, { "TB_INDETERMINATE", "" } },
	{ 0x405, { "TBM_SETPOS", "" } },
	{ 0x405, { "TTM_DELTOOLA", "" } },
	{ 0x405, { "WM_PSD_ENVSTAMPRECT", "" } },
	{ 0x406, { "CBEM_GETCOMBOCONTROL", "" } },
	{ 0x406, { "PBM_SETRANGE32", "" } },
	{ 0x406, { "RB_SETBANDINFOA", "" } },
	{ 0x406, { "SB_GETPARTS", "" } },
	{ 0x406, { "TB_MARKBUTTON", "" } },
	{ 0x406, { "TBM_SETRANGE", "" } },
	{ 0x406, { "TTM_NEWTOOLRECTA", "" } },
	{ 0x406, { "WM_PSD_YAFULLPAGERECT", "" } },
	{ 0x407, { "CBEM_GETEDITCONTROL", "" } },
	{ 0x407, { "PBM_GETRANGE", "" } },
	{ 0x407, { "RB_SETPARENT", "" } },
	{ 0x407, { "SB_GETBORDERS", "" } },
	{ 0x407, { "TBM_SETRANGEMIN", "" } },
	{ 0x407, { "TTM_RELAYEVENT", "" } },
	{ 0x408, { "CBEM_SETEXSTYLE", "" } },
	{ 0x408, { "PBM_GETPOS", "" } },
	{ 0x408, { "RB_HITTEST", "" } },
	{ 0x408, { "SB_SETMINHEIGHT", "" } },
	{ 0x408, { "TBM_SETRANGEMAX", "" } },
	{ 0x408, { "TTM_GETTOOLINFOA", "" } },
	{ 0x409, { "CBEM_GETEXSTYLE", "" } },
	{ 0x409, { "CBEM_GETEXTENDEDSTYLE", "" } },
	{ 0x409, { "PBM_SETBARCOLOR", "" } },
	{ 0x409, { "RB_GETRECT", "" } },
	{ 0x409, { "SB_SIMPLE", "" } },
	{ 0x409, { "TB_ISBUTTONENABLED", "" } },
	{ 0x409, { "TBM_CLEARTICS", "" } },
	{ 0x409, { "TTM_SETTOOLINFOA", "" } },
	{ 0x040a, { "CBEM_HASEDITCHANGED", "" } },
	{ 0x040a, { "RB_INSERTBANDW", "" } },
	{ 0x040a, { "SB_GETRECT", "" } },
	{ 0x040a, { "TB_ISBUTTONCHECKED", "" } },
	{ 0x040a, { "TBM_SETSEL", "" } },
	{ 0x040a, { "TTM_HITTESTA", "" } },
	{ 0x040a, { "WIZ_QUERYNUMPAGES", "" } },
	{ 0x040b, { "CBEM_INSERTITEMW", "" } },
	{ 0x040b, { "RB_SETBANDINFOW", "" } },
	{ 0x040b, { "SB_SETTEXTW", "" } },
	{ 0x040b, { "TB_ISBUTTONPRESSED", "" } },
	{ 0x040b, { "TBM_SETSELSTART", "" } },
	{ 0x040b, { "TTM_GETTEXTA", "" } },
	{ 0x040b, { "WIZ_NEXT", "" } },
	{ 0x040c, { "CBEM_SETITEMW", "" } },
	{ 0x040c, { "RB_GETBANDCOUNT", "" } },
	{ 0x040c, { "SB_GETTEXTLENGTHW", "" } },
	{ 0x040c, { "TB_ISBUTTONHIDDEN", "" } },
	{ 0x040c, { "TBM_SETSELEND", "" } },
	{ 0x040c, { "TTM_UPDATETIPTEXTA", "" } },
	{ 0x040c, { "WIZ_PREV", "" } },
	{ 0x040d, { "CBEM_GETITEMW", "" } },
	{ 0x040d, { "RB_GETROWCOUNT", "" } },
	{ 0x040d, { "SB_GETTEXTW", "" } },
	{ 0x040d, { "TB_ISBUTTONINDETERMINATE", "" } },
	{ 0x040d, { "TTM_GETTOOLCOUNT", "" } },
	{ 0x040e, { "CBEM_SETEXTENDEDSTYLE", "" } },
	{ 0x040e, { "RB_GETROWHEIGHT", "" } },
	{ 0x040e, { "SB_ISSIMPLE", "" } },
	{ 0x040e, { "TB_ISBUTTONHIGHLIGHTED", "" } },
	{ 0x040e, { "TBM_GETPTICS", "" } },
	{ 0x040e, { "TTM_ENUMTOOLSA", "" } },
	{ 0x040f, { "SB_SETICON", "" } },
	{ 0x040f, { "TBM_GETTICPOS", "" } },
	{ 0x040f, { "TTM_GETCURRENTTOOLA", "" } },
	{ 0x410, { "RB_IDTOINDEX", "" } },
	{ 0x410, { "SB_SETTIPTEXTA", "" } },
	{ 0x410, { "TBM_GETNUMTICS", "" } },
	{ 0x410, { "TTM_WINDOWFROMPOINT", "" } },
	{ 0x411, { "RB_GETTOOLTIPS", "" } },
	{ 0x411, { "SB_SETTIPTEXTW", "" } },
	{ 0x411, { "TBM_GETSELSTART", "" } },
	{ 0x411, { "TB_SETSTATE", "" } },
	{ 0x411, { "TTM_TRACKACTIVATE", "" } },
	{ 0x412, { "RB_SETTOOLTIPS", "" } },
	{ 0x412, { "SB_GETTIPTEXTA", "" } },
	{ 0x412, { "TB_GETSTATE", "" } },
	{ 0x412, { "TBM_GETSELEND", "" } },
	{ 0x412, { "TTM_TRACKPOSITION", "" } },
	{ 0x413, { "RB_SETBKCOLOR", "" } },
	{ 0x413, { "SB_GETTIPTEXTW", "" } },
	{ 0x413, { "TB_ADDBITMAP", "" } },
	{ 0x413, { "TBM_CLEARSEL", "" } },
	{ 0x413, { "TTM_SETTIPBKCOLOR", "" } },
	{ 0x414, { "RB_GETBKCOLOR", "" } },
	{ 0x414, { "SB_GETICON", "" } },
	{ 0x414, { "TB_ADDBUTTONSA", "" } },
	{ 0x414, { "TBM_SETTICFREQ", "" } },
	{ 0x414, { "TTM_SETTIPTEXTCOLOR", "" } },
	{ 0x415, { "RB_SETTEXTCOLOR", "" } },
	{ 0x415, { "TB_INSERTBUTTONA", "" } },
	{ 0x415, { "TBM_SETPAGESIZE", "" } },
	{ 0x415, { "TTM_GETDELAYTIME", "" } },
	{ 0x416, { "RB_GETTEXTCOLOR", "" } },
	{ 0x416, { "TB_DELETEBUTTON", "" } },
	{ 0x416, { "TBM_GETPAGESIZE", "" } },
	{ 0x416, { "TTM_GETTIPBKCOLOR", "" } },
	{ 0x417, { "RB_SIZETORECT", "" } },
	{ 0x417, { "TB_GETBUTTON", "" } },
	{ 0x417, { "TBM_SETLINESIZE", "" } },
	{ 0x417, { "TTM_GETTIPTEXTCOLOR", "" } },
	{ 0x418, { "RB_BEGINDRAG", "" } },
	{ 0x418, { "TB_BUTTONCOUNT", "" } },
	{ 0x418, { "TBM_GETLINESIZE", "" } },
	{ 0x418, { "TTM_SETMAXTIPWIDTH", "" } },
	{ 0x419, { "RB_ENDDRAG", "" } },
	{ 0x419, { "TB_COMMANDTOINDEX", "" } },
	{ 0x419, { "TBM_GETTHUMBRECT", "" } },
	{ 0x419, { "TTM_GETMAXTIPWIDTH", "" } },
	{ 0x041a, { "RB_DRAGMOVE", "" } },
	{ 0x041a, { "TBM_GETCHANNELRECT", "" } },
	{ 0x041a, { "TB_SAVERESTOREA", "" } },
	{ 0x041a, { "TTM_SETMARGIN", "" } },
	{ 0x041b, { "RB_GETBARHEIGHT", "" } },
	{ 0x041b, { "TB_CUSTOMIZE", "" } },
	{ 0x041b, { "TBM_SETTHUMBLENGTH", "" } },
	{ 0x041b, { "TTM_GETMARGIN", "" } },
	{ 0x041c, { "RB_GETBANDINFOW", "" } },
	{ 0x041c, { "TB_ADDSTRINGA", "" } },
	{ 0x041c, { "TBM_GETTHUMBLENGTH", "" } },
	{ 0x041c, { "TTM_POP", "" } },
	{ 0x041d, { "RB_GETBANDINFOA", "" } },
	{ 0x041d, { "TB_GETITEMRECT", "" } },
	{ 0x041d, { "TBM_SETTOOLTIPS", "" } },
	{ 0x041d, { "TTM_UPDATE", "" } },
	{ 0x041e, { "RB_MINIMIZEBAND", "" } },
	{ 0x041e, { "TB_BUTTONSTRUCTSIZE", "" } },
	{ 0x041e, { "TBM_GETTOOLTIPS", "" } },
	{ 0x041e, { "TTM_GETBUBBLESIZE", "" } },
	{ 0x041f, { "RB_MAXIMIZEBAND", "" } },
	{ 0x041f, { "TBM_SETTIPSIDE", "" } },
	{ 0x041f, { "TB_SETBUTTONSIZE", "" } },
	{ 0x041f, { "TTM_ADJUSTRECT", "" } },
	{ 0x420, { "TBM_SETBUDDY", "" } },
	{ 0x420, { "TB_SETBITMAPSIZE", "" } },
	{ 0x420, { "TTM_SETTITLEA", "" } },
	{ 0x421, { "MSG_FTS_JUMP_VA", "" } },
	{ 0x421, { "TB_AUTOSIZE", "" } },
	{ 0x421, { "TBM_GETBUDDY", "" } },
	{ 0x421, { "TTM_SETTITLEW", "" } },
	{ 0x422, { "RB_GETBANDBORDERS", "" } },
	{ 0x423, { "MSG_FTS_JUMP_QWORD", "" } },
	{ 0x423, { "RB_SHOWBAND", "" } },
	{ 0x423, { "TB_GETTOOLTIPS", "" } },
	{ 0x424, { "MSG_REINDEX_REQUEST", "" } },
	{ 0x424, { "TB_SETTOOLTIPS", "" } },
	{ 0x425, { "MSG_FTS_WHERE_IS_IT", "" } },
	{ 0x425, { "RB_SETPALETTE", "" } },
	{ 0x425, { "TB_SETPARENT", "" } },
	{ 0x426, { "RB_GETPALETTE", "" } },
	{ 0x427, { "RB_MOVEBAND", "" } },
	{ 0x427, { "TB_SETROWS", "" } },
	{ 0x428, { "TB_GETROWS", "" } },
	{ 0x429, { "TB_GETBITMAPFLAGS", "" } },
	{ 0x042a, { "TB_SETCMDID", "" } },
	{ 0x042b, { "RB_PUSHCHEVRON", "" } },
	{ 0x042b, { "TB_CHANGEBITMAP", "" } },
	{ 0x042c, { "TB_GETBITMAP", "" } },
	{ 0x042d, { "MSG_GET_DEFFONT", "" } },
	{ 0x042d, { "TB_GETBUTTONTEXTA", "" } },
	{ 0x042e, { "TB_REPLACEBITMAP", "" } },
	{ 0x042f, { "TB_SETINDENT", "" } },
	{ 0x430, { "TB_SETIMAGELIST", "" } },
	{ 0x431, { "TB_GETIMAGELIST", "" } },
	{ 0x432, { "TB_LOADIMAGES", "" } },
	{ 0x432, { "EM_CANPASTE", "" } },
	{ 0x432, { "TTM_ADDTOOLW", "" } },
	{ 0x433, { "EM_DISPLAYBAND", "" } },
	{ 0x433, { "TB_GETRECT", "" } },
	{ 0x433, { "TTM_DELTOOLW", "" } },
	{ 0x434, { "EM_EXGETSEL", "" } },
	{ 0x434, { "TB_SETHOTIMAGELIST", "" } },
	{ 0x434, { "TTM_NEWTOOLRECTW", "" } },
	{ 0x435, { "EM_EXLIMITTEXT", "" } },
	{ 0x435, { "TB_GETHOTIMAGELIST", "" } },
	{ 0x435, { "TTM_GETTOOLINFOW", "" } },
	{ 0x436, { "EM_EXLINEFROMCHAR", "" } },
	{ 0x436, { "TB_SETDISABLEDIMAGELIST", "" } },
	{ 0x436, { "TTM_SETTOOLINFOW", "" } },
	{ 0x437, { "EM_EXSETSEL", "" } },
	{ 0x437, { "TB_GETDISABLEDIMAGELIST", "" } },
	{ 0x437, { "TTM_HITTESTW", "" } },
	{ 0x438, { "EM_FINDTEXT", "" } },
	{ 0x438, { "TB_SETSTYLE", "" } },
	{ 0x438, { "TTM_GETTEXTW", "" } },
	{ 0x439, { "EM_FORMATRANGE", "" } },
	{ 0x439, { "TB_GETSTYLE", "" } },
	{ 0x439, { "TTM_UPDATETIPTEXTW", "" } },
	{ 0x043a, { "EM_GETCHARFORMAT", "" } },
	{ 0x043a, { "TB_GETBUTTONSIZE", "" } },
	{ 0x043a, { "TTM_ENUMTOOLSW", "" } },
	{ 0x043b, { "EM_GETEVENTMASK", "" } },
	{ 0x043b, { "TB_SETBUTTONWIDTH", "" } },
	{ 0x043b, { "TTM_GETCURRENTTOOLW", "" } },
	{ 0x043c, { "EM_GETOLEINTERFACE", "" } },
	{ 0x043c, { "TB_SETMAXTEXTROWS", "" } },
	{ 0x043d, { "EM_GETPARAFORMAT", "" } },
	{ 0x043d, { "TB_GETTEXTROWS", "" } },
	{ 0x043e, { "EM_GETSELTEXT", "" } },
	{ 0x043e, { "TB_GETOBJECT", "" } },
	{ 0x043f, { "EM_HIDESELECTION", "" } },
	{ 0x043f, { "TB_GETBUTTONINFOW", "" } },
	{ 0x440, { "EM_PASTESPECIAL", "" } },
	{ 0x440, { "TB_SETBUTTONINFOW", "" } },
	{ 0x441, { "EM_REQUESTRESIZE", "" } },
	{ 0x441, { "TB_GETBUTTONINFOA", "" } },
	{ 0x442, { "EM_SELECTIONTYPE", "" } },
	{ 0x442, { "TB_SETBUTTONINFOA", "" } },
	{ 0x443, { "EM_SETBKGNDCOLOR", "" } },
	{ 0x443, { "TB_INSERTBUTTONW", "" } },
	{ 0x444, { "EM_SETCHARFORMAT", "" } },
	{ 0x444, { "TB_ADDBUTTONSW", "" } },
	{ 0x445, { "EM_SETEVENTMASK", "" } },
	{ 0x445, { "TB_HITTEST", "" } },
	{ 0x446, { "EM_SETOLECALLBACK", "" } },
	{ 0x446, { "TB_SETDRAWTEXTFLAGS", "" } },
	{ 0x447, { "EM_SETPARAFORMAT", "" } },
	{ 0x447, { "TB_GETHOTITEM", "" } },
	{ 0x448, { "EM_SETTARGETDEVICE", "" } },
	{ 0x448, { "TB_SETHOTITEM", "" } },
	{ 0x449, { "EM_STREAMIN", "" } },
	{ 0x449, { "TB_SETANCHORHIGHLIGHT", "" } },
	{ 0x044a, { "EM_STREAMOUT", "" } },
	{ 0x044a, { "TB_GETANCHORHIGHLIGHT", "" } },
	{ 0x044b, { "EM_GETTEXTRANGE", "" } },
	{ 0x044b, { "TB_GETBUTTONTEXTW", "" } },
	{ 0x044c, { "EM_FINDWORDBREAK", "" } },
	{ 0x044c, { "TB_SAVERESTOREW", "" } },
	{ 0x044d, { "EM_SETOPTIONS", "" } },
	{ 0x044d, { "TB_ADDSTRINGW", "" } },
	{ 0x044e, { "EM_GETOPTIONS", "" } },
	{ 0x044e, { "TB_MAPACCELERATORA", "" } },
	{ 0x044f, { "EM_FINDTEXTEX", "" } },
	{ 0x044f, { "TB_GETINSERTMARK", "" } },
	{ 0x450, { "EM_GETWORDBREAKPROCEX", "" } },
	{ 0x450, { "TB_SETINSERTMARK", "" } },
	{ 0x451, { "EM_SETWORDBREAKPROCEX", "" } },
	{ 0x451, { "TB_INSERTMARKHITTEST", "" } },
	{ 0x452, { "EM_SETUNDOLIMIT", "" } },
	{ 0x452, { "TB_MOVEBUTTON", "" } },
	{ 0x453, { "TB_GETMAXSIZE", "" } },
	{ 0x454, { "EM_REDO", "" } },
	{ 0x454, { "TB_SETEXTENDEDSTYLE", "" } },
	{ 0x455, { "EM_CANREDO", "" } },
	{ 0x455, { "TB_GETEXTENDEDSTYLE", "" } },
	{ 0x456, { "EM_GETUNDONAME", "" } },
	{ 0x456, { "TB_GETPADDING", "" } },
	{ 0x457, { "EM_GETREDONAME", "" } },
	{ 0x457, { "TB_SETPADDING", "" } },
	{ 0x458, { "EM_STOPGROUPTYPING", "" } },
	{ 0x458, { "TB_SETINSERTMARKCOLOR", "" } },
	{ 0x459, { "EM_SETTEXTMODE", "" } },
	{ 0x459, { "TB_GETINSERTMARKCOLOR", "" } },
	{ 0x045a, { "EM_GETTEXTMODE", "" } },
	{ 0x045a, { "TB_MAPACCELERATORW", "" } },
	{ 0x045b, { "EM_AUTOURLDETECT", "" } },
	{ 0x045b, { "TB_GETSTRINGW", "" } },
	{ 0x045c, { "EM_GETAUTOURLDETECT", "" } },
	{ 0x045c, { "TB_GETSTRINGA", "" } },
	{ 0x045d, { "EM_SETPALETTE", "" } },
	{ 0x045e, { "EM_GETTEXTEX", "" } },
	{ 0x045f, { "EM_GETTEXTLENGTHEX", "" } },
	{ 0x460, { "EM_SHOWSCROLLBAR", "" } },
	{ 0x461, { "EM_SETTEXTEX", "" } },
	{ 0x463, { "TAPI_REPLY", "" } },
	{ 0x464, { "ACM_OPENA", "" } },
	{ 0x464, { "BFFM_SETSTATUSTEXTA", "" } },
	{ 0x464, { "CDM_FIRST", "" } },
	{ 0x464, { "CDM_GETSPEC", "" } },
	{ 0x464, { "EM_SETPUNCTUATION", "" } },
	{ 0x464, { "IPM_CLEARADDRESS", "" } },
	{ 0x464, { "WM_CAP_UNICODE_START", "" } },
	{ 0x465, { "ACM_PLAY", "" } },
	{ 0x465, { "BFFM_ENABLEOK", "" } },
	{ 0x465, { "CDM_GETFILEPATH", "" } },
	{ 0x465, { "EM_GETPUNCTUATION", "" } },
	{ 0x465, { "IPM_SETADDRESS", "" } },
	{ 0x465, { "PSM_SETCURSEL", "" } },
	{ 0x465, { "UDM_SETRANGE", "" } },
	{ 0x465, { "WM_CHOOSEFONT_SETLOGFONT", "" } },
	{ 0x466, { "ACM_STOP", "" } },
	{ 0x466, { "BFFM_SETSELECTIONA", "" } },
	{ 0x466, { "CDM_GETFOLDERPATH", "" } },
	{ 0x466, { "EM_SETWORDWRAPMODE", "" } },
	{ 0x466, { "IPM_GETADDRESS", "" } },
	{ 0x466, { "PSM_REMOVEPAGE", "" } },
	{ 0x466, { "UDM_GETRANGE", "" } },
	{ 0x466, { "WM_CAP_SET_CALLBACK_ERRORW", "" } },
	{ 0x466, { "WM_CHOOSEFONT_SETFLAGS", "" } },
	{ 0x467, { "ACM_OPENW", "" } },
	{ 0x467, { "BFFM_SETSELECTIONW", "" } },
	{ 0x467, { "CDM_GETFOLDERIDLIST", "" } },
	{ 0x467, { "EM_GETWORDWRAPMODE", "" } },
	{ 0x467, { "IPM_SETRANGE", "" } },
	{ 0x467, { "PSM_ADDPAGE", "" } },
	{ 0x467, { "UDM_SETPOS", "" } },
	{ 0x467, { "WM_CAP_SET_CALLBACK_STATUSW", "" } },
	{ 0x468, { "BFFM_SETSTATUSTEXTW", "" } },
	{ 0x468, { "CDM_SETCONTROLTEXT", "" } },
	{ 0x468, { "EM_SETIMECOLOR", "" } },
	{ 0x468, { "IPM_SETFOCUS", "" } },
	{ 0x468, { "PSM_CHANGED", "" } },
	{ 0x468, { "UDM_GETPOS", "" } },
	{ 0x469, { "CDM_HIDECONTROL", "" } },
	{ 0x469, { "EM_GETIMECOLOR", "" } },
	{ 0x469, { "IPM_ISBLANK", "" } },
	{ 0x469, { "PSM_RESTARTWINDOWS", "" } },
	{ 0x469, { "UDM_SETBUDDY", "" } },
	{ 0x046a, { "CDM_SETDEFEXT", "" } },
	{ 0x046a, { "EM_SETIMEOPTIONS", "" } },
	{ 0x046a, { "PSM_REBOOTSYSTEM", "" } },
	{ 0x046a, { "UDM_GETBUDDY", "" } },
	{ 0x046b, { "EM_GETIMEOPTIONS", "" } },
	{ 0x046b, { "PSM_CANCELTOCLOSE", "" } },
	{ 0x046b, { "UDM_SETACCEL", "" } },
	{ 0x046c, { "EM_CONVPOSITION", "" } },
	{ 0x046c, { "EM_CONVPOSITION", "" } },
	{ 0x046c, { "PSM_QUERYSIBLINGS", "" } },
	{ 0x046c, { "UDM_GETACCEL", "" } },
	{ 0x046d, { "MCIWNDM_GETZOOM", "" } },
	{ 0x046d, { "PSM_UNCHANGED", "" } },
	{ 0x046d, { "UDM_SETBASE", "" } },
	{ 0x046e, { "PSM_APPLY", "" } },
	{ 0x046e, { "UDM_GETBASE", "" } },
	{ 0x046f, { "PSM_SETTITLEA", "" } },
	{ 0x046f, { "UDM_SETRANGE32", "" } },
	{ 0x470, { "PSM_SETWIZBUTTONS", "" } },
	{ 0x470, { "UDM_GETRANGE32", "" } },
	{ 0x470, { "WM_CAP_DRIVER_GET_NAMEW", "" } },
	{ 0x471, { "PSM_PRESSBUTTON", "" } },
	{ 0x471, { "UDM_SETPOS32", "" } },
	{ 0x471, { "WM_CAP_DRIVER_GET_VERSIONW", "" } },
	{ 0x472, { "PSM_SETCURSELID", "" } },
	{ 0x472, { "UDM_GETPOS32", "" } },
	{ 0x473, { "PSM_SETFINISHTEXTA", "" } },
	{ 0x474, { "PSM_GETTABCONTROL", "" } },
	{ 0x475, { "PSM_ISDIALOGMESSAGE", "" } },
	{ 0x476, { "MCIWNDM_REALIZE", "" } },
	{ 0x476, { "PSM_GETCURRENTPAGEHWND", "" } },
	{ 0x477, { "MCIWNDM_SETTIMEFORMATA", "" } },
	{ 0x477, { "PSM_INSERTPAGE", "" } },
	{ 0x478, { "EM_SETLANGOPTIONS", "" } },
	{ 0x478, { "MCIWNDM_GETTIMEFORMATA", "" } },
	{ 0x478, { "PSM_SETTITLEW", "" } },
	{ 0x478, { "WM_CAP_FILE_SET_CAPTURE_FILEW", "" } },
	{ 0x479, { "EM_GETLANGOPTIONS", "" } },
	{ 0x479, { "MCIWNDM_VALIDATEMEDIA", "" } },
	{ 0x479, { "PSM_SETFINISHTEXTW", "" } },
	{ 0x479, { "WM_CAP_FILE_GET_CAPTURE_FILEW", "" } },
	{ 0x047a, { "EM_GETIMECOMPMODE", "" } },
	{ 0x047b, { "EM_FINDTEXTW", "" } },
	{ 0x047b, { "MCIWNDM_PLAYTO", "" } },
	{ 0x047b, { "WM_CAP_FILE_SAVEASW", "" } },
	{ 0x047c, { "EM_FINDTEXTEXW", "" } },
	{ 0x047c, { "MCIWNDM_GETFILENAMEA", "" } },
	{ 0x047d, { "EM_RECONVERSION", "" } },
	{ 0x047d, { "MCIWNDM_GETDEVICEA", "" } },
	{ 0x047d, { "PSM_SETHEADERTITLEA", "" } },
	{ 0x047d, { "WM_CAP_FILE_SAVEDIBW", "" } },
	{ 0x047e, { "EM_SETIMEMODEBIAS", "" } },
	{ 0x047e, { "MCIWNDM_GETPALETTE", "" } },
	{ 0x047e, { "PSM_SETHEADERTITLEW", "" } },
	{ 0x047f, { "EM_GETIMEMODEBIAS", "" } },
	{ 0x047f, { "MCIWNDM_SETPALETTE", "" } },
	{ 0x047f, { "PSM_SETHEADERSUBTITLEA", "" } },
	{ 0x480, { "MCIWNDM_GETERRORA", "" } },
	{ 0x480, { "PSM_SETHEADERSUBTITLEW", "" } },
	{ 0x481, { "PSM_HWNDTOINDEX", "" } },
	{ 0x482, { "PSM_INDEXTOHWND", "" } },
	{ 0x483, { "MCIWNDM_SETINACTIVETIMER", "" } },
	{ 0x483, { "PSM_PAGETOINDEX", "" } },
	{ 0x484, { "PSM_INDEXTOPAGE", "" } },
	{ 0x485, { "DL_BEGINDRAG", "" } },
	{ 0x485, { "MCIWNDM_GETINACTIVETIMER", "" } },
	{ 0x485, { "PSM_IDTOINDEX", "" } },
	{ 0x486, { "DL_DRAGGING", "" } },
	{ 0x486, { "PSM_INDEXTOID", "" } },
	{ 0x487, { "DL_DROPPED", "" } },
	{ 0x487, { "PSM_GETRESULT", "" } },
	{ 0x488, { "DL_CANCELDRAG", "" } },
	{ 0x488, { "PSM_RECALCPAGESIZES", "" } },
	{ 0x048c, { "MCIWNDM_GET_SOURCE", "" } },
	{ 0x048d, { "MCIWNDM_PUT_SOURCE", "" } },
	{ 0x048e, { "MCIWNDM_GET_DEST", "" } },
	{ 0x048f, { "MCIWNDM_PUT_DEST", "" } },
	{ 0x490, { "MCIWNDM_CAN_PLAY", "" } },
	{ 0x491, { "MCIWNDM_CAN_WINDOW", "" } },
	{ 0x492, { "MCIWNDM_CAN_RECORD", "" } },
	{ 0x493, { "MCIWNDM_CAN_SAVE", "" } },
	{ 0x494, { "MCIWNDM_CAN_EJECT", "" } },
	{ 0x495, { "MCIWNDM_CAN_CONFIG", "" } },
	{ 0x496, { "IE_GETINK", "" } },
	{ 0x496, { "IE_MSGFIRST", "" } },
	{ 0x496, { "MCIWNDM_PALETTEKICK", "" } },
	{ 0x497, { "IE_SETINK", "" } },
	{ 0x498, { "IE_GETPENTIP", "" } },
	{ 0x499, { "IE_SETPENTIP", "" } },
	{ 0x049a, { "IE_GETERASERTIP", "" } },
	{ 0x049b, { "IE_SETERASERTIP", "" } },
	{ 0x049c, { "IE_GETBKGND", "" } },
	{ 0x049d, { "IE_SETBKGND", "" } },
	{ 0x049e, { "IE_GETGRIDORIGIN", "" } },
	{ 0x049f, { "IE_SETGRIDORIGIN", "" } },
	{ 0x04a0, { "IE_GETGRIDPEN", "" } },
	{ 0x04a1, { "IE_SETGRIDPEN", "" } },
	{ 0x04a2, { "IE_GETGRIDSIZE", "" } },
	{ 0x04a3, { "IE_SETGRIDSIZE", "" } },
	{ 0x04a4, { "IE_GETMODE", "" } },
	{ 0x04a5, { "IE_SETMODE", "" } },
	{ 0x04a6, { "IE_GETINKRECT", "" } },
	{ 0x04a6, { "WM_CAP_SET_MCI_DEVICEW", "" } },
	{ 0x04a7, { "WM_CAP_GET_MCI_DEVICEW", "" } },
	{ 0x04b4, { "WM_CAP_PAL_OPENW", "" } },
	{ 0x04b5, { "WM_CAP_PAL_SAVEW", "" } },
	{ 0x04b8, { "IE_GETAPPDATA", "" } },
	{ 0x04b9, { "IE_SETAPPDATA", "" } },
	{ 0x04ba, { "IE_GETDRAWOPTS", "" } },
	{ 0x04bb, { "IE_SETDRAWOPTS", "" } },
	{ 0x04bc, { "IE_GETFORMAT", "" } },
	{ 0x04bd, { "IE_SETFORMAT", "" } },
	{ 0x04be, { "IE_GETINKINPUT", "" } },
	{ 0x04bf, { "IE_SETINKINPUT", "" } },
	{ 0x04c0, { "IE_GETNOTIFY", "" } },
	{ 0x04c1, { "IE_SETNOTIFY", "" } },
	{ 0x04c2, { "IE_GETRECOG", "" } },
	{ 0x04c3, { "IE_SETRECOG", "" } },
	{ 0x04c4, { "IE_GETSECURITY", "" } },
	{ 0x04c5, { "IE_SETSECURITY", "" } },
	{ 0x04c6, { "IE_GETSEL", "" } },
	{ 0x04c7, { "IE_SETSEL", "" } },
	{ 0x04c8, { "CDM_LAST", "" } },
	{ 0x04c8, { "EM_SETBIDIOPTIONS", "" } },
	{ 0x04c8, { "IE_DOCOMMAND", "" } },
	{ 0x04c8, { "MCIWNDM_NOTIFYMODE", "" } },
	{ 0x04c9, { "EM_GETBIDIOPTIONS", "" } },
	{ 0x04c9, { "IE_GETCOMMAND", "" } },
	{ 0x04ca, { "EM_SETTYPOGRAPHYOPTIONS", "" } },
	{ 0x04ca, { "IE_GETCOUNT", "" } },
	{ 0x04cb, { "EM_GETTYPOGRAPHYOPTIONS", "" } },
	{ 0x04cb, { "IE_GETGESTURE", "" } },
	{ 0x04cb, { "MCIWNDM_NOTIFYMEDIA", "" } },
	{ 0x04cc, { "EM_SETEDITSTYLE", "" } },
	{ 0x04cc, { "IE_GETMENU", "" } },
	{ 0x04cd, { "EM_GETEDITSTYLE", "" } },
	{ 0x04cd, { "IE_GETPAINTDC", "" } },
	{ 0x04cd, { "MCIWNDM_NOTIFYERROR", "" } },
	{ 0x04ce, { "IE_GETPDEVENT", "" } },
	{ 0x04cf, { "IE_GETSELCOUNT", "" } },
	{ 0x04d0, { "IE_GETSELITEMS", "" } },
	{ 0x04d1, { "IE_GETSTYLE", "" } },
	{ 0x04db, { "MCIWNDM_SETTIMEFORMATW", "" } },
	{ 0x04dc, { "EM_OUTLINE", "" } },
	{ 0x04dc, { "MCIWNDM_GETTIMEFORMATW", "" } },
	{ 0x04dd, { "EM_GETSCROLLPOS", "" } },
	{ 0x04de, { "EM_SETSCROLLPOS", "" } },
	{ 0x04de, { "EM_SETSCROLLPOS", "" } },
	{ 0x04df, { "EM_SETFONTSIZE", "" } },
	{ 0x04e0, { "EM_GETZOOM", "" } },
	{ 0x04e0, { "MCIWNDM_GETFILENAMEW", "" } },
	{ 0x04e1, { "EM_SETZOOM", "" } },
	{ 0x04e1, { "MCIWNDM_GETDEVICEW", "" } },
	{ 0x04e2, { "EM_GETVIEWKIND", "" } },
	{ 0x04e3, { "EM_SETVIEWKIND", "" } },
	{ 0x04e4, { "EM_GETPAGE", "" } },
	{ 0x04e4, { "MCIWNDM_GETERRORW", "" } },
	{ 0x04e5, { "EM_SETPAGE", "" } },
	{ 0x04e6, { "EM_GETHYPHENATEINFO", "" } },
	{ 0x04e7, { "EM_SETHYPHENATEINFO", "" } },
	{ 0x04eb, { "EM_GETPAGEROTATE", "" } },
	{ 0x04ec, { "EM_SETPAGEROTATE", "" } },
	{ 0x04ed, { "EM_GETCTFMODEBIAS", "" } },
	{ 0x04ee, { "EM_SETCTFMODEBIAS", "" } },
	{ 0x04f0, { "EM_GETCTFOPENSTATUS", "" } },
	{ 0x04f1, { "EM_SETCTFOPENSTATUS", "" } },
	{ 0x04f2, { "EM_GETIMECOMPTEXT", "" } },
	{ 0x04f3, { "EM_ISIME", "" } },
	{ 0x04f4, { "EM_GETIMEPROPERTY", "" } },
	{ 0x050d, { "EM_GETQUERYRTFOBJ", "" } },
	{ 0x050e, { "EM_SETQUERYRTFOBJ", "" } },
	{ 0x600, { "FM_GETFOCUS", "" } },
	{ 0x601, { "FM_GETDRIVEINFOA", "" } },
	{ 0x602, { "FM_GETSELCOUNT", "" } },
	{ 0x603, { "FM_GETSELCOUNTLFN", "" } },
	{ 0x604, { "FM_GETFILESELA", "" } },
	{ 0x605, { "FM_GETFILESELLFNA", "" } },
	{ 0x606, { "FM_REFRESH_WINDOWS", "" } },
	{ 0x607, { "FM_RELOAD_EXTENSIONS", "" } },
	{ 0x611, { "FM_GETDRIVEINFOW", "" } },
	{ 0x614, { "FM_GETFILESELW", "" } },
	{ 0x615, { "FM_GETFILESELLFNW", "" } },
	{ 0x659, { "WLX_WM_SAS", "" } },
	{ 0x07e8, { "SM_GETSELCOUNT", "" } },
	{ 0x07e8, { "UM_GETSELCOUNT", "" } },
	{ 0x07e8, { "WM_CPL_LAUNCH", "" } },
	{ 0x07e9, { "SM_GETSERVERSELA", "" } },
	{ 0x07e9, { "UM_GETUSERSELA", "" } },
	{ 0x07e9, { "WM_CPL_LAUNCHED", "" } },
	{ 0x07ea, { "SM_GETSERVERSELW", "" } },
	{ 0x07ea, { "UM_GETUSERSELW", "" } },
	{ 0x07eb, { "SM_GETCURFOCUSA", "" } },
	{ 0x07eb, { "UM_GETGROUPSELA", "" } },
	{ 0x07ec, { "SM_GETCURFOCUSW", "" } },
	{ 0x07ec, { "UM_GETGROUPSELW", "" } },
	{ 0x07ed, { "SM_GETOPTIONS", "" } },
	{ 0x07ed, { "UM_GETCURFOCUSA", "" } },
	{ 0x07ee, { "UM_GETCURFOCUSW", "" } },
	{ 0x07ef, { "UM_GETOPTIONS", "" } },
	{ 0x07f0, { "UM_GETOPTIONS2", "" } },
	{ 0x1000, { "LVM_FIRST", "" } },
	{ 0x1000, { "LVM_GETBKCOLOR", "" } },
	{ 0x1001, { "LVM_SETBKCOLOR", "" } },
	{ 0x1002, { "LVM_GETIMAGELIST", "" } },
	{ 0x1003, { "LVM_SETIMAGELIST", "" } },
	{ 0x1004, { "LVM_GETITEMCOUNT", "" } },
	{ 0x1005, { "LVM_GETITEMA", "" } },
	{ 0x1006, { "LVM_SETITEMA", "" } },
	{ 0x1007, { "LVM_INSERTITEMA", "" } },
	{ 0x1008, { "LVM_DELETEITEM", "" } },
	{ 0x1009, { "LVM_DELETEALLITEMS", "" } },
	{ 0x100a, { "LVM_GETCALLBACKMASK", "" } },
	{ 0x100b, { "LVM_SETCALLBACKMASK", "" } },
	{ 0x100c, { "LVM_GETNEXTITEM", "" } },
	{ 0x100d, { "LVM_FINDITEMA", "" } },
	{ 0x100e, { "LVM_GETITEMRECT", "" } },
	{ 0x100f, { "LVM_SETITEMPOSITION", "" } },
	{ 0x1010, { "LVM_GETITEMPOSITION", "" } },
	{ 0x1011, { "LVM_GETSTRINGWIDTHA", "" } },
	{ 0x1012, { "LVM_HITTEST", "" } },
	{ 0x1013, { "LVM_ENSUREVISIBLE", "" } },
	{ 0x1014, { "LVM_SCROLL", "" } },
	{ 0x1015, { "LVM_REDRAWITEMS", "" } },
	{ 0x1016, { "LVM_ARRANGE", "" } },
	{ 0x1017, { "LVM_EDITLABELA", "" } },
	{ 0x1018, { "LVM_GETEDITCONTROL", "" } },
	{ 0x1019, { "LVM_GETCOLUMNA", "" } },
	{ 0x101a, { "LVM_SETCOLUMNA", "" } },
	{ 0x101b, { "LVM_INSERTCOLUMNA", "" } },
	{ 0x101c, { "LVM_DELETECOLUMN", "" } },
	{ 0x101d, { "LVM_GETCOLUMNWIDTH", "" } },
	{ 0x101e, { "LVM_SETCOLUMNWIDTH", "" } },
	{ 0x101f, { "LVM_GETHEADER", "" } },
	{ 0x1021, { "LVM_CREATEDRAGIMAGE", "" } },
	{ 0x1022, { "LVM_GETVIEWRECT", "" } },
	{ 0x1023, { "LVM_GETTEXTCOLOR", "" } },
	{ 0x1024, { "LVM_SETTEXTCOLOR", "" } },
	{ 0x1025, { "LVM_GETTEXTBKCOLOR", "" } },
	{ 0x1026, { "LVM_SETTEXTBKCOLOR", "" } },
	{ 0x1027, { "LVM_GETTOPINDEX", "" } },
	{ 0x1028, { "LVM_GETCOUNTPERPAGE", "" } },
	{ 0x1029, { "LVM_GETORIGIN", "" } },
	{ 0x102a, { "LVM_UPDATE", "" } },
	{ 0x102b, { "LVM_SETITEMSTATE", "" } },
	{ 0x102c, { "LVM_GETITEMSTATE", "" } },
	{ 0x102d, { "LVM_GETITEMTEXTA", "" } },
	{ 0x102e, { "LVM_SETITEMTEXTA", "" } },
	{ 0x102f, { "LVM_SETITEMCOUNT", "" } },
	{ 0x1030, { "LVM_SORTITEMS", "" } },
	{ 0x1031, { "LVM_SETITEMPOSITION32", "" } },
	{ 0x1032, { "LVM_GETSELECTEDCOUNT", "" } },
	{ 0x1033, { "LVM_GETITEMSPACING", "" } },
	{ 0x1034, { "LVM_GETISEARCHSTRINGA", "" } },
	{ 0x1035, { "LVM_SETICONSPACING", "" } },
	{ 0x1036, { "LVM_SETEXTENDEDLISTVIEWSTYLE", "" } },
	{ 0x1037, { "LVM_GETEXTENDEDLISTVIEWSTYLE", "" } },
	{ 0x1038, { "LVM_GETSUBITEMRECT", "" } },
	{ 0x1039, { "LVM_SUBITEMHITTEST", "" } },
	{ 0x103a, { "LVM_SETCOLUMNORDERARRAY", "" } },
	{ 0x103b, { "LVM_GETCOLUMNORDERARRAY", "" } },
	{ 0x103c, { "LVM_SETHOTITEM", "" } },
	{ 0x103d, { "LVM_GETHOTITEM", "" } },
	{ 0x103e, { "LVM_SETHOTCURSOR", "" } },
	{ 0x103f, { "LVM_GETHOTCURSOR", "" } },
	{ 0x1040, { "LVM_APPROXIMATEVIEWRECT", "" } },
	{ 0x1041, { "LVM_SETWORKAREAS", "" } },
	{ 0x1042, { "LVM_GETSELECTIONMARK", "" } },
	{ 0x1043, { "LVM_SETSELECTIONMARK", "" } },
	{ 0x1044, { "LVM_SETBKIMAGEA", "" } },
	{ 0x1045, { "LVM_GETBKIMAGEA", "" } },
	{ 0x1046, { "LVM_GETWORKAREAS", "" } },
	{ 0x1047, { "LVM_SETHOVERTIME", "" } },
	{ 0x1048, { "LVM_GETHOVERTIME", "" } },
	{ 0x1049, { "LVM_GETNUMBEROFWORKAREAS", "" } },
	{ 0x104a, { "LVM_SETTOOLTIPS", "" } },
	{ 0x104b, { "LVM_GETITEMW", "" } },
	{ 0x104c, { "LVM_SETITEMW", "" } },
	{ 0x104d, { "LVM_INSERTITEMW", "" } },
	{ 0x104e, { "LVM_GETTOOLTIPS", "" } },
	{ 0x1053, { "LVM_FINDITEMW", "" } },
	{ 0x1057, { "LVM_GETSTRINGWIDTHW", "" } },
	{ 0x105f, { "LVM_GETCOLUMNW", "" } },
	{ 0x1060, { "LVM_SETCOLUMNW", "" } },
	{ 0x1061, { "LVM_INSERTCOLUMNW", "" } },
	{ 0x1073, { "LVM_GETITEMTEXTW", "" } },
	{ 0x1074, { "LVM_SETITEMTEXTW", "" } },
	{ 0x1075, { "LVM_GETISEARCHSTRINGW", "" } },
	{ 0x1076, { "LVM_EDITLABELW", "" } },
	{ 0x108b, { "LVM_GETBKIMAGEW", "" } },
	{ 0x108c, { "LVM_SETSELECTEDCOLUMN", "" } },
	{ 0x108d, { "LVM_SETTILEWIDTH", "" } },
	{ 0x108e, { "LVM_SETVIEW", "" } },
	{ 0x108f, { "LVM_GETVIEW", "" } },
	{ 0x1091, { "LVM_INSERTGROUP", "" } },
	{ 0x1093, { "LVM_SETGROUPINFO", "" } },
	{ 0x1095, { "LVM_GETGROUPINFO", "" } },
	{ 0x1096, { "LVM_REMOVEGROUP", "" } },
	{ 0x1097, { "LVM_MOVEGROUP", "" } },
	{ 0x109a, { "LVM_MOVEITEMTOGROUP", "" } },
	{ 0x109b, { "LVM_SETGROUPMETRICS", "" } },
	{ 0x109c, { "LVM_GETGROUPMETRICS", "" } },
	{ 0x109d, { "LVM_ENABLEGROUPVIEW", "" } },
	{ 0x109e, { "LVM_SORTGROUPS", "" } },
	{ 0x109f, { "LVM_INSERTGROUPSORTED", "" } },
	{ 0x10a0, { "LVM_REMOVEALLGROUPS", "" } },
	{ 0x10a1, { "LVM_HASGROUP", "" } },
	{ 0x10a2, { "LVM_SETTILEVIEWINFO", "" } },
	{ 0x10a3, { "LVM_GETTILEVIEWINFO", "" } },
	{ 0x10a4, { "LVM_SETTILEINFO", "" } },
	{ 0x10a5, { "LVM_GETTILEINFO", "" } },
	{ 0x10a6, { "LVM_SETINSERTMARK", "" } },
	{ 0x10a7, { "LVM_GETINSERTMARK", "" } },
	{ 0x10a8, { "LVM_INSERTMARKHITTEST", "" } },
	{ 0x10a9, { "LVM_GETINSERTMARKRECT", "" } },
	{ 0x10aa, { "LVM_SETINSERTMARKCOLOR", "" } },
	{ 0x10ab, { "LVM_GETINSERTMARKCOLOR", "" } },
	{ 0x10ad, { "LVM_SETINFOTIP", "" } },
	{ 0x10ae, { "LVM_GETSELECTEDCOLUMN", "" } },
	{ 0x10af, { "LVM_ISGROUPVIEWENABLED", "" } },
	{ 0x10b0, { "LVM_GETOUTLINECOLOR", "" } },
	{ 0x10b1, { "LVM_SETOUTLINECOLOR", "" } },
	{ 0x10b3, { "LVM_CANCELEDITLABEL", "" } },
	{ 0x10b4, { "LVM_MAPINDEXTOID", "" } },
	{ 0x10b5, { "LVM_MAPIDTOINDEX", "" } },
	{ 0x10b6, { "LVM_ISITEMVISIBLE", "" } },
	{ 0x2000, { "OCM__BASE", "" } },
	{ 0x2005, { "LVM_SETUNICODEFORMAT", "" } },
	{ 0x2006, { "LVM_GETUNICODEFORMAT", "" } },
	{ 0x2019, { "OCM_CTLCOLOR", "" } },
	{ 0x202b, { "OCM_DRAWITEM", "" } },
	{ 0x202c, { "OCM_MEASUREITEM", "" } },
	{ 0x202d, { "OCM_DELETEITEM", "" } },
	{ 0x202e, { "OCM_VKEYTOITEM", "" } },
	{ 0x202f, { "OCM_CHARTOITEM", "" } },
	{ 0x2039, { "OCM_COMPAREITEM", "" } },
	{ 0x204e, { "OCM_NOTIFY", "" } },
	{ 0x2111, { "OCM_COMMAND", "" } },
	{ 0x2114, { "OCM_HSCROLL", "" } },
	{ 0x2115, { "OCM_VSCROLL", "" } },
	{ 0x2132, { "OCM_CTLCOLORMSGBOX", "" } },
	{ 0x2133, { "OCM_CTLCOLOREDIT", "" } },
	{ 0x2134, { "OCM_CTLCOLORLISTBOX", "" } },
	{ 0x2135, { "OCM_CTLCOLORBTN", "" } },
	{ 0x2136, { "OCM_CTLCOLORDLG", "" } },
	{ 0x2137, { "OCM_CTLCOLORSCROLLBAR", "" } },
	{ 0x2138, { "OCM_CTLCOLORSTATIC", "" } },
	{ 0x2210, { "OCM_PARENTNOTIFY", "" } },
	{ 0x8000, { "WM_APP", "" } },
	{ 0xcccd, { "WM_RASDIALEVENT", "" } },
};
