//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Swig {

public class AXIS : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AXIS(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AXIS obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AXIS() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SwigWintabPINVOKE.delete_AXIS(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public int axMin {
    set {
      SwigWintabPINVOKE.AXIS_axMin_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.AXIS_axMin_get(swigCPtr);
      return ret;
    } 
  }

  public int axMax {
    set {
      SwigWintabPINVOKE.AXIS_axMax_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.AXIS_axMax_get(swigCPtr);
      return ret;
    } 
  }

  public uint axUnits {
    set {
      SwigWintabPINVOKE.AXIS_axUnits_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.AXIS_axUnits_get(swigCPtr);
      return ret;
    } 
  }

  public uint axResolution {
    set {
      SwigWintabPINVOKE.AXIS_axResolution_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.AXIS_axResolution_get(swigCPtr);
      return ret;
    } 
  }

  public AXIS() : this(SwigWintabPINVOKE.new_AXIS(), true) {
  }

}

}
namespace Swig {

public class LOGCONTEXTA : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LOGCONTEXTA(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LOGCONTEXTA obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~LOGCONTEXTA() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SwigWintabPINVOKE.delete_LOGCONTEXTA(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public string lcName {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcName_set(swigCPtr, value);
    } 
    get {
      string ret = SwigWintabPINVOKE.LOGCONTEXTA_lcName_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcOptions {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcOptions_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTA_lcOptions_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcStatus {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcStatus_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTA_lcStatus_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcLocks {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcLocks_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTA_lcLocks_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcMsgBase {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcMsgBase_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTA_lcMsgBase_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcDevice {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcDevice_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTA_lcDevice_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcPktRate {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcPktRate_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTA_lcPktRate_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcPktData {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcPktData_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTA_lcPktData_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcPktMode {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcPktMode_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTA_lcPktMode_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcMoveMask {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcMoveMask_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTA_lcMoveMask_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcBtnDnMask {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcBtnDnMask_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTA_lcBtnDnMask_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcBtnUpMask {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcBtnUpMask_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTA_lcBtnUpMask_get(swigCPtr);
      return ret;
    } 
  }

  public int lcInOrgX {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcInOrgX_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTA_lcInOrgX_get(swigCPtr);
      return ret;
    } 
  }

  public int lcInOrgY {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcInOrgY_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTA_lcInOrgY_get(swigCPtr);
      return ret;
    } 
  }

  public int lcInOrgZ {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcInOrgZ_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTA_lcInOrgZ_get(swigCPtr);
      return ret;
    } 
  }

  public int lcInExtX {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcInExtX_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTA_lcInExtX_get(swigCPtr);
      return ret;
    } 
  }

  public int lcInExtY {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcInExtY_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTA_lcInExtY_get(swigCPtr);
      return ret;
    } 
  }

  public int lcInExtZ {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcInExtZ_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTA_lcInExtZ_get(swigCPtr);
      return ret;
    } 
  }

  public int lcOutOrgX {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcOutOrgX_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTA_lcOutOrgX_get(swigCPtr);
      return ret;
    } 
  }

  public int lcOutOrgY {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcOutOrgY_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTA_lcOutOrgY_get(swigCPtr);
      return ret;
    } 
  }

  public int lcOutOrgZ {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcOutOrgZ_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTA_lcOutOrgZ_get(swigCPtr);
      return ret;
    } 
  }

  public int lcOutExtX {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcOutExtX_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTA_lcOutExtX_get(swigCPtr);
      return ret;
    } 
  }

  public int lcOutExtY {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcOutExtY_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTA_lcOutExtY_get(swigCPtr);
      return ret;
    } 
  }

  public int lcOutExtZ {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcOutExtZ_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTA_lcOutExtZ_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcSensX {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcSensX_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTA_lcSensX_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcSensY {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcSensY_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTA_lcSensY_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcSensZ {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcSensZ_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTA_lcSensZ_get(swigCPtr);
      return ret;
    } 
  }

  public int lcSysMode {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcSysMode_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTA_lcSysMode_get(swigCPtr);
      return ret;
    } 
  }

  public int lcSysOrgX {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcSysOrgX_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTA_lcSysOrgX_get(swigCPtr);
      return ret;
    } 
  }

  public int lcSysOrgY {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcSysOrgY_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTA_lcSysOrgY_get(swigCPtr);
      return ret;
    } 
  }

  public int lcSysExtX {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcSysExtX_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTA_lcSysExtX_get(swigCPtr);
      return ret;
    } 
  }

  public int lcSysExtY {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcSysExtY_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTA_lcSysExtY_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcSysSensX {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcSysSensX_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTA_lcSysSensX_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcSysSensY {
    set {
      SwigWintabPINVOKE.LOGCONTEXTA_lcSysSensY_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTA_lcSysSensY_get(swigCPtr);
      return ret;
    } 
  }

  public LOGCONTEXTA() : this(SwigWintabPINVOKE.new_LOGCONTEXTA(), true) {
  }

}

}
namespace Swig {

public class LOGCONTEXTW : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LOGCONTEXTW(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LOGCONTEXTW obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~LOGCONTEXTW() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SwigWintabPINVOKE.delete_LOGCONTEXTW(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_WCHAR lcName {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcName_set(swigCPtr, SWIGTYPE_p_WCHAR.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SwigWintabPINVOKE.LOGCONTEXTW_lcName_get(swigCPtr);
      SWIGTYPE_p_WCHAR ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_WCHAR(cPtr, false);
      return ret;
    } 
  }

  public uint lcOptions {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcOptions_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTW_lcOptions_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcStatus {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcStatus_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTW_lcStatus_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcLocks {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcLocks_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTW_lcLocks_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcMsgBase {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcMsgBase_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTW_lcMsgBase_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcDevice {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcDevice_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTW_lcDevice_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcPktRate {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcPktRate_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTW_lcPktRate_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcPktData {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcPktData_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTW_lcPktData_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcPktMode {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcPktMode_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTW_lcPktMode_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcMoveMask {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcMoveMask_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTW_lcMoveMask_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcBtnDnMask {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcBtnDnMask_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTW_lcBtnDnMask_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcBtnUpMask {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcBtnUpMask_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTW_lcBtnUpMask_get(swigCPtr);
      return ret;
    } 
  }

  public int lcInOrgX {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcInOrgX_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTW_lcInOrgX_get(swigCPtr);
      return ret;
    } 
  }

  public int lcInOrgY {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcInOrgY_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTW_lcInOrgY_get(swigCPtr);
      return ret;
    } 
  }

  public int lcInOrgZ {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcInOrgZ_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTW_lcInOrgZ_get(swigCPtr);
      return ret;
    } 
  }

  public int lcInExtX {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcInExtX_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTW_lcInExtX_get(swigCPtr);
      return ret;
    } 
  }

  public int lcInExtY {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcInExtY_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTW_lcInExtY_get(swigCPtr);
      return ret;
    } 
  }

  public int lcInExtZ {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcInExtZ_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTW_lcInExtZ_get(swigCPtr);
      return ret;
    } 
  }

  public int lcOutOrgX {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcOutOrgX_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTW_lcOutOrgX_get(swigCPtr);
      return ret;
    } 
  }

  public int lcOutOrgY {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcOutOrgY_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTW_lcOutOrgY_get(swigCPtr);
      return ret;
    } 
  }

  public int lcOutOrgZ {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcOutOrgZ_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTW_lcOutOrgZ_get(swigCPtr);
      return ret;
    } 
  }

  public int lcOutExtX {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcOutExtX_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTW_lcOutExtX_get(swigCPtr);
      return ret;
    } 
  }

  public int lcOutExtY {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcOutExtY_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTW_lcOutExtY_get(swigCPtr);
      return ret;
    } 
  }

  public int lcOutExtZ {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcOutExtZ_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTW_lcOutExtZ_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcSensX {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcSensX_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTW_lcSensX_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcSensY {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcSensY_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTW_lcSensY_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcSensZ {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcSensZ_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTW_lcSensZ_get(swigCPtr);
      return ret;
    } 
  }

  public int lcSysMode {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcSysMode_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTW_lcSysMode_get(swigCPtr);
      return ret;
    } 
  }

  public int lcSysOrgX {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcSysOrgX_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTW_lcSysOrgX_get(swigCPtr);
      return ret;
    } 
  }

  public int lcSysOrgY {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcSysOrgY_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTW_lcSysOrgY_get(swigCPtr);
      return ret;
    } 
  }

  public int lcSysExtX {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcSysExtX_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTW_lcSysExtX_get(swigCPtr);
      return ret;
    } 
  }

  public int lcSysExtY {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcSysExtY_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.LOGCONTEXTW_lcSysExtY_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcSysSensX {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcSysSensX_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTW_lcSysSensX_get(swigCPtr);
      return ret;
    } 
  }

  public uint lcSysSensY {
    set {
      SwigWintabPINVOKE.LOGCONTEXTW_lcSysSensY_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.LOGCONTEXTW_lcSysSensY_get(swigCPtr);
      return ret;
    } 
  }

  public LOGCONTEXTW() : this(SwigWintabPINVOKE.new_LOGCONTEXTW(), true) {
  }

}

}
namespace Swig {

public class ORIENTATION : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ORIENTATION(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ORIENTATION obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ORIENTATION() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SwigWintabPINVOKE.delete_ORIENTATION(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public int orAzimuth {
    set {
      SwigWintabPINVOKE.ORIENTATION_orAzimuth_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.ORIENTATION_orAzimuth_get(swigCPtr);
      return ret;
    } 
  }

  public int orAltitude {
    set {
      SwigWintabPINVOKE.ORIENTATION_orAltitude_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.ORIENTATION_orAltitude_get(swigCPtr);
      return ret;
    } 
  }

  public int orTwist {
    set {
      SwigWintabPINVOKE.ORIENTATION_orTwist_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.ORIENTATION_orTwist_get(swigCPtr);
      return ret;
    } 
  }

  public ORIENTATION() : this(SwigWintabPINVOKE.new_ORIENTATION(), true) {
  }

}

}
namespace Swig {

public class ROTATION : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ROTATION(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ROTATION obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ROTATION() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SwigWintabPINVOKE.delete_ROTATION(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public int roPitch {
    set {
      SwigWintabPINVOKE.ROTATION_roPitch_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.ROTATION_roPitch_get(swigCPtr);
      return ret;
    } 
  }

  public int roRoll {
    set {
      SwigWintabPINVOKE.ROTATION_roRoll_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.ROTATION_roRoll_get(swigCPtr);
      return ret;
    } 
  }

  public int roYaw {
    set {
      SwigWintabPINVOKE.ROTATION_roYaw_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.ROTATION_roYaw_get(swigCPtr);
      return ret;
    } 
  }

  public ROTATION() : this(SwigWintabPINVOKE.new_ROTATION(), true) {
  }

}

}
namespace Swig {

public class XBTNMASK : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XBTNMASK(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XBTNMASK obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~XBTNMASK() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SwigWintabPINVOKE.delete_XBTNMASK(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_unsigned_char xBtnDnMask {
    set {
      SwigWintabPINVOKE.XBTNMASK_xBtnDnMask_set(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SwigWintabPINVOKE.XBTNMASK_xBtnDnMask_get(swigCPtr);
      SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_char xBtnUpMask {
    set {
      SwigWintabPINVOKE.XBTNMASK_xBtnUpMask_set(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SwigWintabPINVOKE.XBTNMASK_xBtnUpMask_get(swigCPtr);
      SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
      return ret;
    } 
  }

  public XBTNMASK() : this(SwigWintabPINVOKE.new_XBTNMASK(), true) {
  }

}

}
namespace Swig {

public class TILT : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TILT(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TILT obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~TILT() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SwigWintabPINVOKE.delete_TILT(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public int tiltX {
    set {
      SwigWintabPINVOKE.TILT_tiltX_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.TILT_tiltX_get(swigCPtr);
      return ret;
    } 
  }

  public int tiltY {
    set {
      SwigWintabPINVOKE.TILT_tiltY_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.TILT_tiltY_get(swigCPtr);
      return ret;
    } 
  }

  public TILT() : this(SwigWintabPINVOKE.new_TILT(), true) {
  }

}

}
namespace Swig {

public class EXTENSIONBASE : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EXTENSIONBASE(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EXTENSIONBASE obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~EXTENSIONBASE() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SwigWintabPINVOKE.delete_EXTENSIONBASE(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_HCTX nContext {
    set {
      SwigWintabPINVOKE.EXTENSIONBASE_nContext_set(swigCPtr, SWIGTYPE_p_HCTX.getCPtr(value));
      if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_HCTX ret = new SWIGTYPE_p_HCTX(SwigWintabPINVOKE.EXTENSIONBASE_nContext_get(swigCPtr), true);
      if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint nStatus {
    set {
      SwigWintabPINVOKE.EXTENSIONBASE_nStatus_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.EXTENSIONBASE_nStatus_get(swigCPtr);
      return ret;
    } 
  }

  public uint nTime {
    set {
      SwigWintabPINVOKE.EXTENSIONBASE_nTime_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.EXTENSIONBASE_nTime_get(swigCPtr);
      return ret;
    } 
  }

  public uint nSerialNumber {
    set {
      SwigWintabPINVOKE.EXTENSIONBASE_nSerialNumber_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.EXTENSIONBASE_nSerialNumber_get(swigCPtr);
      return ret;
    } 
  }

  public EXTENSIONBASE() : this(SwigWintabPINVOKE.new_EXTENSIONBASE(), true) {
  }

}

}
namespace Swig {

public class EXPKEYSDATA : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EXPKEYSDATA(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EXPKEYSDATA obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~EXPKEYSDATA() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SwigWintabPINVOKE.delete_EXPKEYSDATA(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public byte nTablet {
    set {
      SwigWintabPINVOKE.EXPKEYSDATA_nTablet_set(swigCPtr, value);
    } 
    get {
      byte ret = SwigWintabPINVOKE.EXPKEYSDATA_nTablet_get(swigCPtr);
      return ret;
    } 
  }

  public byte nControl {
    set {
      SwigWintabPINVOKE.EXPKEYSDATA_nControl_set(swigCPtr, value);
    } 
    get {
      byte ret = SwigWintabPINVOKE.EXPKEYSDATA_nControl_get(swigCPtr);
      return ret;
    } 
  }

  public byte nLocation {
    set {
      SwigWintabPINVOKE.EXPKEYSDATA_nLocation_set(swigCPtr, value);
    } 
    get {
      byte ret = SwigWintabPINVOKE.EXPKEYSDATA_nLocation_get(swigCPtr);
      return ret;
    } 
  }

  public byte nReserved {
    set {
      SwigWintabPINVOKE.EXPKEYSDATA_nReserved_set(swigCPtr, value);
    } 
    get {
      byte ret = SwigWintabPINVOKE.EXPKEYSDATA_nReserved_get(swigCPtr);
      return ret;
    } 
  }

  public uint nState {
    set {
      SwigWintabPINVOKE.EXPKEYSDATA_nState_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.EXPKEYSDATA_nState_get(swigCPtr);
      return ret;
    } 
  }

  public EXPKEYSDATA() : this(SwigWintabPINVOKE.new_EXPKEYSDATA(), true) {
  }

}

}
namespace Swig {

public class SLIDERDATA : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SLIDERDATA(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SLIDERDATA obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SLIDERDATA() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SwigWintabPINVOKE.delete_SLIDERDATA(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public byte nTablet {
    set {
      SwigWintabPINVOKE.SLIDERDATA_nTablet_set(swigCPtr, value);
    } 
    get {
      byte ret = SwigWintabPINVOKE.SLIDERDATA_nTablet_get(swigCPtr);
      return ret;
    } 
  }

  public byte nControl {
    set {
      SwigWintabPINVOKE.SLIDERDATA_nControl_set(swigCPtr, value);
    } 
    get {
      byte ret = SwigWintabPINVOKE.SLIDERDATA_nControl_get(swigCPtr);
      return ret;
    } 
  }

  public byte nMode {
    set {
      SwigWintabPINVOKE.SLIDERDATA_nMode_set(swigCPtr, value);
    } 
    get {
      byte ret = SwigWintabPINVOKE.SLIDERDATA_nMode_get(swigCPtr);
      return ret;
    } 
  }

  public byte nReserved {
    set {
      SwigWintabPINVOKE.SLIDERDATA_nReserved_set(swigCPtr, value);
    } 
    get {
      byte ret = SwigWintabPINVOKE.SLIDERDATA_nReserved_get(swigCPtr);
      return ret;
    } 
  }

  public uint nPosition {
    set {
      SwigWintabPINVOKE.SLIDERDATA_nPosition_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.SLIDERDATA_nPosition_get(swigCPtr);
      return ret;
    } 
  }

  public SLIDERDATA() : this(SwigWintabPINVOKE.new_SLIDERDATA(), true) {
  }

}

}
namespace Swig {

public class EXTPROPERTY : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EXTPROPERTY(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EXTPROPERTY obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~EXTPROPERTY() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SwigWintabPINVOKE.delete_EXTPROPERTY(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public byte version {
    set {
      SwigWintabPINVOKE.EXTPROPERTY_version_set(swigCPtr, value);
    } 
    get {
      byte ret = SwigWintabPINVOKE.EXTPROPERTY_version_get(swigCPtr);
      return ret;
    } 
  }

  public byte tabletIndex {
    set {
      SwigWintabPINVOKE.EXTPROPERTY_tabletIndex_set(swigCPtr, value);
    } 
    get {
      byte ret = SwigWintabPINVOKE.EXTPROPERTY_tabletIndex_get(swigCPtr);
      return ret;
    } 
  }

  public byte controlIndex {
    set {
      SwigWintabPINVOKE.EXTPROPERTY_controlIndex_set(swigCPtr, value);
    } 
    get {
      byte ret = SwigWintabPINVOKE.EXTPROPERTY_controlIndex_get(swigCPtr);
      return ret;
    } 
  }

  public byte functionIndex {
    set {
      SwigWintabPINVOKE.EXTPROPERTY_functionIndex_set(swigCPtr, value);
    } 
    get {
      byte ret = SwigWintabPINVOKE.EXTPROPERTY_functionIndex_get(swigCPtr);
      return ret;
    } 
  }

  public ushort propertyID {
    set {
      SwigWintabPINVOKE.EXTPROPERTY_propertyID_set(swigCPtr, value);
    } 
    get {
      ushort ret = SwigWintabPINVOKE.EXTPROPERTY_propertyID_get(swigCPtr);
      return ret;
    } 
  }

  public ushort reserved {
    set {
      SwigWintabPINVOKE.EXTPROPERTY_reserved_set(swigCPtr, value);
    } 
    get {
      ushort ret = SwigWintabPINVOKE.EXTPROPERTY_reserved_get(swigCPtr);
      return ret;
    } 
  }

  public uint dataSize {
    set {
      SwigWintabPINVOKE.EXTPROPERTY_dataSize_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.EXTPROPERTY_dataSize_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_char data {
    set {
      SwigWintabPINVOKE.EXTPROPERTY_data_set(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SwigWintabPINVOKE.EXTPROPERTY_data_get(swigCPtr);
      SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
      return ret;
    } 
  }

  public EXTPROPERTY() : this(SwigWintabPINVOKE.new_EXTPROPERTY(), true) {
  }

}

}
namespace Swig {

public class PACKET : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PACKET(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PACKET obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PACKET() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SwigWintabPINVOKE.delete_PACKET(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_HCTX pkContext {
    set {
      SwigWintabPINVOKE.PACKET_pkContext_set(swigCPtr, SWIGTYPE_p_HCTX.getCPtr(value));
      if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_HCTX ret = new SWIGTYPE_p_HCTX(SwigWintabPINVOKE.PACKET_pkContext_get(swigCPtr), true);
      if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint pkStatus {
    set {
      SwigWintabPINVOKE.PACKET_pkStatus_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.PACKET_pkStatus_get(swigCPtr);
      return ret;
    } 
  }

  public uint pkTime {
    set {
      SwigWintabPINVOKE.PACKET_pkTime_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.PACKET_pkTime_get(swigCPtr);
      return ret;
    } 
  }

  public uint pkChanged {
    set {
      SwigWintabPINVOKE.PACKET_pkChanged_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.PACKET_pkChanged_get(swigCPtr);
      return ret;
    } 
  }

  public uint pkSerialNumber {
    set {
      SwigWintabPINVOKE.PACKET_pkSerialNumber_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.PACKET_pkSerialNumber_get(swigCPtr);
      return ret;
    } 
  }

  public uint pkCursor {
    set {
      SwigWintabPINVOKE.PACKET_pkCursor_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.PACKET_pkCursor_get(swigCPtr);
      return ret;
    } 
  }

  public uint pkButtons {
    set {
      SwigWintabPINVOKE.PACKET_pkButtons_set(swigCPtr, value);
    } 
    get {
      uint ret = SwigWintabPINVOKE.PACKET_pkButtons_get(swigCPtr);
      return ret;
    } 
  }

  public int pkX {
    set {
      SwigWintabPINVOKE.PACKET_pkX_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.PACKET_pkX_get(swigCPtr);
      return ret;
    } 
  }

  public int pkY {
    set {
      SwigWintabPINVOKE.PACKET_pkY_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.PACKET_pkY_get(swigCPtr);
      return ret;
    } 
  }

  public int pkZ {
    set {
      SwigWintabPINVOKE.PACKET_pkZ_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.PACKET_pkZ_get(swigCPtr);
      return ret;
    } 
  }

  public int pkNormalPressure {
    set {
      SwigWintabPINVOKE.PACKET_pkNormalPressure_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.PACKET_pkNormalPressure_get(swigCPtr);
      return ret;
    } 
  }

  public int pkTangentPressure {
    set {
      SwigWintabPINVOKE.PACKET_pkTangentPressure_set(swigCPtr, value);
    } 
    get {
      int ret = SwigWintabPINVOKE.PACKET_pkTangentPressure_get(swigCPtr);
      return ret;
    } 
  }

  public ORIENTATION pkOrientation {
    set {
      SwigWintabPINVOKE.PACKET_pkOrientation_set(swigCPtr, ORIENTATION.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SwigWintabPINVOKE.PACKET_pkOrientation_get(swigCPtr);
      ORIENTATION ret = (cPtr == global::System.IntPtr.Zero) ? null : new ORIENTATION(cPtr, false);
      return ret;
    } 
  }

  public ROTATION pkRotation {
    set {
      SwigWintabPINVOKE.PACKET_pkRotation_set(swigCPtr, ROTATION.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SwigWintabPINVOKE.PACKET_pkRotation_get(swigCPtr);
      ROTATION ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROTATION(cPtr, false);
      return ret;
    } 
  }

  public PACKET() : this(SwigWintabPINVOKE.new_PACKET(), true) {
  }

}

}
namespace Swig {

public class PACKETEXT : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PACKETEXT(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PACKETEXT obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PACKETEXT() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SwigWintabPINVOKE.delete_PACKETEXT(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public EXTENSIONBASE pkBase {
    set {
      SwigWintabPINVOKE.PACKETEXT_pkBase_set(swigCPtr, EXTENSIONBASE.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SwigWintabPINVOKE.PACKETEXT_pkBase_get(swigCPtr);
      EXTENSIONBASE ret = (cPtr == global::System.IntPtr.Zero) ? null : new EXTENSIONBASE(cPtr, false);
      return ret;
    } 
  }

  public EXPKEYSDATA pkExpKeys {
    set {
      SwigWintabPINVOKE.PACKETEXT_pkExpKeys_set(swigCPtr, EXPKEYSDATA.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SwigWintabPINVOKE.PACKETEXT_pkExpKeys_get(swigCPtr);
      EXPKEYSDATA ret = (cPtr == global::System.IntPtr.Zero) ? null : new EXPKEYSDATA(cPtr, false);
      return ret;
    } 
  }

  public SLIDERDATA pkTouchStrip {
    set {
      SwigWintabPINVOKE.PACKETEXT_pkTouchStrip_set(swigCPtr, SLIDERDATA.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SwigWintabPINVOKE.PACKETEXT_pkTouchStrip_get(swigCPtr);
      SLIDERDATA ret = (cPtr == global::System.IntPtr.Zero) ? null : new SLIDERDATA(cPtr, false);
      return ret;
    } 
  }

  public SLIDERDATA pkTouchRing {
    set {
      SwigWintabPINVOKE.PACKETEXT_pkTouchRing_set(swigCPtr, SLIDERDATA.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SwigWintabPINVOKE.PACKETEXT_pkTouchRing_get(swigCPtr);
      SLIDERDATA ret = (cPtr == global::System.IntPtr.Zero) ? null : new SLIDERDATA(cPtr, false);
      return ret;
    } 
  }

  public PACKETEXT() : this(SwigWintabPINVOKE.new_PACKETEXT(), true) {
  }

}

}
namespace Swig {

class SwigWintabPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="SWIGRegisterExceptionCallbacks_SwigWintab")]
    public static extern void SWIGRegisterExceptionCallbacks_SwigWintab(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_SwigWintab")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_SwigWintab(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_SwigWintab(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_SwigWintab(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;
    private static global::System.Object exceptionsLock = null;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(exceptionsLock) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(exceptionsLock) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }

    static SWIGPendingException() {
      exceptionsLock = new global::System.Object();
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="SWIGRegisterStringCallback_SwigWintab")]
    public static extern void SWIGRegisterStringCallback_SwigWintab(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_SwigWintab(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static SwigWintabPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WT_DEFBASE_get")]
  public static extern int WT_DEFBASE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WT_MAXOFFSET_get")]
  public static extern int WT_MAXOFFSET_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WT_PACKET_get")]
  public static extern int WT_PACKET_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WT_CTXOPEN_get")]
  public static extern int WT_CTXOPEN_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WT_CTXCLOSE_get")]
  public static extern int WT_CTXCLOSE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WT_CTXUPDATE_get")]
  public static extern int WT_CTXUPDATE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WT_CTXOVERLAP_get")]
  public static extern int WT_CTXOVERLAP_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WT_PROXIMITY_get")]
  public static extern int WT_PROXIMITY_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WT_INFOCHANGE_get")]
  public static extern int WT_INFOCHANGE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WT_CSRCHANGE_get")]
  public static extern int WT_CSRCHANGE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WT_PACKETEXT_get")]
  public static extern int WT_PACKETEXT_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WT_MAX_get")]
  public static extern int WT_MAX_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PK_CONTEXT_get")]
  public static extern int PK_CONTEXT_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PK_STATUS_get")]
  public static extern int PK_STATUS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PK_TIME_get")]
  public static extern int PK_TIME_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PK_CHANGED_get")]
  public static extern int PK_CHANGED_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PK_SERIAL_NUMBER_get")]
  public static extern int PK_SERIAL_NUMBER_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PK_CURSOR_get")]
  public static extern int PK_CURSOR_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PK_BUTTONS_get")]
  public static extern int PK_BUTTONS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PK_X_get")]
  public static extern int PK_X_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PK_Y_get")]
  public static extern int PK_Y_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PK_Z_get")]
  public static extern int PK_Z_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PK_NORMAL_PRESSURE_get")]
  public static extern int PK_NORMAL_PRESSURE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PK_TANGENT_PRESSURE_get")]
  public static extern int PK_TANGENT_PRESSURE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PK_ORIENTATION_get")]
  public static extern int PK_ORIENTATION_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PK_ROTATION_get")]
  public static extern int PK_ROTATION_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_AXIS_axMin_set")]
  public static extern void AXIS_axMin_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_AXIS_axMin_get")]
  public static extern int AXIS_axMin_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_AXIS_axMax_set")]
  public static extern void AXIS_axMax_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_AXIS_axMax_get")]
  public static extern int AXIS_axMax_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_AXIS_axUnits_set")]
  public static extern void AXIS_axUnits_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_AXIS_axUnits_get")]
  public static extern uint AXIS_axUnits_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_AXIS_axResolution_set")]
  public static extern void AXIS_axResolution_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_AXIS_axResolution_get")]
  public static extern uint AXIS_axResolution_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_new_AXIS")]
  public static extern global::System.IntPtr new_AXIS();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_delete_AXIS")]
  public static extern void delete_AXIS(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TU_NONE_get")]
  public static extern int TU_NONE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TU_INCHES_get")]
  public static extern int TU_INCHES_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TU_CENTIMETERS_get")]
  public static extern int TU_CENTIMETERS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TU_CIRCLE_get")]
  public static extern int TU_CIRCLE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_NONE_get")]
  public static extern int SBN_NONE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_LCLICK_get")]
  public static extern int SBN_LCLICK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_LDBLCLICK_get")]
  public static extern int SBN_LDBLCLICK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_LDRAG_get")]
  public static extern int SBN_LDRAG_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_RCLICK_get")]
  public static extern int SBN_RCLICK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_RDBLCLICK_get")]
  public static extern int SBN_RDBLCLICK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_RDRAG_get")]
  public static extern int SBN_RDRAG_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_MCLICK_get")]
  public static extern int SBN_MCLICK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_MDBLCLICK_get")]
  public static extern int SBN_MDBLCLICK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_MDRAG_get")]
  public static extern int SBN_MDRAG_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_PTCLICK_get")]
  public static extern int SBN_PTCLICK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_PTDBLCLICK_get")]
  public static extern int SBN_PTDBLCLICK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_PTDRAG_get")]
  public static extern int SBN_PTDRAG_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_PNCLICK_get")]
  public static extern int SBN_PNCLICK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_PNDBLCLICK_get")]
  public static extern int SBN_PNDBLCLICK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_PNDRAG_get")]
  public static extern int SBN_PNDRAG_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_P1CLICK_get")]
  public static extern int SBN_P1CLICK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_P1DBLCLICK_get")]
  public static extern int SBN_P1DBLCLICK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_P1DRAG_get")]
  public static extern int SBN_P1DRAG_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_P2CLICK_get")]
  public static extern int SBN_P2CLICK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_P2DBLCLICK_get")]
  public static extern int SBN_P2DBLCLICK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_P2DRAG_get")]
  public static extern int SBN_P2DRAG_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_P3CLICK_get")]
  public static extern int SBN_P3CLICK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_P3DBLCLICK_get")]
  public static extern int SBN_P3DBLCLICK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SBN_P3DRAG_get")]
  public static extern int SBN_P3DRAG_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_HWC_INTEGRATED_get")]
  public static extern int HWC_INTEGRATED_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_HWC_TOUCH_get")]
  public static extern int HWC_TOUCH_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_HWC_HARDPROX_get")]
  public static extern int HWC_HARDPROX_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_HWC_PHYSID_CURSORS_get")]
  public static extern int HWC_PHYSID_CURSORS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CRC_MULTIMODE_get")]
  public static extern int CRC_MULTIMODE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CRC_AGGREGATE_get")]
  public static extern int CRC_AGGREGATE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CRC_INVERT_get")]
  public static extern int CRC_INVERT_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTI_INTERFACE_get")]
  public static extern int WTI_INTERFACE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_IFC_WINTABID_get")]
  public static extern int IFC_WINTABID_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_IFC_SPECVERSION_get")]
  public static extern int IFC_SPECVERSION_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_IFC_IMPLVERSION_get")]
  public static extern int IFC_IMPLVERSION_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_IFC_NDEVICES_get")]
  public static extern int IFC_NDEVICES_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_IFC_NCURSORS_get")]
  public static extern int IFC_NCURSORS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_IFC_NCONTEXTS_get")]
  public static extern int IFC_NCONTEXTS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_IFC_CTXOPTIONS_get")]
  public static extern int IFC_CTXOPTIONS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_IFC_CTXSAVESIZE_get")]
  public static extern int IFC_CTXSAVESIZE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_IFC_NEXTENSIONS_get")]
  public static extern int IFC_NEXTENSIONS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_IFC_NMANAGERS_get")]
  public static extern int IFC_NMANAGERS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_IFC_MAX_get")]
  public static extern int IFC_MAX_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTI_STATUS_get")]
  public static extern int WTI_STATUS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_STA_CONTEXTS_get")]
  public static extern int STA_CONTEXTS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_STA_SYSCTXS_get")]
  public static extern int STA_SYSCTXS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_STA_PKTRATE_get")]
  public static extern int STA_PKTRATE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_STA_PKTDATA_get")]
  public static extern int STA_PKTDATA_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_STA_MANAGERS_get")]
  public static extern int STA_MANAGERS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_STA_SYSTEM_get")]
  public static extern int STA_SYSTEM_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_STA_BUTTONUSE_get")]
  public static extern int STA_BUTTONUSE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_STA_SYSBTNUSE_get")]
  public static extern int STA_SYSBTNUSE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_STA_MAX_get")]
  public static extern int STA_MAX_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTI_DEFCONTEXT_get")]
  public static extern int WTI_DEFCONTEXT_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTI_DEFSYSCTX_get")]
  public static extern int WTI_DEFSYSCTX_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTI_DDCTXS_get")]
  public static extern int WTI_DDCTXS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTI_DSCTXS_get")]
  public static extern int WTI_DSCTXS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_NAME_get")]
  public static extern int CTX_NAME_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_OPTIONS_get")]
  public static extern int CTX_OPTIONS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_STATUS_get")]
  public static extern int CTX_STATUS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_LOCKS_get")]
  public static extern int CTX_LOCKS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_MSGBASE_get")]
  public static extern int CTX_MSGBASE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_DEVICE_get")]
  public static extern int CTX_DEVICE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_PKTRATE_get")]
  public static extern int CTX_PKTRATE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_PKTDATA_get")]
  public static extern int CTX_PKTDATA_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_PKTMODE_get")]
  public static extern int CTX_PKTMODE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_MOVEMASK_get")]
  public static extern int CTX_MOVEMASK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_BTNDNMASK_get")]
  public static extern int CTX_BTNDNMASK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_BTNUPMASK_get")]
  public static extern int CTX_BTNUPMASK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_INORGX_get")]
  public static extern int CTX_INORGX_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_INORGY_get")]
  public static extern int CTX_INORGY_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_INORGZ_get")]
  public static extern int CTX_INORGZ_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_INEXTX_get")]
  public static extern int CTX_INEXTX_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_INEXTY_get")]
  public static extern int CTX_INEXTY_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_INEXTZ_get")]
  public static extern int CTX_INEXTZ_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_OUTORGX_get")]
  public static extern int CTX_OUTORGX_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_OUTORGY_get")]
  public static extern int CTX_OUTORGY_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_OUTORGZ_get")]
  public static extern int CTX_OUTORGZ_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_OUTEXTX_get")]
  public static extern int CTX_OUTEXTX_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_OUTEXTY_get")]
  public static extern int CTX_OUTEXTY_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_OUTEXTZ_get")]
  public static extern int CTX_OUTEXTZ_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_SENSX_get")]
  public static extern int CTX_SENSX_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_SENSY_get")]
  public static extern int CTX_SENSY_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_SENSZ_get")]
  public static extern int CTX_SENSZ_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_SYSMODE_get")]
  public static extern int CTX_SYSMODE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_SYSORGX_get")]
  public static extern int CTX_SYSORGX_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_SYSORGY_get")]
  public static extern int CTX_SYSORGY_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_SYSEXTX_get")]
  public static extern int CTX_SYSEXTX_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_SYSEXTY_get")]
  public static extern int CTX_SYSEXTY_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_SYSSENSX_get")]
  public static extern int CTX_SYSSENSX_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_SYSSENSY_get")]
  public static extern int CTX_SYSSENSY_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CTX_MAX_get")]
  public static extern int CTX_MAX_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTI_DEVICES_get")]
  public static extern int WTI_DEVICES_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_DVC_NAME_get")]
  public static extern int DVC_NAME_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_DVC_HARDWARE_get")]
  public static extern int DVC_HARDWARE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_DVC_NCSRTYPES_get")]
  public static extern int DVC_NCSRTYPES_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_DVC_FIRSTCSR_get")]
  public static extern int DVC_FIRSTCSR_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_DVC_PKTRATE_get")]
  public static extern int DVC_PKTRATE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_DVC_PKTDATA_get")]
  public static extern int DVC_PKTDATA_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_DVC_PKTMODE_get")]
  public static extern int DVC_PKTMODE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_DVC_CSRDATA_get")]
  public static extern int DVC_CSRDATA_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_DVC_XMARGIN_get")]
  public static extern int DVC_XMARGIN_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_DVC_YMARGIN_get")]
  public static extern int DVC_YMARGIN_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_DVC_ZMARGIN_get")]
  public static extern int DVC_ZMARGIN_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_DVC_X_get")]
  public static extern int DVC_X_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_DVC_Y_get")]
  public static extern int DVC_Y_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_DVC_Z_get")]
  public static extern int DVC_Z_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_DVC_NPRESSURE_get")]
  public static extern int DVC_NPRESSURE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_DVC_TPRESSURE_get")]
  public static extern int DVC_TPRESSURE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_DVC_ORIENTATION_get")]
  public static extern int DVC_ORIENTATION_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_DVC_ROTATION_get")]
  public static extern int DVC_ROTATION_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_DVC_PNPID_get")]
  public static extern int DVC_PNPID_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_DVC_MAX_get")]
  public static extern int DVC_MAX_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTI_CURSORS_get")]
  public static extern int WTI_CURSORS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CSR_NAME_get")]
  public static extern int CSR_NAME_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CSR_ACTIVE_get")]
  public static extern int CSR_ACTIVE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CSR_PKTDATA_get")]
  public static extern int CSR_PKTDATA_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CSR_BUTTONS_get")]
  public static extern int CSR_BUTTONS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CSR_BUTTONBITS_get")]
  public static extern int CSR_BUTTONBITS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CSR_BTNNAMES_get")]
  public static extern int CSR_BTNNAMES_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CSR_BUTTONMAP_get")]
  public static extern int CSR_BUTTONMAP_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CSR_SYSBTNMAP_get")]
  public static extern int CSR_SYSBTNMAP_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CSR_NPBUTTON_get")]
  public static extern int CSR_NPBUTTON_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CSR_NPBTNMARKS_get")]
  public static extern int CSR_NPBTNMARKS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CSR_NPRESPONSE_get")]
  public static extern int CSR_NPRESPONSE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CSR_TPBUTTON_get")]
  public static extern int CSR_TPBUTTON_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CSR_TPBTNMARKS_get")]
  public static extern int CSR_TPBTNMARKS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CSR_TPRESPONSE_get")]
  public static extern int CSR_TPRESPONSE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CSR_PHYSID_get")]
  public static extern int CSR_PHYSID_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CSR_MODE_get")]
  public static extern int CSR_MODE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CSR_MINPKTDATA_get")]
  public static extern int CSR_MINPKTDATA_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CSR_MINBUTTONS_get")]
  public static extern int CSR_MINBUTTONS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CSR_CAPABILITIES_get")]
  public static extern int CSR_CAPABILITIES_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CSR_TYPE_get")]
  public static extern int CSR_TYPE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CSR_MAX_get")]
  public static extern int CSR_MAX_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTI_EXTENSIONS_get")]
  public static extern int WTI_EXTENSIONS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXT_NAME_get")]
  public static extern int EXT_NAME_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXT_TAG_get")]
  public static extern int EXT_TAG_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXT_MASK_get")]
  public static extern int EXT_MASK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXT_SIZE_get")]
  public static extern int EXT_SIZE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXT_AXES_get")]
  public static extern int EXT_AXES_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXT_DEFAULT_get")]
  public static extern int EXT_DEFAULT_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXT_DEFCONTEXT_get")]
  public static extern int EXT_DEFCONTEXT_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXT_DEFSYSCTX_get")]
  public static extern int EXT_DEFSYSCTX_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXT_CURSORS_get")]
  public static extern int EXT_CURSORS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXT_DEVICES_get")]
  public static extern int EXT_DEVICES_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXT_MAX_get")]
  public static extern int EXT_MAX_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LCNAMELEN_get")]
  public static extern int LCNAMELEN_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LC_NAMELEN_get")]
  public static extern int LC_NAMELEN_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcName_set")]
  public static extern void LOGCONTEXTA_lcName_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcName_get")]
  public static extern string LOGCONTEXTA_lcName_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcOptions_set")]
  public static extern void LOGCONTEXTA_lcOptions_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcOptions_get")]
  public static extern uint LOGCONTEXTA_lcOptions_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcStatus_set")]
  public static extern void LOGCONTEXTA_lcStatus_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcStatus_get")]
  public static extern uint LOGCONTEXTA_lcStatus_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcLocks_set")]
  public static extern void LOGCONTEXTA_lcLocks_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcLocks_get")]
  public static extern uint LOGCONTEXTA_lcLocks_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcMsgBase_set")]
  public static extern void LOGCONTEXTA_lcMsgBase_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcMsgBase_get")]
  public static extern uint LOGCONTEXTA_lcMsgBase_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcDevice_set")]
  public static extern void LOGCONTEXTA_lcDevice_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcDevice_get")]
  public static extern uint LOGCONTEXTA_lcDevice_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcPktRate_set")]
  public static extern void LOGCONTEXTA_lcPktRate_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcPktRate_get")]
  public static extern uint LOGCONTEXTA_lcPktRate_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcPktData_set")]
  public static extern void LOGCONTEXTA_lcPktData_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcPktData_get")]
  public static extern uint LOGCONTEXTA_lcPktData_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcPktMode_set")]
  public static extern void LOGCONTEXTA_lcPktMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcPktMode_get")]
  public static extern uint LOGCONTEXTA_lcPktMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcMoveMask_set")]
  public static extern void LOGCONTEXTA_lcMoveMask_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcMoveMask_get")]
  public static extern uint LOGCONTEXTA_lcMoveMask_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcBtnDnMask_set")]
  public static extern void LOGCONTEXTA_lcBtnDnMask_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcBtnDnMask_get")]
  public static extern uint LOGCONTEXTA_lcBtnDnMask_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcBtnUpMask_set")]
  public static extern void LOGCONTEXTA_lcBtnUpMask_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcBtnUpMask_get")]
  public static extern uint LOGCONTEXTA_lcBtnUpMask_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcInOrgX_set")]
  public static extern void LOGCONTEXTA_lcInOrgX_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcInOrgX_get")]
  public static extern int LOGCONTEXTA_lcInOrgX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcInOrgY_set")]
  public static extern void LOGCONTEXTA_lcInOrgY_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcInOrgY_get")]
  public static extern int LOGCONTEXTA_lcInOrgY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcInOrgZ_set")]
  public static extern void LOGCONTEXTA_lcInOrgZ_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcInOrgZ_get")]
  public static extern int LOGCONTEXTA_lcInOrgZ_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcInExtX_set")]
  public static extern void LOGCONTEXTA_lcInExtX_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcInExtX_get")]
  public static extern int LOGCONTEXTA_lcInExtX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcInExtY_set")]
  public static extern void LOGCONTEXTA_lcInExtY_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcInExtY_get")]
  public static extern int LOGCONTEXTA_lcInExtY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcInExtZ_set")]
  public static extern void LOGCONTEXTA_lcInExtZ_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcInExtZ_get")]
  public static extern int LOGCONTEXTA_lcInExtZ_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcOutOrgX_set")]
  public static extern void LOGCONTEXTA_lcOutOrgX_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcOutOrgX_get")]
  public static extern int LOGCONTEXTA_lcOutOrgX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcOutOrgY_set")]
  public static extern void LOGCONTEXTA_lcOutOrgY_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcOutOrgY_get")]
  public static extern int LOGCONTEXTA_lcOutOrgY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcOutOrgZ_set")]
  public static extern void LOGCONTEXTA_lcOutOrgZ_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcOutOrgZ_get")]
  public static extern int LOGCONTEXTA_lcOutOrgZ_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcOutExtX_set")]
  public static extern void LOGCONTEXTA_lcOutExtX_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcOutExtX_get")]
  public static extern int LOGCONTEXTA_lcOutExtX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcOutExtY_set")]
  public static extern void LOGCONTEXTA_lcOutExtY_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcOutExtY_get")]
  public static extern int LOGCONTEXTA_lcOutExtY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcOutExtZ_set")]
  public static extern void LOGCONTEXTA_lcOutExtZ_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcOutExtZ_get")]
  public static extern int LOGCONTEXTA_lcOutExtZ_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcSensX_set")]
  public static extern void LOGCONTEXTA_lcSensX_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcSensX_get")]
  public static extern uint LOGCONTEXTA_lcSensX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcSensY_set")]
  public static extern void LOGCONTEXTA_lcSensY_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcSensY_get")]
  public static extern uint LOGCONTEXTA_lcSensY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcSensZ_set")]
  public static extern void LOGCONTEXTA_lcSensZ_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcSensZ_get")]
  public static extern uint LOGCONTEXTA_lcSensZ_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcSysMode_set")]
  public static extern void LOGCONTEXTA_lcSysMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcSysMode_get")]
  public static extern int LOGCONTEXTA_lcSysMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcSysOrgX_set")]
  public static extern void LOGCONTEXTA_lcSysOrgX_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcSysOrgX_get")]
  public static extern int LOGCONTEXTA_lcSysOrgX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcSysOrgY_set")]
  public static extern void LOGCONTEXTA_lcSysOrgY_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcSysOrgY_get")]
  public static extern int LOGCONTEXTA_lcSysOrgY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcSysExtX_set")]
  public static extern void LOGCONTEXTA_lcSysExtX_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcSysExtX_get")]
  public static extern int LOGCONTEXTA_lcSysExtX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcSysExtY_set")]
  public static extern void LOGCONTEXTA_lcSysExtY_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcSysExtY_get")]
  public static extern int LOGCONTEXTA_lcSysExtY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcSysSensX_set")]
  public static extern void LOGCONTEXTA_lcSysSensX_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcSysSensX_get")]
  public static extern uint LOGCONTEXTA_lcSysSensX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcSysSensY_set")]
  public static extern void LOGCONTEXTA_lcSysSensY_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTA_lcSysSensY_get")]
  public static extern uint LOGCONTEXTA_lcSysSensY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_new_LOGCONTEXTA")]
  public static extern global::System.IntPtr new_LOGCONTEXTA();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_delete_LOGCONTEXTA")]
  public static extern void delete_LOGCONTEXTA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcName_set")]
  public static extern void LOGCONTEXTW_lcName_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcName_get")]
  public static extern global::System.IntPtr LOGCONTEXTW_lcName_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcOptions_set")]
  public static extern void LOGCONTEXTW_lcOptions_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcOptions_get")]
  public static extern uint LOGCONTEXTW_lcOptions_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcStatus_set")]
  public static extern void LOGCONTEXTW_lcStatus_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcStatus_get")]
  public static extern uint LOGCONTEXTW_lcStatus_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcLocks_set")]
  public static extern void LOGCONTEXTW_lcLocks_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcLocks_get")]
  public static extern uint LOGCONTEXTW_lcLocks_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcMsgBase_set")]
  public static extern void LOGCONTEXTW_lcMsgBase_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcMsgBase_get")]
  public static extern uint LOGCONTEXTW_lcMsgBase_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcDevice_set")]
  public static extern void LOGCONTEXTW_lcDevice_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcDevice_get")]
  public static extern uint LOGCONTEXTW_lcDevice_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcPktRate_set")]
  public static extern void LOGCONTEXTW_lcPktRate_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcPktRate_get")]
  public static extern uint LOGCONTEXTW_lcPktRate_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcPktData_set")]
  public static extern void LOGCONTEXTW_lcPktData_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcPktData_get")]
  public static extern uint LOGCONTEXTW_lcPktData_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcPktMode_set")]
  public static extern void LOGCONTEXTW_lcPktMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcPktMode_get")]
  public static extern uint LOGCONTEXTW_lcPktMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcMoveMask_set")]
  public static extern void LOGCONTEXTW_lcMoveMask_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcMoveMask_get")]
  public static extern uint LOGCONTEXTW_lcMoveMask_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcBtnDnMask_set")]
  public static extern void LOGCONTEXTW_lcBtnDnMask_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcBtnDnMask_get")]
  public static extern uint LOGCONTEXTW_lcBtnDnMask_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcBtnUpMask_set")]
  public static extern void LOGCONTEXTW_lcBtnUpMask_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcBtnUpMask_get")]
  public static extern uint LOGCONTEXTW_lcBtnUpMask_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcInOrgX_set")]
  public static extern void LOGCONTEXTW_lcInOrgX_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcInOrgX_get")]
  public static extern int LOGCONTEXTW_lcInOrgX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcInOrgY_set")]
  public static extern void LOGCONTEXTW_lcInOrgY_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcInOrgY_get")]
  public static extern int LOGCONTEXTW_lcInOrgY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcInOrgZ_set")]
  public static extern void LOGCONTEXTW_lcInOrgZ_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcInOrgZ_get")]
  public static extern int LOGCONTEXTW_lcInOrgZ_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcInExtX_set")]
  public static extern void LOGCONTEXTW_lcInExtX_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcInExtX_get")]
  public static extern int LOGCONTEXTW_lcInExtX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcInExtY_set")]
  public static extern void LOGCONTEXTW_lcInExtY_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcInExtY_get")]
  public static extern int LOGCONTEXTW_lcInExtY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcInExtZ_set")]
  public static extern void LOGCONTEXTW_lcInExtZ_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcInExtZ_get")]
  public static extern int LOGCONTEXTW_lcInExtZ_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcOutOrgX_set")]
  public static extern void LOGCONTEXTW_lcOutOrgX_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcOutOrgX_get")]
  public static extern int LOGCONTEXTW_lcOutOrgX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcOutOrgY_set")]
  public static extern void LOGCONTEXTW_lcOutOrgY_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcOutOrgY_get")]
  public static extern int LOGCONTEXTW_lcOutOrgY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcOutOrgZ_set")]
  public static extern void LOGCONTEXTW_lcOutOrgZ_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcOutOrgZ_get")]
  public static extern int LOGCONTEXTW_lcOutOrgZ_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcOutExtX_set")]
  public static extern void LOGCONTEXTW_lcOutExtX_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcOutExtX_get")]
  public static extern int LOGCONTEXTW_lcOutExtX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcOutExtY_set")]
  public static extern void LOGCONTEXTW_lcOutExtY_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcOutExtY_get")]
  public static extern int LOGCONTEXTW_lcOutExtY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcOutExtZ_set")]
  public static extern void LOGCONTEXTW_lcOutExtZ_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcOutExtZ_get")]
  public static extern int LOGCONTEXTW_lcOutExtZ_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcSensX_set")]
  public static extern void LOGCONTEXTW_lcSensX_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcSensX_get")]
  public static extern uint LOGCONTEXTW_lcSensX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcSensY_set")]
  public static extern void LOGCONTEXTW_lcSensY_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcSensY_get")]
  public static extern uint LOGCONTEXTW_lcSensY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcSensZ_set")]
  public static extern void LOGCONTEXTW_lcSensZ_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcSensZ_get")]
  public static extern uint LOGCONTEXTW_lcSensZ_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcSysMode_set")]
  public static extern void LOGCONTEXTW_lcSysMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcSysMode_get")]
  public static extern int LOGCONTEXTW_lcSysMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcSysOrgX_set")]
  public static extern void LOGCONTEXTW_lcSysOrgX_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcSysOrgX_get")]
  public static extern int LOGCONTEXTW_lcSysOrgX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcSysOrgY_set")]
  public static extern void LOGCONTEXTW_lcSysOrgY_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcSysOrgY_get")]
  public static extern int LOGCONTEXTW_lcSysOrgY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcSysExtX_set")]
  public static extern void LOGCONTEXTW_lcSysExtX_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcSysExtX_get")]
  public static extern int LOGCONTEXTW_lcSysExtX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcSysExtY_set")]
  public static extern void LOGCONTEXTW_lcSysExtY_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcSysExtY_get")]
  public static extern int LOGCONTEXTW_lcSysExtY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcSysSensX_set")]
  public static extern void LOGCONTEXTW_lcSysSensX_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcSysSensX_get")]
  public static extern uint LOGCONTEXTW_lcSysSensX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcSysSensY_set")]
  public static extern void LOGCONTEXTW_lcSysSensY_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_LOGCONTEXTW_lcSysSensY_get")]
  public static extern uint LOGCONTEXTW_lcSysSensY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_new_LOGCONTEXTW")]
  public static extern global::System.IntPtr new_LOGCONTEXTW();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_delete_LOGCONTEXTW")]
  public static extern void delete_LOGCONTEXTW(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CXO_SYSTEM_get")]
  public static extern int CXO_SYSTEM_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CXO_PEN_get")]
  public static extern int CXO_PEN_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CXO_MESSAGES_get")]
  public static extern int CXO_MESSAGES_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CXO_MARGIN_get")]
  public static extern int CXO_MARGIN_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CXO_MGNINSIDE_get")]
  public static extern int CXO_MGNINSIDE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CXO_CSRMESSAGES_get")]
  public static extern int CXO_CSRMESSAGES_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CXS_DISABLED_get")]
  public static extern int CXS_DISABLED_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CXS_OBSCURED_get")]
  public static extern int CXS_OBSCURED_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CXS_ONTOP_get")]
  public static extern int CXS_ONTOP_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CXL_INSIZE_get")]
  public static extern int CXL_INSIZE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CXL_INASPECT_get")]
  public static extern int CXL_INASPECT_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CXL_SENSITIVITY_get")]
  public static extern int CXL_SENSITIVITY_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CXL_MARGIN_get")]
  public static extern int CXL_MARGIN_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_CXL_SYSOUT_get")]
  public static extern int CXL_SYSOUT_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TPS_PROXIMITY_get")]
  public static extern int TPS_PROXIMITY_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TPS_QUEUE_ERR_get")]
  public static extern int TPS_QUEUE_ERR_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TPS_MARGIN_get")]
  public static extern int TPS_MARGIN_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TPS_GRAB_get")]
  public static extern int TPS_GRAB_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TPS_INVERT_get")]
  public static extern int TPS_INVERT_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORIENTATION_orAzimuth_set")]
  public static extern void ORIENTATION_orAzimuth_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORIENTATION_orAzimuth_get")]
  public static extern int ORIENTATION_orAzimuth_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORIENTATION_orAltitude_set")]
  public static extern void ORIENTATION_orAltitude_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORIENTATION_orAltitude_get")]
  public static extern int ORIENTATION_orAltitude_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORIENTATION_orTwist_set")]
  public static extern void ORIENTATION_orTwist_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORIENTATION_orTwist_get")]
  public static extern int ORIENTATION_orTwist_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_new_ORIENTATION")]
  public static extern global::System.IntPtr new_ORIENTATION();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_delete_ORIENTATION")]
  public static extern void delete_ORIENTATION(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ROTATION_roPitch_set")]
  public static extern void ROTATION_roPitch_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ROTATION_roPitch_get")]
  public static extern int ROTATION_roPitch_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ROTATION_roRoll_set")]
  public static extern void ROTATION_roRoll_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ROTATION_roRoll_get")]
  public static extern int ROTATION_roRoll_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ROTATION_roYaw_set")]
  public static extern void ROTATION_roYaw_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ROTATION_roYaw_get")]
  public static extern int ROTATION_roYaw_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_new_ROTATION")]
  public static extern global::System.IntPtr new_ROTATION();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_delete_ROTATION")]
  public static extern void delete_ROTATION(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TBN_NONE_get")]
  public static extern int TBN_NONE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TBN_UP_get")]
  public static extern int TBN_UP_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TBN_DOWN_get")]
  public static extern int TBN_DOWN_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTDC_NONE_get")]
  public static extern int WTDC_NONE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTDC_CANCEL_get")]
  public static extern int WTDC_CANCEL_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTDC_OK_get")]
  public static extern int WTDC_OK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTDC_RESTART_get")]
  public static extern int WTDC_RESTART_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTH_PLAYBACK_get")]
  public static extern int WTH_PLAYBACK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTH_RECORD_get")]
  public static extern int WTH_RECORD_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTHC_GETLPLPFN_get")]
  public static extern int WTHC_GETLPLPFN_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTHC_LPLPFNNEXT_get")]
  public static extern int WTHC_LPLPFNNEXT_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTHC_LPFNNEXT_get")]
  public static extern int WTHC_LPFNNEXT_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTHC_ACTION_get")]
  public static extern int WTHC_ACTION_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTHC_GETNEXT_get")]
  public static extern int WTHC_GETNEXT_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTHC_SKIP_get")]
  public static extern int WTHC_SKIP_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PKEXT_ABSOLUTE_get")]
  public static extern int PKEXT_ABSOLUTE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PKEXT_RELATIVE_get")]
  public static extern int PKEXT_RELATIVE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTX_OBT_get")]
  public static extern int WTX_OBT_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTX_FKEYS_get")]
  public static extern int WTX_FKEYS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTX_TILT_get")]
  public static extern int WTX_TILT_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTX_CSRMASK_get")]
  public static extern int WTX_CSRMASK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTX_XBTNMASK_get")]
  public static extern int WTX_XBTNMASK_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTX_EXPKEYS_get")]
  public static extern int WTX_EXPKEYS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTX_TOUCHSTRIP_get")]
  public static extern int WTX_TOUCHSTRIP_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTX_TOUCHRING_get")]
  public static extern int WTX_TOUCHRING_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTX_EXPKEYS2_get")]
  public static extern int WTX_EXPKEYS2_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_XBTNMASK_xBtnDnMask_set")]
  public static extern void XBTNMASK_xBtnDnMask_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_XBTNMASK_xBtnDnMask_get")]
  public static extern global::System.IntPtr XBTNMASK_xBtnDnMask_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_XBTNMASK_xBtnUpMask_set")]
  public static extern void XBTNMASK_xBtnUpMask_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_XBTNMASK_xBtnUpMask_get")]
  public static extern global::System.IntPtr XBTNMASK_xBtnUpMask_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_new_XBTNMASK")]
  public static extern global::System.IntPtr new_XBTNMASK();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_delete_XBTNMASK")]
  public static extern void delete_XBTNMASK(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TILT_tiltX_set")]
  public static extern void TILT_tiltX_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TILT_tiltX_get")]
  public static extern int TILT_tiltX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TILT_tiltY_set")]
  public static extern void TILT_tiltY_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TILT_tiltY_get")]
  public static extern int TILT_tiltY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_new_TILT")]
  public static extern global::System.IntPtr new_TILT();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_delete_TILT")]
  public static extern void delete_TILT(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTENSIONBASE_nContext_set")]
  public static extern void EXTENSIONBASE_nContext_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTENSIONBASE_nContext_get")]
  public static extern global::System.IntPtr EXTENSIONBASE_nContext_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTENSIONBASE_nStatus_set")]
  public static extern void EXTENSIONBASE_nStatus_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTENSIONBASE_nStatus_get")]
  public static extern uint EXTENSIONBASE_nStatus_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTENSIONBASE_nTime_set")]
  public static extern void EXTENSIONBASE_nTime_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTENSIONBASE_nTime_get")]
  public static extern uint EXTENSIONBASE_nTime_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTENSIONBASE_nSerialNumber_set")]
  public static extern void EXTENSIONBASE_nSerialNumber_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTENSIONBASE_nSerialNumber_get")]
  public static extern uint EXTENSIONBASE_nSerialNumber_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_new_EXTENSIONBASE")]
  public static extern global::System.IntPtr new_EXTENSIONBASE();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_delete_EXTENSIONBASE")]
  public static extern void delete_EXTENSIONBASE(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXPKEYSDATA_nTablet_set")]
  public static extern void EXPKEYSDATA_nTablet_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXPKEYSDATA_nTablet_get")]
  public static extern byte EXPKEYSDATA_nTablet_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXPKEYSDATA_nControl_set")]
  public static extern void EXPKEYSDATA_nControl_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXPKEYSDATA_nControl_get")]
  public static extern byte EXPKEYSDATA_nControl_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXPKEYSDATA_nLocation_set")]
  public static extern void EXPKEYSDATA_nLocation_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXPKEYSDATA_nLocation_get")]
  public static extern byte EXPKEYSDATA_nLocation_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXPKEYSDATA_nReserved_set")]
  public static extern void EXPKEYSDATA_nReserved_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXPKEYSDATA_nReserved_get")]
  public static extern byte EXPKEYSDATA_nReserved_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXPKEYSDATA_nState_set")]
  public static extern void EXPKEYSDATA_nState_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXPKEYSDATA_nState_get")]
  public static extern uint EXPKEYSDATA_nState_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_new_EXPKEYSDATA")]
  public static extern global::System.IntPtr new_EXPKEYSDATA();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_delete_EXPKEYSDATA")]
  public static extern void delete_EXPKEYSDATA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SLIDERDATA_nTablet_set")]
  public static extern void SLIDERDATA_nTablet_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SLIDERDATA_nTablet_get")]
  public static extern byte SLIDERDATA_nTablet_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SLIDERDATA_nControl_set")]
  public static extern void SLIDERDATA_nControl_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SLIDERDATA_nControl_get")]
  public static extern byte SLIDERDATA_nControl_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SLIDERDATA_nMode_set")]
  public static extern void SLIDERDATA_nMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SLIDERDATA_nMode_get")]
  public static extern byte SLIDERDATA_nMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SLIDERDATA_nReserved_set")]
  public static extern void SLIDERDATA_nReserved_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SLIDERDATA_nReserved_get")]
  public static extern byte SLIDERDATA_nReserved_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SLIDERDATA_nPosition_set")]
  public static extern void SLIDERDATA_nPosition_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_SLIDERDATA_nPosition_get")]
  public static extern uint SLIDERDATA_nPosition_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_new_SLIDERDATA")]
  public static extern global::System.IntPtr new_SLIDERDATA();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_delete_SLIDERDATA")]
  public static extern void delete_SLIDERDATA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTPROPERTY_version_set")]
  public static extern void EXTPROPERTY_version_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTPROPERTY_version_get")]
  public static extern byte EXTPROPERTY_version_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTPROPERTY_tabletIndex_set")]
  public static extern void EXTPROPERTY_tabletIndex_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTPROPERTY_tabletIndex_get")]
  public static extern byte EXTPROPERTY_tabletIndex_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTPROPERTY_controlIndex_set")]
  public static extern void EXTPROPERTY_controlIndex_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTPROPERTY_controlIndex_get")]
  public static extern byte EXTPROPERTY_controlIndex_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTPROPERTY_functionIndex_set")]
  public static extern void EXTPROPERTY_functionIndex_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTPROPERTY_functionIndex_get")]
  public static extern byte EXTPROPERTY_functionIndex_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTPROPERTY_propertyID_set")]
  public static extern void EXTPROPERTY_propertyID_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTPROPERTY_propertyID_get")]
  public static extern ushort EXTPROPERTY_propertyID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTPROPERTY_reserved_set")]
  public static extern void EXTPROPERTY_reserved_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTPROPERTY_reserved_get")]
  public static extern ushort EXTPROPERTY_reserved_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTPROPERTY_dataSize_set")]
  public static extern void EXTPROPERTY_dataSize_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTPROPERTY_dataSize_get")]
  public static extern uint EXTPROPERTY_dataSize_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTPROPERTY_data_set")]
  public static extern void EXTPROPERTY_data_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_EXTPROPERTY_data_get")]
  public static extern global::System.IntPtr EXTPROPERTY_data_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_new_EXTPROPERTY")]
  public static extern global::System.IntPtr new_EXTPROPERTY();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_delete_EXTPROPERTY")]
  public static extern void delete_EXTPROPERTY(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TABLET_PROPERTY_CONTROLCOUNT_get")]
  public static extern int TABLET_PROPERTY_CONTROLCOUNT_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TABLET_PROPERTY_FUNCCOUNT_get")]
  public static extern int TABLET_PROPERTY_FUNCCOUNT_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TABLET_PROPERTY_AVAILABLE_get")]
  public static extern int TABLET_PROPERTY_AVAILABLE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TABLET_PROPERTY_MIN_get")]
  public static extern int TABLET_PROPERTY_MIN_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TABLET_PROPERTY_MAX_get")]
  public static extern int TABLET_PROPERTY_MAX_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TABLET_PROPERTY_OVERRIDE_get")]
  public static extern int TABLET_PROPERTY_OVERRIDE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TABLET_PROPERTY_OVERRIDE_NAME_get")]
  public static extern int TABLET_PROPERTY_OVERRIDE_NAME_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TABLET_PROPERTY_OVERRIDE_ICON_get")]
  public static extern int TABLET_PROPERTY_OVERRIDE_ICON_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TABLET_PROPERTY_ICON_WIDTH_get")]
  public static extern int TABLET_PROPERTY_ICON_WIDTH_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TABLET_PROPERTY_ICON_HEIGHT_get")]
  public static extern int TABLET_PROPERTY_ICON_HEIGHT_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TABLET_PROPERTY_ICON_FORMAT_get")]
  public static extern int TABLET_PROPERTY_ICON_FORMAT_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TABLET_PROPERTY_LOCATION_get")]
  public static extern int TABLET_PROPERTY_LOCATION_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TABLET_ICON_FMT_NONE_get")]
  public static extern int TABLET_ICON_FMT_NONE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TABLET_ICON_FMT_4BPP_GRAY_get")]
  public static extern int TABLET_ICON_FMT_4BPP_GRAY_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TABLET_LOC_LEFT_get")]
  public static extern int TABLET_LOC_LEFT_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TABLET_LOC_RIGHT_get")]
  public static extern int TABLET_LOC_RIGHT_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TABLET_LOC_TOP_get")]
  public static extern int TABLET_LOC_TOP_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TABLET_LOC_BOTTOM_get")]
  public static extern int TABLET_LOC_BOTTOM_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_TABLET_LOC_TRANSDUCER_get")]
  public static extern int TABLET_LOC_TRANSDUCER_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTInfoA")]
  public static extern uint WTInfoA(uint jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTInfoA_get")]
  public static extern int ORD_WTInfoA_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTInfoW")]
  public static extern uint WTInfoW(uint jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTInfoW_get")]
  public static extern int ORD_WTInfoW_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTInfo_get")]
  public static extern int ORD_WTInfo_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTOpenA")]
  public static extern global::System.IntPtr WTOpenA(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTOpenA_get")]
  public static extern int ORD_WTOpenA_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTOpenW")]
  public static extern global::System.IntPtr WTOpenW(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTOpenW_get")]
  public static extern int ORD_WTOpenW_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTOpen_get")]
  public static extern int ORD_WTOpen_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTClose")]
  public static extern int WTClose(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTClose_get")]
  public static extern int ORD_WTClose_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTPacketsGet")]
  public static extern int WTPacketsGet(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTPacketsGet_get")]
  public static extern int ORD_WTPacketsGet_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTPacket")]
  public static extern int WTPacket(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTPacket_get")]
  public static extern int ORD_WTPacket_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTEnable")]
  public static extern int WTEnable(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTEnable_get")]
  public static extern int ORD_WTEnable_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTOverlap")]
  public static extern int WTOverlap(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTOverlap_get")]
  public static extern int ORD_WTOverlap_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTConfig")]
  public static extern int WTConfig(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTConfig_get")]
  public static extern int ORD_WTConfig_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTGetA")]
  public static extern int WTGetA(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTGetA_get")]
  public static extern int ORD_WTGetA_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTGetW")]
  public static extern int WTGetW(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTGetW_get")]
  public static extern int ORD_WTGetW_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTGet_get")]
  public static extern int ORD_WTGet_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTSetA")]
  public static extern int WTSetA(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTSetA_get")]
  public static extern int ORD_WTSetA_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTSetW")]
  public static extern int WTSetW(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTSetW_get")]
  public static extern int ORD_WTSetW_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTSet_get")]
  public static extern int ORD_WTSet_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTExtGet")]
  public static extern int WTExtGet(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTExtGet_get")]
  public static extern int ORD_WTExtGet_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTExtSet")]
  public static extern int WTExtSet(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTExtSet_get")]
  public static extern int ORD_WTExtSet_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTSave")]
  public static extern int WTSave(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTSave_get")]
  public static extern int ORD_WTSave_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTRestore")]
  public static extern global::System.IntPtr WTRestore(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTRestore_get")]
  public static extern int ORD_WTRestore_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTPacketsPeek")]
  public static extern int WTPacketsPeek(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTPacketsPeek_get")]
  public static extern int ORD_WTPacketsPeek_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTDataGet")]
  public static extern int WTDataGet(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, global::System.Runtime.InteropServices.HandleRef jarg6);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTDataGet_get")]
  public static extern int ORD_WTDataGet_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTDataPeek")]
  public static extern int WTDataPeek(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, global::System.Runtime.InteropServices.HandleRef jarg6);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTDataPeek_get")]
  public static extern int ORD_WTDataPeek_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTQueueSizeGet")]
  public static extern int WTQueueSizeGet(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTQueueSizeGet_get")]
  public static extern int ORD_WTQueueSizeGet_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTQueueSizeSet")]
  public static extern int WTQueueSizeSet(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTQueueSizeSet_get")]
  public static extern int ORD_WTQueueSizeSet_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTMgrOpen")]
  public static extern global::System.IntPtr WTMgrOpen(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTMgrOpen_get")]
  public static extern int ORD_WTMgrOpen_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTMgrClose")]
  public static extern int WTMgrClose(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTMgrClose_get")]
  public static extern int ORD_WTMgrClose_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTMgrContextEnum")]
  public static extern int WTMgrContextEnum(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTMgrContextEnum_get")]
  public static extern int ORD_WTMgrContextEnum_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTMgrContextOwner")]
  public static extern global::System.IntPtr WTMgrContextOwner(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTMgrContextOwner_get")]
  public static extern int ORD_WTMgrContextOwner_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTMgrDefContext")]
  public static extern global::System.IntPtr WTMgrDefContext(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTMgrDefContext_get")]
  public static extern int ORD_WTMgrDefContext_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTMgrDefContextEx")]
  public static extern global::System.IntPtr WTMgrDefContextEx(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTMgrDefContextEx_get")]
  public static extern int ORD_WTMgrDefContextEx_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTMgrDeviceConfig")]
  public static extern uint WTMgrDeviceConfig(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTMgrDeviceConfig_get")]
  public static extern int ORD_WTMgrDeviceConfig_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTMgrExt")]
  public static extern int WTMgrExt(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTMgrExt_get")]
  public static extern int ORD_WTMgrExt_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTMgrCsrEnable")]
  public static extern int WTMgrCsrEnable(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTMgrCsrEnable_get")]
  public static extern int ORD_WTMgrCsrEnable_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTMgrCsrButtonMap")]
  public static extern int WTMgrCsrButtonMap(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTMgrCsrButtonMap_get")]
  public static extern int ORD_WTMgrCsrButtonMap_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTMgrCsrPressureBtnMarks")]
  public static extern int WTMgrCsrPressureBtnMarks(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTMgrCsrPressureBtnMarks_get")]
  public static extern int ORD_WTMgrCsrPressureBtnMarks_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTMgrCsrPressureResponse")]
  public static extern int WTMgrCsrPressureResponse(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTMgrCsrPressureResponse_get")]
  public static extern int ORD_WTMgrCsrPressureResponse_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTMgrCsrExt")]
  public static extern int WTMgrCsrExt(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTMgrCsrExt_get")]
  public static extern int ORD_WTMgrCsrExt_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTQueuePacketsEx")]
  public static extern int WTQueuePacketsEx(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTQueuePacketsEx_get")]
  public static extern int ORD_WTQueuePacketsEx_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTMgrConfigReplaceExA")]
  public static extern int WTMgrConfigReplaceExA(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTMgrConfigReplaceExA_get")]
  public static extern int ORD_WTMgrConfigReplaceExA_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTMgrConfigReplaceExW")]
  public static extern int WTMgrConfigReplaceExW(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTMgrConfigReplaceExW_get")]
  public static extern int ORD_WTMgrConfigReplaceExW_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTMgrConfigReplaceEx_get")]
  public static extern int ORD_WTMgrConfigReplaceEx_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTMgrPacketHookExA")]
  public static extern global::System.IntPtr WTMgrPacketHookExA(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTMgrPacketHookExA_get")]
  public static extern int ORD_WTMgrPacketHookExA_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTMgrPacketHookExW")]
  public static extern global::System.IntPtr WTMgrPacketHookExW(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTMgrPacketHookExW_get")]
  public static extern int ORD_WTMgrPacketHookExW_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTMgrPacketHookEx_get")]
  public static extern int ORD_WTMgrPacketHookEx_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTMgrPacketUnhook")]
  public static extern int WTMgrPacketUnhook(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTMgrPacketUnhook_get")]
  public static extern int ORD_WTMgrPacketUnhook_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTMgrPacketHookNext")]
  public static extern global::System.IntPtr WTMgrPacketHookNext(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTMgrPacketHookNext_get")]
  public static extern int ORD_WTMgrPacketHookNext_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_WTMgrCsrPressureBtnMarksEx")]
  public static extern int WTMgrCsrPressureBtnMarksEx(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_ORD_WTMgrCsrPressureBtnMarksEx_get")]
  public static extern int ORD_WTMgrCsrPressureBtnMarksEx_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKETDATA_get")]
  public static extern int PACKETDATA_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKETMODE_get")]
  public static extern int PACKETMODE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKETEXPKEYS_get")]
  public static extern int PACKETEXPKEYS_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKETTOUCHSTRIP_get")]
  public static extern int PACKETTOUCHSTRIP_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKETTOUCHRING_get")]
  public static extern int PACKETTOUCHRING_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig___DATA_get")]
  public static extern int __DATA_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig___MODE_get")]
  public static extern int __MODE_get();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkContext_set")]
  public static extern void PACKET_pkContext_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkContext_get")]
  public static extern global::System.IntPtr PACKET_pkContext_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkStatus_set")]
  public static extern void PACKET_pkStatus_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkStatus_get")]
  public static extern uint PACKET_pkStatus_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkTime_set")]
  public static extern void PACKET_pkTime_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkTime_get")]
  public static extern uint PACKET_pkTime_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkChanged_set")]
  public static extern void PACKET_pkChanged_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkChanged_get")]
  public static extern uint PACKET_pkChanged_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkSerialNumber_set")]
  public static extern void PACKET_pkSerialNumber_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkSerialNumber_get")]
  public static extern uint PACKET_pkSerialNumber_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkCursor_set")]
  public static extern void PACKET_pkCursor_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkCursor_get")]
  public static extern uint PACKET_pkCursor_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkButtons_set")]
  public static extern void PACKET_pkButtons_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkButtons_get")]
  public static extern uint PACKET_pkButtons_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkX_set")]
  public static extern void PACKET_pkX_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkX_get")]
  public static extern int PACKET_pkX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkY_set")]
  public static extern void PACKET_pkY_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkY_get")]
  public static extern int PACKET_pkY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkZ_set")]
  public static extern void PACKET_pkZ_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkZ_get")]
  public static extern int PACKET_pkZ_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkNormalPressure_set")]
  public static extern void PACKET_pkNormalPressure_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkNormalPressure_get")]
  public static extern int PACKET_pkNormalPressure_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkTangentPressure_set")]
  public static extern void PACKET_pkTangentPressure_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkTangentPressure_get")]
  public static extern int PACKET_pkTangentPressure_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkOrientation_set")]
  public static extern void PACKET_pkOrientation_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkOrientation_get")]
  public static extern global::System.IntPtr PACKET_pkOrientation_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkRotation_set")]
  public static extern void PACKET_pkRotation_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKET_pkRotation_get")]
  public static extern global::System.IntPtr PACKET_pkRotation_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_new_PACKET")]
  public static extern global::System.IntPtr new_PACKET();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_delete_PACKET")]
  public static extern void delete_PACKET(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKETEXT_pkBase_set")]
  public static extern void PACKETEXT_pkBase_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKETEXT_pkBase_get")]
  public static extern global::System.IntPtr PACKETEXT_pkBase_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKETEXT_pkExpKeys_set")]
  public static extern void PACKETEXT_pkExpKeys_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKETEXT_pkExpKeys_get")]
  public static extern global::System.IntPtr PACKETEXT_pkExpKeys_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKETEXT_pkTouchStrip_set")]
  public static extern void PACKETEXT_pkTouchStrip_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKETEXT_pkTouchStrip_get")]
  public static extern global::System.IntPtr PACKETEXT_pkTouchStrip_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKETEXT_pkTouchRing_set")]
  public static extern void PACKETEXT_pkTouchRing_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_PACKETEXT_pkTouchRing_get")]
  public static extern global::System.IntPtr PACKETEXT_pkTouchRing_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_new_PACKETEXT")]
  public static extern global::System.IntPtr new_PACKETEXT();

  [global::System.Runtime.InteropServices.DllImport("SwigWintab", EntryPoint="CSharp_Swig_delete_PACKETEXT")]
  public static extern void delete_PACKETEXT(global::System.Runtime.InteropServices.HandleRef jarg1);
}

}
namespace Swig {

public class SwigWintab {
  public static uint WTInfoA(uint arg0, uint arg1, SWIGTYPE_p_void arg2) {
    uint ret = SwigWintabPINVOKE.WTInfoA(arg0, arg1, SWIGTYPE_p_void.getCPtr(arg2));
    return ret;
  }

  public static uint WTInfoW(uint arg0, uint arg1, SWIGTYPE_p_void arg2) {
    uint ret = SwigWintabPINVOKE.WTInfoW(arg0, arg1, SWIGTYPE_p_void.getCPtr(arg2));
    return ret;
  }

  public static SWIGTYPE_p_HCTX WTOpenA(SWIGTYPE_p_HWND arg0, LOGCONTEXTA arg1, int arg2) {
    SWIGTYPE_p_HCTX ret = new SWIGTYPE_p_HCTX(SwigWintabPINVOKE.WTOpenA(SWIGTYPE_p_HWND.getCPtr(arg0), LOGCONTEXTA.getCPtr(arg1), arg2), true);
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_HCTX WTOpenW(SWIGTYPE_p_HWND arg0, LOGCONTEXTW arg1, int arg2) {
    SWIGTYPE_p_HCTX ret = new SWIGTYPE_p_HCTX(SwigWintabPINVOKE.WTOpenW(SWIGTYPE_p_HWND.getCPtr(arg0), LOGCONTEXTW.getCPtr(arg1), arg2), true);
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTClose(SWIGTYPE_p_HCTX arg0) {
    int ret = SwigWintabPINVOKE.WTClose(SWIGTYPE_p_HCTX.getCPtr(arg0));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTPacketsGet(SWIGTYPE_p_HCTX arg0, int arg1, SWIGTYPE_p_void arg2) {
    int ret = SwigWintabPINVOKE.WTPacketsGet(SWIGTYPE_p_HCTX.getCPtr(arg0), arg1, SWIGTYPE_p_void.getCPtr(arg2));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTPacket(SWIGTYPE_p_HCTX arg0, uint arg1, SWIGTYPE_p_void arg2) {
    int ret = SwigWintabPINVOKE.WTPacket(SWIGTYPE_p_HCTX.getCPtr(arg0), arg1, SWIGTYPE_p_void.getCPtr(arg2));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTEnable(SWIGTYPE_p_HCTX arg0, int arg1) {
    int ret = SwigWintabPINVOKE.WTEnable(SWIGTYPE_p_HCTX.getCPtr(arg0), arg1);
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTOverlap(SWIGTYPE_p_HCTX arg0, int arg1) {
    int ret = SwigWintabPINVOKE.WTOverlap(SWIGTYPE_p_HCTX.getCPtr(arg0), arg1);
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTConfig(SWIGTYPE_p_HCTX arg0, SWIGTYPE_p_HWND arg1) {
    int ret = SwigWintabPINVOKE.WTConfig(SWIGTYPE_p_HCTX.getCPtr(arg0), SWIGTYPE_p_HWND.getCPtr(arg1));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTGetA(SWIGTYPE_p_HCTX arg0, LOGCONTEXTA arg1) {
    int ret = SwigWintabPINVOKE.WTGetA(SWIGTYPE_p_HCTX.getCPtr(arg0), LOGCONTEXTA.getCPtr(arg1));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTGetW(SWIGTYPE_p_HCTX arg0, LOGCONTEXTW arg1) {
    int ret = SwigWintabPINVOKE.WTGetW(SWIGTYPE_p_HCTX.getCPtr(arg0), LOGCONTEXTW.getCPtr(arg1));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTSetA(SWIGTYPE_p_HCTX arg0, LOGCONTEXTA arg1) {
    int ret = SwigWintabPINVOKE.WTSetA(SWIGTYPE_p_HCTX.getCPtr(arg0), LOGCONTEXTA.getCPtr(arg1));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTSetW(SWIGTYPE_p_HCTX arg0, LOGCONTEXTW arg1) {
    int ret = SwigWintabPINVOKE.WTSetW(SWIGTYPE_p_HCTX.getCPtr(arg0), LOGCONTEXTW.getCPtr(arg1));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTExtGet(SWIGTYPE_p_HCTX arg0, uint arg1, SWIGTYPE_p_void arg2) {
    int ret = SwigWintabPINVOKE.WTExtGet(SWIGTYPE_p_HCTX.getCPtr(arg0), arg1, SWIGTYPE_p_void.getCPtr(arg2));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTExtSet(SWIGTYPE_p_HCTX arg0, uint arg1, SWIGTYPE_p_void arg2) {
    int ret = SwigWintabPINVOKE.WTExtSet(SWIGTYPE_p_HCTX.getCPtr(arg0), arg1, SWIGTYPE_p_void.getCPtr(arg2));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTSave(SWIGTYPE_p_HCTX arg0, SWIGTYPE_p_void arg1) {
    int ret = SwigWintabPINVOKE.WTSave(SWIGTYPE_p_HCTX.getCPtr(arg0), SWIGTYPE_p_void.getCPtr(arg1));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_HCTX WTRestore(SWIGTYPE_p_HWND arg0, SWIGTYPE_p_void arg1, int arg2) {
    SWIGTYPE_p_HCTX ret = new SWIGTYPE_p_HCTX(SwigWintabPINVOKE.WTRestore(SWIGTYPE_p_HWND.getCPtr(arg0), SWIGTYPE_p_void.getCPtr(arg1), arg2), true);
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTPacketsPeek(SWIGTYPE_p_HCTX arg0, int arg1, SWIGTYPE_p_void arg2) {
    int ret = SwigWintabPINVOKE.WTPacketsPeek(SWIGTYPE_p_HCTX.getCPtr(arg0), arg1, SWIGTYPE_p_void.getCPtr(arg2));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTDataGet(SWIGTYPE_p_HCTX arg0, uint arg1, uint arg2, int arg3, SWIGTYPE_p_void arg4, SWIGTYPE_p_int arg5) {
    int ret = SwigWintabPINVOKE.WTDataGet(SWIGTYPE_p_HCTX.getCPtr(arg0), arg1, arg2, arg3, SWIGTYPE_p_void.getCPtr(arg4), SWIGTYPE_p_int.getCPtr(arg5));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTDataPeek(SWIGTYPE_p_HCTX arg0, uint arg1, uint arg2, int arg3, SWIGTYPE_p_void arg4, SWIGTYPE_p_int arg5) {
    int ret = SwigWintabPINVOKE.WTDataPeek(SWIGTYPE_p_HCTX.getCPtr(arg0), arg1, arg2, arg3, SWIGTYPE_p_void.getCPtr(arg4), SWIGTYPE_p_int.getCPtr(arg5));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTQueueSizeGet(SWIGTYPE_p_HCTX arg0) {
    int ret = SwigWintabPINVOKE.WTQueueSizeGet(SWIGTYPE_p_HCTX.getCPtr(arg0));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTQueueSizeSet(SWIGTYPE_p_HCTX arg0, int arg1) {
    int ret = SwigWintabPINVOKE.WTQueueSizeSet(SWIGTYPE_p_HCTX.getCPtr(arg0), arg1);
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_HMGR WTMgrOpen(SWIGTYPE_p_HWND arg0, uint arg1) {
    SWIGTYPE_p_HMGR ret = new SWIGTYPE_p_HMGR(SwigWintabPINVOKE.WTMgrOpen(SWIGTYPE_p_HWND.getCPtr(arg0), arg1), true);
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTMgrClose(SWIGTYPE_p_HMGR arg0) {
    int ret = SwigWintabPINVOKE.WTMgrClose(SWIGTYPE_p_HMGR.getCPtr(arg0));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTMgrContextEnum(SWIGTYPE_p_HMGR arg0, SWIGTYPE_p_f_HCTX_LPARAM__int arg1, SWIGTYPE_p_LPARAM arg2) {
    int ret = SwigWintabPINVOKE.WTMgrContextEnum(SWIGTYPE_p_HMGR.getCPtr(arg0), SWIGTYPE_p_f_HCTX_LPARAM__int.getCPtr(arg1), SWIGTYPE_p_LPARAM.getCPtr(arg2));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_HWND WTMgrContextOwner(SWIGTYPE_p_HMGR arg0, SWIGTYPE_p_HCTX arg1) {
    SWIGTYPE_p_HWND ret = new SWIGTYPE_p_HWND(SwigWintabPINVOKE.WTMgrContextOwner(SWIGTYPE_p_HMGR.getCPtr(arg0), SWIGTYPE_p_HCTX.getCPtr(arg1)), true);
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_HCTX WTMgrDefContext(SWIGTYPE_p_HMGR arg0, int arg1) {
    SWIGTYPE_p_HCTX ret = new SWIGTYPE_p_HCTX(SwigWintabPINVOKE.WTMgrDefContext(SWIGTYPE_p_HMGR.getCPtr(arg0), arg1), true);
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_HCTX WTMgrDefContextEx(SWIGTYPE_p_HMGR arg0, uint arg1, int arg2) {
    SWIGTYPE_p_HCTX ret = new SWIGTYPE_p_HCTX(SwigWintabPINVOKE.WTMgrDefContextEx(SWIGTYPE_p_HMGR.getCPtr(arg0), arg1, arg2), true);
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint WTMgrDeviceConfig(SWIGTYPE_p_HMGR arg0, uint arg1, SWIGTYPE_p_HWND arg2) {
    uint ret = SwigWintabPINVOKE.WTMgrDeviceConfig(SWIGTYPE_p_HMGR.getCPtr(arg0), arg1, SWIGTYPE_p_HWND.getCPtr(arg2));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTMgrExt(SWIGTYPE_p_HMGR arg0, uint arg1, SWIGTYPE_p_void arg2) {
    int ret = SwigWintabPINVOKE.WTMgrExt(SWIGTYPE_p_HMGR.getCPtr(arg0), arg1, SWIGTYPE_p_void.getCPtr(arg2));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTMgrCsrEnable(SWIGTYPE_p_HMGR arg0, uint arg1, int arg2) {
    int ret = SwigWintabPINVOKE.WTMgrCsrEnable(SWIGTYPE_p_HMGR.getCPtr(arg0), arg1, arg2);
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTMgrCsrButtonMap(SWIGTYPE_p_HMGR arg0, uint arg1, SWIGTYPE_p_unsigned_char arg2, SWIGTYPE_p_unsigned_char arg3) {
    int ret = SwigWintabPINVOKE.WTMgrCsrButtonMap(SWIGTYPE_p_HMGR.getCPtr(arg0), arg1, SWIGTYPE_p_unsigned_char.getCPtr(arg2), SWIGTYPE_p_unsigned_char.getCPtr(arg3));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTMgrCsrPressureBtnMarks(SWIGTYPE_p_HMGR arg0, uint arg1, uint arg2, uint arg3) {
    int ret = SwigWintabPINVOKE.WTMgrCsrPressureBtnMarks(SWIGTYPE_p_HMGR.getCPtr(arg0), arg1, arg2, arg3);
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTMgrCsrPressureResponse(SWIGTYPE_p_HMGR arg0, uint arg1, SWIGTYPE_p_unsigned_int arg2, SWIGTYPE_p_unsigned_int arg3) {
    int ret = SwigWintabPINVOKE.WTMgrCsrPressureResponse(SWIGTYPE_p_HMGR.getCPtr(arg0), arg1, SWIGTYPE_p_unsigned_int.getCPtr(arg2), SWIGTYPE_p_unsigned_int.getCPtr(arg3));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTMgrCsrExt(SWIGTYPE_p_HMGR arg0, uint arg1, uint arg2, SWIGTYPE_p_void arg3) {
    int ret = SwigWintabPINVOKE.WTMgrCsrExt(SWIGTYPE_p_HMGR.getCPtr(arg0), arg1, arg2, SWIGTYPE_p_void.getCPtr(arg3));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTQueuePacketsEx(SWIGTYPE_p_HCTX arg0, SWIGTYPE_p_unsigned_int arg1, SWIGTYPE_p_unsigned_int arg2) {
    int ret = SwigWintabPINVOKE.WTQueuePacketsEx(SWIGTYPE_p_HCTX.getCPtr(arg0), SWIGTYPE_p_unsigned_int.getCPtr(arg1), SWIGTYPE_p_unsigned_int.getCPtr(arg2));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTMgrConfigReplaceExA(SWIGTYPE_p_HMGR arg0, int arg1, string arg2, string arg3) {
    int ret = SwigWintabPINVOKE.WTMgrConfigReplaceExA(SWIGTYPE_p_HMGR.getCPtr(arg0), arg1, arg2, arg3);
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTMgrConfigReplaceExW(SWIGTYPE_p_HMGR arg0, int arg1, SWIGTYPE_p_LPWSTR arg2, string arg3) {
    int ret = SwigWintabPINVOKE.WTMgrConfigReplaceExW(SWIGTYPE_p_HMGR.getCPtr(arg0), arg1, SWIGTYPE_p_LPWSTR.getCPtr(arg2), arg3);
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_HWTHOOK WTMgrPacketHookExA(SWIGTYPE_p_HMGR arg0, int arg1, string arg2, string arg3) {
    SWIGTYPE_p_HWTHOOK ret = new SWIGTYPE_p_HWTHOOK(SwigWintabPINVOKE.WTMgrPacketHookExA(SWIGTYPE_p_HMGR.getCPtr(arg0), arg1, arg2, arg3), true);
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_HWTHOOK WTMgrPacketHookExW(SWIGTYPE_p_HMGR arg0, int arg1, SWIGTYPE_p_LPWSTR arg2, string arg3) {
    SWIGTYPE_p_HWTHOOK ret = new SWIGTYPE_p_HWTHOOK(SwigWintabPINVOKE.WTMgrPacketHookExW(SWIGTYPE_p_HMGR.getCPtr(arg0), arg1, SWIGTYPE_p_LPWSTR.getCPtr(arg2), arg3), true);
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTMgrPacketUnhook(SWIGTYPE_p_HWTHOOK arg0) {
    int ret = SwigWintabPINVOKE.WTMgrPacketUnhook(SWIGTYPE_p_HWTHOOK.getCPtr(arg0));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_LRESULT WTMgrPacketHookNext(SWIGTYPE_p_HWTHOOK arg0, int arg1, SWIGTYPE_p_WPARAM arg2, SWIGTYPE_p_LPARAM arg3) {
    SWIGTYPE_p_LRESULT ret = new SWIGTYPE_p_LRESULT(SwigWintabPINVOKE.WTMgrPacketHookNext(SWIGTYPE_p_HWTHOOK.getCPtr(arg0), arg1, SWIGTYPE_p_WPARAM.getCPtr(arg2), SWIGTYPE_p_LPARAM.getCPtr(arg3)), true);
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WTMgrCsrPressureBtnMarksEx(SWIGTYPE_p_HMGR arg0, uint arg1, SWIGTYPE_p_unsigned_int arg2, SWIGTYPE_p_unsigned_int arg3) {
    int ret = SwigWintabPINVOKE.WTMgrCsrPressureBtnMarksEx(SWIGTYPE_p_HMGR.getCPtr(arg0), arg1, SWIGTYPE_p_unsigned_int.getCPtr(arg2), SWIGTYPE_p_unsigned_int.getCPtr(arg3));
    if (SwigWintabPINVOKE.SWIGPendingException.Pending) throw SwigWintabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly int WT_DEFBASE = SwigWintabPINVOKE.WT_DEFBASE_get();
  public static readonly int WT_MAXOFFSET = SwigWintabPINVOKE.WT_MAXOFFSET_get();
  public static readonly int WT_PACKET = SwigWintabPINVOKE.WT_PACKET_get();
  public static readonly int WT_CTXOPEN = SwigWintabPINVOKE.WT_CTXOPEN_get();
  public static readonly int WT_CTXCLOSE = SwigWintabPINVOKE.WT_CTXCLOSE_get();
  public static readonly int WT_CTXUPDATE = SwigWintabPINVOKE.WT_CTXUPDATE_get();
  public static readonly int WT_CTXOVERLAP = SwigWintabPINVOKE.WT_CTXOVERLAP_get();
  public static readonly int WT_PROXIMITY = SwigWintabPINVOKE.WT_PROXIMITY_get();
  public static readonly int WT_INFOCHANGE = SwigWintabPINVOKE.WT_INFOCHANGE_get();
  public static readonly int WT_CSRCHANGE = SwigWintabPINVOKE.WT_CSRCHANGE_get();
  public static readonly int WT_PACKETEXT = SwigWintabPINVOKE.WT_PACKETEXT_get();
  public static readonly int WT_MAX = SwigWintabPINVOKE.WT_MAX_get();
  public static readonly int PK_CONTEXT = SwigWintabPINVOKE.PK_CONTEXT_get();
  public static readonly int PK_STATUS = SwigWintabPINVOKE.PK_STATUS_get();
  public static readonly int PK_TIME = SwigWintabPINVOKE.PK_TIME_get();
  public static readonly int PK_CHANGED = SwigWintabPINVOKE.PK_CHANGED_get();
  public static readonly int PK_SERIAL_NUMBER = SwigWintabPINVOKE.PK_SERIAL_NUMBER_get();
  public static readonly int PK_CURSOR = SwigWintabPINVOKE.PK_CURSOR_get();
  public static readonly int PK_BUTTONS = SwigWintabPINVOKE.PK_BUTTONS_get();
  public static readonly int PK_X = SwigWintabPINVOKE.PK_X_get();
  public static readonly int PK_Y = SwigWintabPINVOKE.PK_Y_get();
  public static readonly int PK_Z = SwigWintabPINVOKE.PK_Z_get();
  public static readonly int PK_NORMAL_PRESSURE = SwigWintabPINVOKE.PK_NORMAL_PRESSURE_get();
  public static readonly int PK_TANGENT_PRESSURE = SwigWintabPINVOKE.PK_TANGENT_PRESSURE_get();
  public static readonly int PK_ORIENTATION = SwigWintabPINVOKE.PK_ORIENTATION_get();
  public static readonly int PK_ROTATION = SwigWintabPINVOKE.PK_ROTATION_get();
  public static readonly int TU_NONE = SwigWintabPINVOKE.TU_NONE_get();
  public static readonly int TU_INCHES = SwigWintabPINVOKE.TU_INCHES_get();
  public static readonly int TU_CENTIMETERS = SwigWintabPINVOKE.TU_CENTIMETERS_get();
  public static readonly int TU_CIRCLE = SwigWintabPINVOKE.TU_CIRCLE_get();
  public static readonly int SBN_NONE = SwigWintabPINVOKE.SBN_NONE_get();
  public static readonly int SBN_LCLICK = SwigWintabPINVOKE.SBN_LCLICK_get();
  public static readonly int SBN_LDBLCLICK = SwigWintabPINVOKE.SBN_LDBLCLICK_get();
  public static readonly int SBN_LDRAG = SwigWintabPINVOKE.SBN_LDRAG_get();
  public static readonly int SBN_RCLICK = SwigWintabPINVOKE.SBN_RCLICK_get();
  public static readonly int SBN_RDBLCLICK = SwigWintabPINVOKE.SBN_RDBLCLICK_get();
  public static readonly int SBN_RDRAG = SwigWintabPINVOKE.SBN_RDRAG_get();
  public static readonly int SBN_MCLICK = SwigWintabPINVOKE.SBN_MCLICK_get();
  public static readonly int SBN_MDBLCLICK = SwigWintabPINVOKE.SBN_MDBLCLICK_get();
  public static readonly int SBN_MDRAG = SwigWintabPINVOKE.SBN_MDRAG_get();
  public static readonly int SBN_PTCLICK = SwigWintabPINVOKE.SBN_PTCLICK_get();
  public static readonly int SBN_PTDBLCLICK = SwigWintabPINVOKE.SBN_PTDBLCLICK_get();
  public static readonly int SBN_PTDRAG = SwigWintabPINVOKE.SBN_PTDRAG_get();
  public static readonly int SBN_PNCLICK = SwigWintabPINVOKE.SBN_PNCLICK_get();
  public static readonly int SBN_PNDBLCLICK = SwigWintabPINVOKE.SBN_PNDBLCLICK_get();
  public static readonly int SBN_PNDRAG = SwigWintabPINVOKE.SBN_PNDRAG_get();
  public static readonly int SBN_P1CLICK = SwigWintabPINVOKE.SBN_P1CLICK_get();
  public static readonly int SBN_P1DBLCLICK = SwigWintabPINVOKE.SBN_P1DBLCLICK_get();
  public static readonly int SBN_P1DRAG = SwigWintabPINVOKE.SBN_P1DRAG_get();
  public static readonly int SBN_P2CLICK = SwigWintabPINVOKE.SBN_P2CLICK_get();
  public static readonly int SBN_P2DBLCLICK = SwigWintabPINVOKE.SBN_P2DBLCLICK_get();
  public static readonly int SBN_P2DRAG = SwigWintabPINVOKE.SBN_P2DRAG_get();
  public static readonly int SBN_P3CLICK = SwigWintabPINVOKE.SBN_P3CLICK_get();
  public static readonly int SBN_P3DBLCLICK = SwigWintabPINVOKE.SBN_P3DBLCLICK_get();
  public static readonly int SBN_P3DRAG = SwigWintabPINVOKE.SBN_P3DRAG_get();
  public static readonly int HWC_INTEGRATED = SwigWintabPINVOKE.HWC_INTEGRATED_get();
  public static readonly int HWC_TOUCH = SwigWintabPINVOKE.HWC_TOUCH_get();
  public static readonly int HWC_HARDPROX = SwigWintabPINVOKE.HWC_HARDPROX_get();
  public static readonly int HWC_PHYSID_CURSORS = SwigWintabPINVOKE.HWC_PHYSID_CURSORS_get();
  public static readonly int CRC_MULTIMODE = SwigWintabPINVOKE.CRC_MULTIMODE_get();
  public static readonly int CRC_AGGREGATE = SwigWintabPINVOKE.CRC_AGGREGATE_get();
  public static readonly int CRC_INVERT = SwigWintabPINVOKE.CRC_INVERT_get();
  public static readonly int WTI_INTERFACE = SwigWintabPINVOKE.WTI_INTERFACE_get();
  public static readonly int IFC_WINTABID = SwigWintabPINVOKE.IFC_WINTABID_get();
  public static readonly int IFC_SPECVERSION = SwigWintabPINVOKE.IFC_SPECVERSION_get();
  public static readonly int IFC_IMPLVERSION = SwigWintabPINVOKE.IFC_IMPLVERSION_get();
  public static readonly int IFC_NDEVICES = SwigWintabPINVOKE.IFC_NDEVICES_get();
  public static readonly int IFC_NCURSORS = SwigWintabPINVOKE.IFC_NCURSORS_get();
  public static readonly int IFC_NCONTEXTS = SwigWintabPINVOKE.IFC_NCONTEXTS_get();
  public static readonly int IFC_CTXOPTIONS = SwigWintabPINVOKE.IFC_CTXOPTIONS_get();
  public static readonly int IFC_CTXSAVESIZE = SwigWintabPINVOKE.IFC_CTXSAVESIZE_get();
  public static readonly int IFC_NEXTENSIONS = SwigWintabPINVOKE.IFC_NEXTENSIONS_get();
  public static readonly int IFC_NMANAGERS = SwigWintabPINVOKE.IFC_NMANAGERS_get();
  public static readonly int IFC_MAX = SwigWintabPINVOKE.IFC_MAX_get();
  public static readonly int WTI_STATUS = SwigWintabPINVOKE.WTI_STATUS_get();
  public static readonly int STA_CONTEXTS = SwigWintabPINVOKE.STA_CONTEXTS_get();
  public static readonly int STA_SYSCTXS = SwigWintabPINVOKE.STA_SYSCTXS_get();
  public static readonly int STA_PKTRATE = SwigWintabPINVOKE.STA_PKTRATE_get();
  public static readonly int STA_PKTDATA = SwigWintabPINVOKE.STA_PKTDATA_get();
  public static readonly int STA_MANAGERS = SwigWintabPINVOKE.STA_MANAGERS_get();
  public static readonly int STA_SYSTEM = SwigWintabPINVOKE.STA_SYSTEM_get();
  public static readonly int STA_BUTTONUSE = SwigWintabPINVOKE.STA_BUTTONUSE_get();
  public static readonly int STA_SYSBTNUSE = SwigWintabPINVOKE.STA_SYSBTNUSE_get();
  public static readonly int STA_MAX = SwigWintabPINVOKE.STA_MAX_get();
  public static readonly int WTI_DEFCONTEXT = SwigWintabPINVOKE.WTI_DEFCONTEXT_get();
  public static readonly int WTI_DEFSYSCTX = SwigWintabPINVOKE.WTI_DEFSYSCTX_get();
  public static readonly int WTI_DDCTXS = SwigWintabPINVOKE.WTI_DDCTXS_get();
  public static readonly int WTI_DSCTXS = SwigWintabPINVOKE.WTI_DSCTXS_get();
  public static readonly int CTX_NAME = SwigWintabPINVOKE.CTX_NAME_get();
  public static readonly int CTX_OPTIONS = SwigWintabPINVOKE.CTX_OPTIONS_get();
  public static readonly int CTX_STATUS = SwigWintabPINVOKE.CTX_STATUS_get();
  public static readonly int CTX_LOCKS = SwigWintabPINVOKE.CTX_LOCKS_get();
  public static readonly int CTX_MSGBASE = SwigWintabPINVOKE.CTX_MSGBASE_get();
  public static readonly int CTX_DEVICE = SwigWintabPINVOKE.CTX_DEVICE_get();
  public static readonly int CTX_PKTRATE = SwigWintabPINVOKE.CTX_PKTRATE_get();
  public static readonly int CTX_PKTDATA = SwigWintabPINVOKE.CTX_PKTDATA_get();
  public static readonly int CTX_PKTMODE = SwigWintabPINVOKE.CTX_PKTMODE_get();
  public static readonly int CTX_MOVEMASK = SwigWintabPINVOKE.CTX_MOVEMASK_get();
  public static readonly int CTX_BTNDNMASK = SwigWintabPINVOKE.CTX_BTNDNMASK_get();
  public static readonly int CTX_BTNUPMASK = SwigWintabPINVOKE.CTX_BTNUPMASK_get();
  public static readonly int CTX_INORGX = SwigWintabPINVOKE.CTX_INORGX_get();
  public static readonly int CTX_INORGY = SwigWintabPINVOKE.CTX_INORGY_get();
  public static readonly int CTX_INORGZ = SwigWintabPINVOKE.CTX_INORGZ_get();
  public static readonly int CTX_INEXTX = SwigWintabPINVOKE.CTX_INEXTX_get();
  public static readonly int CTX_INEXTY = SwigWintabPINVOKE.CTX_INEXTY_get();
  public static readonly int CTX_INEXTZ = SwigWintabPINVOKE.CTX_INEXTZ_get();
  public static readonly int CTX_OUTORGX = SwigWintabPINVOKE.CTX_OUTORGX_get();
  public static readonly int CTX_OUTORGY = SwigWintabPINVOKE.CTX_OUTORGY_get();
  public static readonly int CTX_OUTORGZ = SwigWintabPINVOKE.CTX_OUTORGZ_get();
  public static readonly int CTX_OUTEXTX = SwigWintabPINVOKE.CTX_OUTEXTX_get();
  public static readonly int CTX_OUTEXTY = SwigWintabPINVOKE.CTX_OUTEXTY_get();
  public static readonly int CTX_OUTEXTZ = SwigWintabPINVOKE.CTX_OUTEXTZ_get();
  public static readonly int CTX_SENSX = SwigWintabPINVOKE.CTX_SENSX_get();
  public static readonly int CTX_SENSY = SwigWintabPINVOKE.CTX_SENSY_get();
  public static readonly int CTX_SENSZ = SwigWintabPINVOKE.CTX_SENSZ_get();
  public static readonly int CTX_SYSMODE = SwigWintabPINVOKE.CTX_SYSMODE_get();
  public static readonly int CTX_SYSORGX = SwigWintabPINVOKE.CTX_SYSORGX_get();
  public static readonly int CTX_SYSORGY = SwigWintabPINVOKE.CTX_SYSORGY_get();
  public static readonly int CTX_SYSEXTX = SwigWintabPINVOKE.CTX_SYSEXTX_get();
  public static readonly int CTX_SYSEXTY = SwigWintabPINVOKE.CTX_SYSEXTY_get();
  public static readonly int CTX_SYSSENSX = SwigWintabPINVOKE.CTX_SYSSENSX_get();
  public static readonly int CTX_SYSSENSY = SwigWintabPINVOKE.CTX_SYSSENSY_get();
  public static readonly int CTX_MAX = SwigWintabPINVOKE.CTX_MAX_get();
  public static readonly int WTI_DEVICES = SwigWintabPINVOKE.WTI_DEVICES_get();
  public static readonly int DVC_NAME = SwigWintabPINVOKE.DVC_NAME_get();
  public static readonly int DVC_HARDWARE = SwigWintabPINVOKE.DVC_HARDWARE_get();
  public static readonly int DVC_NCSRTYPES = SwigWintabPINVOKE.DVC_NCSRTYPES_get();
  public static readonly int DVC_FIRSTCSR = SwigWintabPINVOKE.DVC_FIRSTCSR_get();
  public static readonly int DVC_PKTRATE = SwigWintabPINVOKE.DVC_PKTRATE_get();
  public static readonly int DVC_PKTDATA = SwigWintabPINVOKE.DVC_PKTDATA_get();
  public static readonly int DVC_PKTMODE = SwigWintabPINVOKE.DVC_PKTMODE_get();
  public static readonly int DVC_CSRDATA = SwigWintabPINVOKE.DVC_CSRDATA_get();
  public static readonly int DVC_XMARGIN = SwigWintabPINVOKE.DVC_XMARGIN_get();
  public static readonly int DVC_YMARGIN = SwigWintabPINVOKE.DVC_YMARGIN_get();
  public static readonly int DVC_ZMARGIN = SwigWintabPINVOKE.DVC_ZMARGIN_get();
  public static readonly int DVC_X = SwigWintabPINVOKE.DVC_X_get();
  public static readonly int DVC_Y = SwigWintabPINVOKE.DVC_Y_get();
  public static readonly int DVC_Z = SwigWintabPINVOKE.DVC_Z_get();
  public static readonly int DVC_NPRESSURE = SwigWintabPINVOKE.DVC_NPRESSURE_get();
  public static readonly int DVC_TPRESSURE = SwigWintabPINVOKE.DVC_TPRESSURE_get();
  public static readonly int DVC_ORIENTATION = SwigWintabPINVOKE.DVC_ORIENTATION_get();
  public static readonly int DVC_ROTATION = SwigWintabPINVOKE.DVC_ROTATION_get();
  public static readonly int DVC_PNPID = SwigWintabPINVOKE.DVC_PNPID_get();
  public static readonly int DVC_MAX = SwigWintabPINVOKE.DVC_MAX_get();
  public static readonly int WTI_CURSORS = SwigWintabPINVOKE.WTI_CURSORS_get();
  public static readonly int CSR_NAME = SwigWintabPINVOKE.CSR_NAME_get();
  public static readonly int CSR_ACTIVE = SwigWintabPINVOKE.CSR_ACTIVE_get();
  public static readonly int CSR_PKTDATA = SwigWintabPINVOKE.CSR_PKTDATA_get();
  public static readonly int CSR_BUTTONS = SwigWintabPINVOKE.CSR_BUTTONS_get();
  public static readonly int CSR_BUTTONBITS = SwigWintabPINVOKE.CSR_BUTTONBITS_get();
  public static readonly int CSR_BTNNAMES = SwigWintabPINVOKE.CSR_BTNNAMES_get();
  public static readonly int CSR_BUTTONMAP = SwigWintabPINVOKE.CSR_BUTTONMAP_get();
  public static readonly int CSR_SYSBTNMAP = SwigWintabPINVOKE.CSR_SYSBTNMAP_get();
  public static readonly int CSR_NPBUTTON = SwigWintabPINVOKE.CSR_NPBUTTON_get();
  public static readonly int CSR_NPBTNMARKS = SwigWintabPINVOKE.CSR_NPBTNMARKS_get();
  public static readonly int CSR_NPRESPONSE = SwigWintabPINVOKE.CSR_NPRESPONSE_get();
  public static readonly int CSR_TPBUTTON = SwigWintabPINVOKE.CSR_TPBUTTON_get();
  public static readonly int CSR_TPBTNMARKS = SwigWintabPINVOKE.CSR_TPBTNMARKS_get();
  public static readonly int CSR_TPRESPONSE = SwigWintabPINVOKE.CSR_TPRESPONSE_get();
  public static readonly int CSR_PHYSID = SwigWintabPINVOKE.CSR_PHYSID_get();
  public static readonly int CSR_MODE = SwigWintabPINVOKE.CSR_MODE_get();
  public static readonly int CSR_MINPKTDATA = SwigWintabPINVOKE.CSR_MINPKTDATA_get();
  public static readonly int CSR_MINBUTTONS = SwigWintabPINVOKE.CSR_MINBUTTONS_get();
  public static readonly int CSR_CAPABILITIES = SwigWintabPINVOKE.CSR_CAPABILITIES_get();
  public static readonly int CSR_TYPE = SwigWintabPINVOKE.CSR_TYPE_get();
  public static readonly int CSR_MAX = SwigWintabPINVOKE.CSR_MAX_get();
  public static readonly int WTI_EXTENSIONS = SwigWintabPINVOKE.WTI_EXTENSIONS_get();
  public static readonly int EXT_NAME = SwigWintabPINVOKE.EXT_NAME_get();
  public static readonly int EXT_TAG = SwigWintabPINVOKE.EXT_TAG_get();
  public static readonly int EXT_MASK = SwigWintabPINVOKE.EXT_MASK_get();
  public static readonly int EXT_SIZE = SwigWintabPINVOKE.EXT_SIZE_get();
  public static readonly int EXT_AXES = SwigWintabPINVOKE.EXT_AXES_get();
  public static readonly int EXT_DEFAULT = SwigWintabPINVOKE.EXT_DEFAULT_get();
  public static readonly int EXT_DEFCONTEXT = SwigWintabPINVOKE.EXT_DEFCONTEXT_get();
  public static readonly int EXT_DEFSYSCTX = SwigWintabPINVOKE.EXT_DEFSYSCTX_get();
  public static readonly int EXT_CURSORS = SwigWintabPINVOKE.EXT_CURSORS_get();
  public static readonly int EXT_DEVICES = SwigWintabPINVOKE.EXT_DEVICES_get();
  public static readonly int EXT_MAX = SwigWintabPINVOKE.EXT_MAX_get();
  public static readonly int LCNAMELEN = SwigWintabPINVOKE.LCNAMELEN_get();
  public static readonly int LC_NAMELEN = SwigWintabPINVOKE.LC_NAMELEN_get();
  public static readonly int CXO_SYSTEM = SwigWintabPINVOKE.CXO_SYSTEM_get();
  public static readonly int CXO_PEN = SwigWintabPINVOKE.CXO_PEN_get();
  public static readonly int CXO_MESSAGES = SwigWintabPINVOKE.CXO_MESSAGES_get();
  public static readonly int CXO_MARGIN = SwigWintabPINVOKE.CXO_MARGIN_get();
  public static readonly int CXO_MGNINSIDE = SwigWintabPINVOKE.CXO_MGNINSIDE_get();
  public static readonly int CXO_CSRMESSAGES = SwigWintabPINVOKE.CXO_CSRMESSAGES_get();
  public static readonly int CXS_DISABLED = SwigWintabPINVOKE.CXS_DISABLED_get();
  public static readonly int CXS_OBSCURED = SwigWintabPINVOKE.CXS_OBSCURED_get();
  public static readonly int CXS_ONTOP = SwigWintabPINVOKE.CXS_ONTOP_get();
  public static readonly int CXL_INSIZE = SwigWintabPINVOKE.CXL_INSIZE_get();
  public static readonly int CXL_INASPECT = SwigWintabPINVOKE.CXL_INASPECT_get();
  public static readonly int CXL_SENSITIVITY = SwigWintabPINVOKE.CXL_SENSITIVITY_get();
  public static readonly int CXL_MARGIN = SwigWintabPINVOKE.CXL_MARGIN_get();
  public static readonly int CXL_SYSOUT = SwigWintabPINVOKE.CXL_SYSOUT_get();
  public static readonly int TPS_PROXIMITY = SwigWintabPINVOKE.TPS_PROXIMITY_get();
  public static readonly int TPS_QUEUE_ERR = SwigWintabPINVOKE.TPS_QUEUE_ERR_get();
  public static readonly int TPS_MARGIN = SwigWintabPINVOKE.TPS_MARGIN_get();
  public static readonly int TPS_GRAB = SwigWintabPINVOKE.TPS_GRAB_get();
  public static readonly int TPS_INVERT = SwigWintabPINVOKE.TPS_INVERT_get();
  public static readonly int TBN_NONE = SwigWintabPINVOKE.TBN_NONE_get();
  public static readonly int TBN_UP = SwigWintabPINVOKE.TBN_UP_get();
  public static readonly int TBN_DOWN = SwigWintabPINVOKE.TBN_DOWN_get();
  public static readonly int WTDC_NONE = SwigWintabPINVOKE.WTDC_NONE_get();
  public static readonly int WTDC_CANCEL = SwigWintabPINVOKE.WTDC_CANCEL_get();
  public static readonly int WTDC_OK = SwigWintabPINVOKE.WTDC_OK_get();
  public static readonly int WTDC_RESTART = SwigWintabPINVOKE.WTDC_RESTART_get();
  public static readonly int WTH_PLAYBACK = SwigWintabPINVOKE.WTH_PLAYBACK_get();
  public static readonly int WTH_RECORD = SwigWintabPINVOKE.WTH_RECORD_get();
  public static readonly int WTHC_GETLPLPFN = SwigWintabPINVOKE.WTHC_GETLPLPFN_get();
  public static readonly int WTHC_LPLPFNNEXT = SwigWintabPINVOKE.WTHC_LPLPFNNEXT_get();
  public static readonly int WTHC_LPFNNEXT = SwigWintabPINVOKE.WTHC_LPFNNEXT_get();
  public static readonly int WTHC_ACTION = SwigWintabPINVOKE.WTHC_ACTION_get();
  public static readonly int WTHC_GETNEXT = SwigWintabPINVOKE.WTHC_GETNEXT_get();
  public static readonly int WTHC_SKIP = SwigWintabPINVOKE.WTHC_SKIP_get();
  public static readonly int PKEXT_ABSOLUTE = SwigWintabPINVOKE.PKEXT_ABSOLUTE_get();
  public static readonly int PKEXT_RELATIVE = SwigWintabPINVOKE.PKEXT_RELATIVE_get();
  public static readonly int WTX_OBT = SwigWintabPINVOKE.WTX_OBT_get();
  public static readonly int WTX_FKEYS = SwigWintabPINVOKE.WTX_FKEYS_get();
  public static readonly int WTX_TILT = SwigWintabPINVOKE.WTX_TILT_get();
  public static readonly int WTX_CSRMASK = SwigWintabPINVOKE.WTX_CSRMASK_get();
  public static readonly int WTX_XBTNMASK = SwigWintabPINVOKE.WTX_XBTNMASK_get();
  public static readonly int WTX_EXPKEYS = SwigWintabPINVOKE.WTX_EXPKEYS_get();
  public static readonly int WTX_TOUCHSTRIP = SwigWintabPINVOKE.WTX_TOUCHSTRIP_get();
  public static readonly int WTX_TOUCHRING = SwigWintabPINVOKE.WTX_TOUCHRING_get();
  public static readonly int WTX_EXPKEYS2 = SwigWintabPINVOKE.WTX_EXPKEYS2_get();
  public static readonly int TABLET_PROPERTY_CONTROLCOUNT = SwigWintabPINVOKE.TABLET_PROPERTY_CONTROLCOUNT_get();
  public static readonly int TABLET_PROPERTY_FUNCCOUNT = SwigWintabPINVOKE.TABLET_PROPERTY_FUNCCOUNT_get();
  public static readonly int TABLET_PROPERTY_AVAILABLE = SwigWintabPINVOKE.TABLET_PROPERTY_AVAILABLE_get();
  public static readonly int TABLET_PROPERTY_MIN = SwigWintabPINVOKE.TABLET_PROPERTY_MIN_get();
  public static readonly int TABLET_PROPERTY_MAX = SwigWintabPINVOKE.TABLET_PROPERTY_MAX_get();
  public static readonly int TABLET_PROPERTY_OVERRIDE = SwigWintabPINVOKE.TABLET_PROPERTY_OVERRIDE_get();
  public static readonly int TABLET_PROPERTY_OVERRIDE_NAME = SwigWintabPINVOKE.TABLET_PROPERTY_OVERRIDE_NAME_get();
  public static readonly int TABLET_PROPERTY_OVERRIDE_ICON = SwigWintabPINVOKE.TABLET_PROPERTY_OVERRIDE_ICON_get();
  public static readonly int TABLET_PROPERTY_ICON_WIDTH = SwigWintabPINVOKE.TABLET_PROPERTY_ICON_WIDTH_get();
  public static readonly int TABLET_PROPERTY_ICON_HEIGHT = SwigWintabPINVOKE.TABLET_PROPERTY_ICON_HEIGHT_get();
  public static readonly int TABLET_PROPERTY_ICON_FORMAT = SwigWintabPINVOKE.TABLET_PROPERTY_ICON_FORMAT_get();
  public static readonly int TABLET_PROPERTY_LOCATION = SwigWintabPINVOKE.TABLET_PROPERTY_LOCATION_get();
  public static readonly int TABLET_ICON_FMT_NONE = SwigWintabPINVOKE.TABLET_ICON_FMT_NONE_get();
  public static readonly int TABLET_ICON_FMT_4BPP_GRAY = SwigWintabPINVOKE.TABLET_ICON_FMT_4BPP_GRAY_get();
  public static readonly int TABLET_LOC_LEFT = SwigWintabPINVOKE.TABLET_LOC_LEFT_get();
  public static readonly int TABLET_LOC_RIGHT = SwigWintabPINVOKE.TABLET_LOC_RIGHT_get();
  public static readonly int TABLET_LOC_TOP = SwigWintabPINVOKE.TABLET_LOC_TOP_get();
  public static readonly int TABLET_LOC_BOTTOM = SwigWintabPINVOKE.TABLET_LOC_BOTTOM_get();
  public static readonly int TABLET_LOC_TRANSDUCER = SwigWintabPINVOKE.TABLET_LOC_TRANSDUCER_get();
  public static readonly int ORD_WTInfoA = SwigWintabPINVOKE.ORD_WTInfoA_get();
  public static readonly int ORD_WTInfoW = SwigWintabPINVOKE.ORD_WTInfoW_get();
  public static readonly int ORD_WTInfo = SwigWintabPINVOKE.ORD_WTInfo_get();
  public static readonly int ORD_WTOpenA = SwigWintabPINVOKE.ORD_WTOpenA_get();
  public static readonly int ORD_WTOpenW = SwigWintabPINVOKE.ORD_WTOpenW_get();
  public static readonly int ORD_WTOpen = SwigWintabPINVOKE.ORD_WTOpen_get();
  public static readonly int ORD_WTClose = SwigWintabPINVOKE.ORD_WTClose_get();
  public static readonly int ORD_WTPacketsGet = SwigWintabPINVOKE.ORD_WTPacketsGet_get();
  public static readonly int ORD_WTPacket = SwigWintabPINVOKE.ORD_WTPacket_get();
  public static readonly int ORD_WTEnable = SwigWintabPINVOKE.ORD_WTEnable_get();
  public static readonly int ORD_WTOverlap = SwigWintabPINVOKE.ORD_WTOverlap_get();
  public static readonly int ORD_WTConfig = SwigWintabPINVOKE.ORD_WTConfig_get();
  public static readonly int ORD_WTGetA = SwigWintabPINVOKE.ORD_WTGetA_get();
  public static readonly int ORD_WTGetW = SwigWintabPINVOKE.ORD_WTGetW_get();
  public static readonly int ORD_WTGet = SwigWintabPINVOKE.ORD_WTGet_get();
  public static readonly int ORD_WTSetA = SwigWintabPINVOKE.ORD_WTSetA_get();
  public static readonly int ORD_WTSetW = SwigWintabPINVOKE.ORD_WTSetW_get();
  public static readonly int ORD_WTSet = SwigWintabPINVOKE.ORD_WTSet_get();
  public static readonly int ORD_WTExtGet = SwigWintabPINVOKE.ORD_WTExtGet_get();
  public static readonly int ORD_WTExtSet = SwigWintabPINVOKE.ORD_WTExtSet_get();
  public static readonly int ORD_WTSave = SwigWintabPINVOKE.ORD_WTSave_get();
  public static readonly int ORD_WTRestore = SwigWintabPINVOKE.ORD_WTRestore_get();
  public static readonly int ORD_WTPacketsPeek = SwigWintabPINVOKE.ORD_WTPacketsPeek_get();
  public static readonly int ORD_WTDataGet = SwigWintabPINVOKE.ORD_WTDataGet_get();
  public static readonly int ORD_WTDataPeek = SwigWintabPINVOKE.ORD_WTDataPeek_get();
  public static readonly int ORD_WTQueueSizeGet = SwigWintabPINVOKE.ORD_WTQueueSizeGet_get();
  public static readonly int ORD_WTQueueSizeSet = SwigWintabPINVOKE.ORD_WTQueueSizeSet_get();
  public static readonly int ORD_WTMgrOpen = SwigWintabPINVOKE.ORD_WTMgrOpen_get();
  public static readonly int ORD_WTMgrClose = SwigWintabPINVOKE.ORD_WTMgrClose_get();
  public static readonly int ORD_WTMgrContextEnum = SwigWintabPINVOKE.ORD_WTMgrContextEnum_get();
  public static readonly int ORD_WTMgrContextOwner = SwigWintabPINVOKE.ORD_WTMgrContextOwner_get();
  public static readonly int ORD_WTMgrDefContext = SwigWintabPINVOKE.ORD_WTMgrDefContext_get();
  public static readonly int ORD_WTMgrDefContextEx = SwigWintabPINVOKE.ORD_WTMgrDefContextEx_get();
  public static readonly int ORD_WTMgrDeviceConfig = SwigWintabPINVOKE.ORD_WTMgrDeviceConfig_get();
  public static readonly int ORD_WTMgrExt = SwigWintabPINVOKE.ORD_WTMgrExt_get();
  public static readonly int ORD_WTMgrCsrEnable = SwigWintabPINVOKE.ORD_WTMgrCsrEnable_get();
  public static readonly int ORD_WTMgrCsrButtonMap = SwigWintabPINVOKE.ORD_WTMgrCsrButtonMap_get();
  public static readonly int ORD_WTMgrCsrPressureBtnMarks = SwigWintabPINVOKE.ORD_WTMgrCsrPressureBtnMarks_get();
  public static readonly int ORD_WTMgrCsrPressureResponse = SwigWintabPINVOKE.ORD_WTMgrCsrPressureResponse_get();
  public static readonly int ORD_WTMgrCsrExt = SwigWintabPINVOKE.ORD_WTMgrCsrExt_get();
  public static readonly int ORD_WTQueuePacketsEx = SwigWintabPINVOKE.ORD_WTQueuePacketsEx_get();
  public static readonly int ORD_WTMgrConfigReplaceExA = SwigWintabPINVOKE.ORD_WTMgrConfigReplaceExA_get();
  public static readonly int ORD_WTMgrConfigReplaceExW = SwigWintabPINVOKE.ORD_WTMgrConfigReplaceExW_get();
  public static readonly int ORD_WTMgrConfigReplaceEx = SwigWintabPINVOKE.ORD_WTMgrConfigReplaceEx_get();
  public static readonly int ORD_WTMgrPacketHookExA = SwigWintabPINVOKE.ORD_WTMgrPacketHookExA_get();
  public static readonly int ORD_WTMgrPacketHookExW = SwigWintabPINVOKE.ORD_WTMgrPacketHookExW_get();
  public static readonly int ORD_WTMgrPacketHookEx = SwigWintabPINVOKE.ORD_WTMgrPacketHookEx_get();
  public static readonly int ORD_WTMgrPacketUnhook = SwigWintabPINVOKE.ORD_WTMgrPacketUnhook_get();
  public static readonly int ORD_WTMgrPacketHookNext = SwigWintabPINVOKE.ORD_WTMgrPacketHookNext_get();
  public static readonly int ORD_WTMgrCsrPressureBtnMarksEx = SwigWintabPINVOKE.ORD_WTMgrCsrPressureBtnMarksEx_get();
  public static readonly int PACKETDATA = SwigWintabPINVOKE.PACKETDATA_get();
  public static readonly int PACKETMODE = SwigWintabPINVOKE.PACKETMODE_get();
  public static readonly int PACKETEXPKEYS = SwigWintabPINVOKE.PACKETEXPKEYS_get();
  public static readonly int PACKETTOUCHSTRIP = SwigWintabPINVOKE.PACKETTOUCHSTRIP_get();
  public static readonly int PACKETTOUCHRING = SwigWintabPINVOKE.PACKETTOUCHRING_get();
  public static readonly int __DATA = SwigWintabPINVOKE.__DATA_get();
  public static readonly int __MODE = SwigWintabPINVOKE.__MODE_get();
}

}
namespace Swig {

public class SWIGTYPE_p_HMGR {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_HMGR(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_HMGR() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_HMGR obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace Swig {

public class SWIGTYPE_p_LRESULT {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_LRESULT(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_LRESULT() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_LRESULT obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace Swig {

public class SWIGTYPE_p_LPWSTR {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_LPWSTR(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_LPWSTR() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_LPWSTR obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace Swig {

public class SWIGTYPE_p_LPARAM {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_LPARAM(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_LPARAM() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_LPARAM obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace Swig {

public class SWIGTYPE_p_unsigned_char {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_unsigned_char(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_unsigned_char() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_unsigned_char obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace Swig {

public class SWIGTYPE_p_WCHAR {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_WCHAR(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_WCHAR() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_WCHAR obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace Swig {

public class SWIGTYPE_p_int {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_int(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_int() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_int obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace Swig {

public class SWIGTYPE_p_unsigned_int {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_unsigned_int(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_unsigned_int() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_unsigned_int obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace Swig {

public class SWIGTYPE_p_WPARAM {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_WPARAM(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_WPARAM() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_WPARAM obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace Swig {

public class SWIGTYPE_p_void {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_void(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_void() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_void obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace Swig {

public class SWIGTYPE_p_HCTX {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_HCTX(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_HCTX() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_HCTX obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace Swig {

public class SWIGTYPE_p_HWTHOOK {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_HWTHOOK(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_HWTHOOK() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_HWTHOOK obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace Swig {

public class SWIGTYPE_p_f_HCTX_LPARAM__int {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_f_HCTX_LPARAM__int(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_f_HCTX_LPARAM__int() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_f_HCTX_LPARAM__int obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace Swig {

public class SWIGTYPE_p_HWND {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_HWND(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_HWND() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_HWND obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
