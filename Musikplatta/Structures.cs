// <auto-generated/>

namespace SharpWintab.Wintab
{
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>AXIS</unmanaged>
    /// <unmanaged-short>AXIS</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct Axis
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>axMin</unmanaged>
        /// <unmanaged-short>axMin</unmanaged-short>
        public System.Int32 AxMin;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>axMax</unmanaged>
        /// <unmanaged-short>axMax</unmanaged-short>
        public System.Int32 AxMax;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>axUnits</unmanaged>
        /// <unmanaged-short>axUnits</unmanaged-short>
        public System.UInt32 AxUnits;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>axResolution</unmanaged>
        /// <unmanaged-short>axResolution</unmanaged-short>
        public System.Int32 AxResolution;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>EXPKEYSDATA</unmanaged>
    /// <unmanaged-short>EXPKEYSDATA</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct Expkeysdata
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>nTablet</unmanaged>
        /// <unmanaged-short>nTablet</unmanaged-short>
        public System.Byte NTablet;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>nControl</unmanaged>
        /// <unmanaged-short>nControl</unmanaged-short>
        public System.Byte NControl;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>nLocation</unmanaged>
        /// <unmanaged-short>nLocation</unmanaged-short>
        public System.Byte NLocation;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>nReserved</unmanaged>
        /// <unmanaged-short>nReserved</unmanaged-short>
        public System.Byte NReserved;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>nState</unmanaged>
        /// <unmanaged-short>nState</unmanaged-short>
        public System.Int32 NState;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>EXTENSIONBASE</unmanaged>
    /// <unmanaged-short>EXTENSIONBASE</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct Extensionbase
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>nContext</unmanaged>
        /// <unmanaged-short>nContext</unmanaged-short>
        public System.IntPtr NContext;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>nStatus</unmanaged>
        /// <unmanaged-short>nStatus</unmanaged-short>
        public System.UInt32 NStatus;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>nTime</unmanaged>
        /// <unmanaged-short>nTime</unmanaged-short>
        public System.Int32 NTime;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>nSerialNumber</unmanaged>
        /// <unmanaged-short>nSerialNumber</unmanaged-short>
        public System.UInt32 NSerialNumber;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>EXTPROPERTY</unmanaged>
    /// <unmanaged-short>EXTPROPERTY</unmanaged-short>
    public partial struct Extproperty
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>version</unmanaged>
        /// <unmanaged-short>version</unmanaged-short>
        public System.Byte Version;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>tabletIndex</unmanaged>
        /// <unmanaged-short>tabletIndex</unmanaged-short>
        public System.Byte TabletIndex;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>controlIndex</unmanaged>
        /// <unmanaged-short>controlIndex</unmanaged-short>
        public System.Byte ControlIndex;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>functionIndex</unmanaged>
        /// <unmanaged-short>functionIndex</unmanaged-short>
        public System.Byte FunctionIndex;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>propertyID</unmanaged>
        /// <unmanaged-short>propertyID</unmanaged-short>
        public System.UInt16 PropertyID;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>reserved</unmanaged>
        /// <unmanaged-short>reserved</unmanaged-short>
        public System.UInt16 Reserved;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>dataSize</unmanaged>
        /// <unmanaged-short>dataSize</unmanaged-short>
        public System.Int32 DataSize;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>data</unmanaged>
        /// <unmanaged-short>data</unmanaged-short>
        public System.Byte[] Data
        {
            get => _Data ?? (_Data = new System.Byte[1]);
            private set => _Data = value;
        }

        internal System.Byte[] _Data;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public System.Byte Version;
            public System.Byte TabletIndex;
            public System.Byte ControlIndex;
            public System.Byte FunctionIndex;
            public System.UInt16 PropertyID;
            public System.UInt16 Reserved;
            public System.Int32 DataSize;
            public System.Byte Data;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            Version = @ref.Version;
            TabletIndex = @ref.TabletIndex;
            ControlIndex = @ref.ControlIndex;
            FunctionIndex = @ref.FunctionIndex;
            PropertyID = @ref.PropertyID;
            Reserved = @ref.Reserved;
            DataSize = @ref.DataSize;
            fixed (void *__to = &Data[0], __from = &@ref.Data)
                SharpGen.Runtime.MemoryHelpers.CopyMemory((System.IntPtr)__to, (System.IntPtr)__from, 1 * sizeof (System.Byte));
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Version = Version;
            @ref.TabletIndex = TabletIndex;
            @ref.ControlIndex = ControlIndex;
            @ref.FunctionIndex = FunctionIndex;
            @ref.PropertyID = PropertyID;
            @ref.Reserved = Reserved;
            @ref.DataSize = DataSize;
            fixed (void *__from = &Data[0], __to = &@ref.Data)
                SharpGen.Runtime.MemoryHelpers.CopyMemory((System.IntPtr)__to, (System.IntPtr)__from, 1 * sizeof (System.Byte));
        }
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>HCTX__</unmanaged>
    /// <unmanaged-short>HCTX__</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct Hctx
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>unused</unmanaged>
        /// <unmanaged-short>unused</unmanaged-short>
        public System.Int32 Unused;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>HMGR__</unmanaged>
    /// <unmanaged-short>HMGR__</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct Hmgr
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>unused</unmanaged>
        /// <unmanaged-short>unused</unmanaged-short>
        public System.Int32 Unused;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>HWTHOOK__</unmanaged>
    /// <unmanaged-short>HWTHOOK__</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct Hwthook
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>unused</unmanaged>
        /// <unmanaged-short>unused</unmanaged-short>
        public System.Int32 Unused;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>LOGCONTEXTA</unmanaged>
    /// <unmanaged-short>LOGCONTEXTA</unmanaged-short>
    public partial struct Logcontexta
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcName</unmanaged>
        /// <unmanaged-short>lcName</unmanaged-short>
        public System.String LcName;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcOptions</unmanaged>
        /// <unmanaged-short>lcOptions</unmanaged-short>
        public System.UInt32 LcOptions;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcStatus</unmanaged>
        /// <unmanaged-short>lcStatus</unmanaged-short>
        public System.UInt32 LcStatus;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcLocks</unmanaged>
        /// <unmanaged-short>lcLocks</unmanaged-short>
        public System.UInt32 LcLocks;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcMsgBase</unmanaged>
        /// <unmanaged-short>lcMsgBase</unmanaged-short>
        public System.UInt32 LcMsgBase;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcDevice</unmanaged>
        /// <unmanaged-short>lcDevice</unmanaged-short>
        public System.UInt32 LcDevice;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcPktRate</unmanaged>
        /// <unmanaged-short>lcPktRate</unmanaged-short>
        public System.UInt32 LcPktRate;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcPktData</unmanaged>
        /// <unmanaged-short>lcPktData</unmanaged-short>
        public System.Int32 LcPktData;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcPktMode</unmanaged>
        /// <unmanaged-short>lcPktMode</unmanaged-short>
        public System.Int32 LcPktMode;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcMoveMask</unmanaged>
        /// <unmanaged-short>lcMoveMask</unmanaged-short>
        public System.Int32 LcMoveMask;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcBtnDnMask</unmanaged>
        /// <unmanaged-short>lcBtnDnMask</unmanaged-short>
        public System.Int32 LcBtnDnMask;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcBtnUpMask</unmanaged>
        /// <unmanaged-short>lcBtnUpMask</unmanaged-short>
        public System.Int32 LcBtnUpMask;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcInOrgX</unmanaged>
        /// <unmanaged-short>lcInOrgX</unmanaged-short>
        public System.Int32 LcInOrgX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcInOrgY</unmanaged>
        /// <unmanaged-short>lcInOrgY</unmanaged-short>
        public System.Int32 LcInOrgY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcInOrgZ</unmanaged>
        /// <unmanaged-short>lcInOrgZ</unmanaged-short>
        public System.Int32 LcInOrgZ;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcInExtX</unmanaged>
        /// <unmanaged-short>lcInExtX</unmanaged-short>
        public System.Int32 LcInExtX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcInExtY</unmanaged>
        /// <unmanaged-short>lcInExtY</unmanaged-short>
        public System.Int32 LcInExtY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcInExtZ</unmanaged>
        /// <unmanaged-short>lcInExtZ</unmanaged-short>
        public System.Int32 LcInExtZ;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcOutOrgX</unmanaged>
        /// <unmanaged-short>lcOutOrgX</unmanaged-short>
        public System.Int32 LcOutOrgX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcOutOrgY</unmanaged>
        /// <unmanaged-short>lcOutOrgY</unmanaged-short>
        public System.Int32 LcOutOrgY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcOutOrgZ</unmanaged>
        /// <unmanaged-short>lcOutOrgZ</unmanaged-short>
        public System.Int32 LcOutOrgZ;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcOutExtX</unmanaged>
        /// <unmanaged-short>lcOutExtX</unmanaged-short>
        public System.Int32 LcOutExtX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcOutExtY</unmanaged>
        /// <unmanaged-short>lcOutExtY</unmanaged-short>
        public System.Int32 LcOutExtY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcOutExtZ</unmanaged>
        /// <unmanaged-short>lcOutExtZ</unmanaged-short>
        public System.Int32 LcOutExtZ;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcSensX</unmanaged>
        /// <unmanaged-short>lcSensX</unmanaged-short>
        public System.Int32 LcSensX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcSensY</unmanaged>
        /// <unmanaged-short>lcSensY</unmanaged-short>
        public System.Int32 LcSensY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcSensZ</unmanaged>
        /// <unmanaged-short>lcSensZ</unmanaged-short>
        public System.Int32 LcSensZ;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcSysMode</unmanaged>
        /// <unmanaged-short>lcSysMode</unmanaged-short>
        public SharpGen.Runtime.Win32.RawBool LcSysMode;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcSysOrgX</unmanaged>
        /// <unmanaged-short>lcSysOrgX</unmanaged-short>
        public System.Int32 LcSysOrgX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcSysOrgY</unmanaged>
        /// <unmanaged-short>lcSysOrgY</unmanaged-short>
        public System.Int32 LcSysOrgY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcSysExtX</unmanaged>
        /// <unmanaged-short>lcSysExtX</unmanaged-short>
        public System.Int32 LcSysExtX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcSysExtY</unmanaged>
        /// <unmanaged-short>lcSysExtY</unmanaged-short>
        public System.Int32 LcSysExtY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcSysSensX</unmanaged>
        /// <unmanaged-short>lcSysSensX</unmanaged-short>
        public System.Int32 LcSysSensX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcSysSensY</unmanaged>
        /// <unmanaged-short>lcSysSensY</unmanaged-short>
        public System.Int32 LcSysSensY;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public System.Byte LcName;
            public System.Byte __LcName1;
            public System.Byte __LcName2;
            public System.Byte __LcName3;
            public System.Byte __LcName4;
            public System.Byte __LcName5;
            public System.Byte __LcName6;
            public System.Byte __LcName7;
            public System.Byte __LcName8;
            public System.Byte __LcName9;
            public System.Byte __LcName10;
            public System.Byte __LcName11;
            public System.Byte __LcName12;
            public System.Byte __LcName13;
            public System.Byte __LcName14;
            public System.Byte __LcName15;
            public System.Byte __LcName16;
            public System.Byte __LcName17;
            public System.Byte __LcName18;
            public System.Byte __LcName19;
            public System.Byte __LcName20;
            public System.Byte __LcName21;
            public System.Byte __LcName22;
            public System.Byte __LcName23;
            public System.Byte __LcName24;
            public System.Byte __LcName25;
            public System.Byte __LcName26;
            public System.Byte __LcName27;
            public System.Byte __LcName28;
            public System.Byte __LcName29;
            public System.Byte __LcName30;
            public System.Byte __LcName31;
            public System.Byte __LcName32;
            public System.Byte __LcName33;
            public System.Byte __LcName34;
            public System.Byte __LcName35;
            public System.Byte __LcName36;
            public System.Byte __LcName37;
            public System.Byte __LcName38;
            public System.Byte __LcName39;
            public System.UInt32 LcOptions;
            public System.UInt32 LcStatus;
            public System.UInt32 LcLocks;
            public System.UInt32 LcMsgBase;
            public System.UInt32 LcDevice;
            public System.UInt32 LcPktRate;
            public System.Int32 LcPktData;
            public System.Int32 LcPktMode;
            public System.Int32 LcMoveMask;
            public System.Int32 LcBtnDnMask;
            public System.Int32 LcBtnUpMask;
            public System.Int32 LcInOrgX;
            public System.Int32 LcInOrgY;
            public System.Int32 LcInOrgZ;
            public System.Int32 LcInExtX;
            public System.Int32 LcInExtY;
            public System.Int32 LcInExtZ;
            public System.Int32 LcOutOrgX;
            public System.Int32 LcOutOrgY;
            public System.Int32 LcOutOrgZ;
            public System.Int32 LcOutExtX;
            public System.Int32 LcOutExtY;
            public System.Int32 LcOutExtZ;
            public System.Int32 LcSensX;
            public System.Int32 LcSensY;
            public System.Int32 LcSensZ;
            public SharpGen.Runtime.Win32.RawBool LcSysMode;
            public System.Int32 LcSysOrgX;
            public System.Int32 LcSysOrgY;
            public System.Int32 LcSysExtX;
            public System.Int32 LcSysExtY;
            public System.Int32 LcSysSensX;
            public System.Int32 LcSysSensY;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            fixed (void *__ptr = &@ref.LcName)
                LcName = SharpGen.Runtime.StringHelpers.PtrToStringAnsi((System.IntPtr)__ptr, 39);
            LcOptions = @ref.LcOptions;
            LcStatus = @ref.LcStatus;
            LcLocks = @ref.LcLocks;
            LcMsgBase = @ref.LcMsgBase;
            LcDevice = @ref.LcDevice;
            LcPktRate = @ref.LcPktRate;
            LcPktData = @ref.LcPktData;
            LcPktMode = @ref.LcPktMode;
            LcMoveMask = @ref.LcMoveMask;
            LcBtnDnMask = @ref.LcBtnDnMask;
            LcBtnUpMask = @ref.LcBtnUpMask;
            LcInOrgX = @ref.LcInOrgX;
            LcInOrgY = @ref.LcInOrgY;
            LcInOrgZ = @ref.LcInOrgZ;
            LcInExtX = @ref.LcInExtX;
            LcInExtY = @ref.LcInExtY;
            LcInExtZ = @ref.LcInExtZ;
            LcOutOrgX = @ref.LcOutOrgX;
            LcOutOrgY = @ref.LcOutOrgY;
            LcOutOrgZ = @ref.LcOutOrgZ;
            LcOutExtX = @ref.LcOutExtX;
            LcOutExtY = @ref.LcOutExtY;
            LcOutExtZ = @ref.LcOutExtZ;
            LcSensX = @ref.LcSensX;
            LcSensY = @ref.LcSensY;
            LcSensZ = @ref.LcSensZ;
            LcSysMode = @ref.LcSysMode;
            LcSysOrgX = @ref.LcSysOrgX;
            LcSysOrgY = @ref.LcSysOrgY;
            LcSysExtX = @ref.LcSysExtX;
            LcSysExtY = @ref.LcSysExtY;
            LcSysSensX = @ref.LcSysSensX;
            LcSysSensY = @ref.LcSysSensY;
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            {
                int LcName_length = System.Math.Min(LcName?.Length ?? 0, 39);
                System.IntPtr __from = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(LcName);
                fixed (byte *__to = &@ref.LcName)
                {
                    SharpGen.Runtime.MemoryHelpers.CopyMemory((System.IntPtr)__to, (System.IntPtr)__from, LcName_length);
                    __to[LcName_length] = 0;
                }

                System.Runtime.InteropServices.Marshal.FreeHGlobal(__from);
            }

            @ref.LcOptions = LcOptions;
            @ref.LcStatus = LcStatus;
            @ref.LcLocks = LcLocks;
            @ref.LcMsgBase = LcMsgBase;
            @ref.LcDevice = LcDevice;
            @ref.LcPktRate = LcPktRate;
            @ref.LcPktData = LcPktData;
            @ref.LcPktMode = LcPktMode;
            @ref.LcMoveMask = LcMoveMask;
            @ref.LcBtnDnMask = LcBtnDnMask;
            @ref.LcBtnUpMask = LcBtnUpMask;
            @ref.LcInOrgX = LcInOrgX;
            @ref.LcInOrgY = LcInOrgY;
            @ref.LcInOrgZ = LcInOrgZ;
            @ref.LcInExtX = LcInExtX;
            @ref.LcInExtY = LcInExtY;
            @ref.LcInExtZ = LcInExtZ;
            @ref.LcOutOrgX = LcOutOrgX;
            @ref.LcOutOrgY = LcOutOrgY;
            @ref.LcOutOrgZ = LcOutOrgZ;
            @ref.LcOutExtX = LcOutExtX;
            @ref.LcOutExtY = LcOutExtY;
            @ref.LcOutExtZ = LcOutExtZ;
            @ref.LcSensX = LcSensX;
            @ref.LcSensY = LcSensY;
            @ref.LcSensZ = LcSensZ;
            @ref.LcSysMode = LcSysMode;
            @ref.LcSysOrgX = LcSysOrgX;
            @ref.LcSysOrgY = LcSysOrgY;
            @ref.LcSysExtX = LcSysExtX;
            @ref.LcSysExtY = LcSysExtY;
            @ref.LcSysSensX = LcSysSensX;
            @ref.LcSysSensY = LcSysSensY;
        }
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>LOGCONTEXTW</unmanaged>
    /// <unmanaged-short>LOGCONTEXTW</unmanaged-short>
    public partial struct Logcontextw
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcName</unmanaged>
        /// <unmanaged-short>lcName</unmanaged-short>
        public System.String LcName;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcOptions</unmanaged>
        /// <unmanaged-short>lcOptions</unmanaged-short>
        public System.UInt32 LcOptions;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcStatus</unmanaged>
        /// <unmanaged-short>lcStatus</unmanaged-short>
        public System.UInt32 LcStatus;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcLocks</unmanaged>
        /// <unmanaged-short>lcLocks</unmanaged-short>
        public System.UInt32 LcLocks;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcMsgBase</unmanaged>
        /// <unmanaged-short>lcMsgBase</unmanaged-short>
        public System.UInt32 LcMsgBase;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcDevice</unmanaged>
        /// <unmanaged-short>lcDevice</unmanaged-short>
        public System.UInt32 LcDevice;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcPktRate</unmanaged>
        /// <unmanaged-short>lcPktRate</unmanaged-short>
        public System.UInt32 LcPktRate;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcPktData</unmanaged>
        /// <unmanaged-short>lcPktData</unmanaged-short>
        public System.Int32 LcPktData;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcPktMode</unmanaged>
        /// <unmanaged-short>lcPktMode</unmanaged-short>
        public System.Int32 LcPktMode;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcMoveMask</unmanaged>
        /// <unmanaged-short>lcMoveMask</unmanaged-short>
        public System.Int32 LcMoveMask;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcBtnDnMask</unmanaged>
        /// <unmanaged-short>lcBtnDnMask</unmanaged-short>
        public System.Int32 LcBtnDnMask;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcBtnUpMask</unmanaged>
        /// <unmanaged-short>lcBtnUpMask</unmanaged-short>
        public System.Int32 LcBtnUpMask;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcInOrgX</unmanaged>
        /// <unmanaged-short>lcInOrgX</unmanaged-short>
        public System.Int32 LcInOrgX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcInOrgY</unmanaged>
        /// <unmanaged-short>lcInOrgY</unmanaged-short>
        public System.Int32 LcInOrgY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcInOrgZ</unmanaged>
        /// <unmanaged-short>lcInOrgZ</unmanaged-short>
        public System.Int32 LcInOrgZ;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcInExtX</unmanaged>
        /// <unmanaged-short>lcInExtX</unmanaged-short>
        public System.Int32 LcInExtX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcInExtY</unmanaged>
        /// <unmanaged-short>lcInExtY</unmanaged-short>
        public System.Int32 LcInExtY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcInExtZ</unmanaged>
        /// <unmanaged-short>lcInExtZ</unmanaged-short>
        public System.Int32 LcInExtZ;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcOutOrgX</unmanaged>
        /// <unmanaged-short>lcOutOrgX</unmanaged-short>
        public System.Int32 LcOutOrgX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcOutOrgY</unmanaged>
        /// <unmanaged-short>lcOutOrgY</unmanaged-short>
        public System.Int32 LcOutOrgY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcOutOrgZ</unmanaged>
        /// <unmanaged-short>lcOutOrgZ</unmanaged-short>
        public System.Int32 LcOutOrgZ;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcOutExtX</unmanaged>
        /// <unmanaged-short>lcOutExtX</unmanaged-short>
        public System.Int32 LcOutExtX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcOutExtY</unmanaged>
        /// <unmanaged-short>lcOutExtY</unmanaged-short>
        public System.Int32 LcOutExtY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcOutExtZ</unmanaged>
        /// <unmanaged-short>lcOutExtZ</unmanaged-short>
        public System.Int32 LcOutExtZ;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcSensX</unmanaged>
        /// <unmanaged-short>lcSensX</unmanaged-short>
        public System.Int32 LcSensX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcSensY</unmanaged>
        /// <unmanaged-short>lcSensY</unmanaged-short>
        public System.Int32 LcSensY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcSensZ</unmanaged>
        /// <unmanaged-short>lcSensZ</unmanaged-short>
        public System.Int32 LcSensZ;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcSysMode</unmanaged>
        /// <unmanaged-short>lcSysMode</unmanaged-short>
        public SharpGen.Runtime.Win32.RawBool LcSysMode;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcSysOrgX</unmanaged>
        /// <unmanaged-short>lcSysOrgX</unmanaged-short>
        public System.Int32 LcSysOrgX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcSysOrgY</unmanaged>
        /// <unmanaged-short>lcSysOrgY</unmanaged-short>
        public System.Int32 LcSysOrgY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcSysExtX</unmanaged>
        /// <unmanaged-short>lcSysExtX</unmanaged-short>
        public System.Int32 LcSysExtX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcSysExtY</unmanaged>
        /// <unmanaged-short>lcSysExtY</unmanaged-short>
        public System.Int32 LcSysExtY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcSysSensX</unmanaged>
        /// <unmanaged-short>lcSysSensX</unmanaged-short>
        public System.Int32 LcSysSensX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lcSysSensY</unmanaged>
        /// <unmanaged-short>lcSysSensY</unmanaged-short>
        public System.Int32 LcSysSensY;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public System.Char LcName;
            public System.Char __LcName1;
            public System.Char __LcName2;
            public System.Char __LcName3;
            public System.Char __LcName4;
            public System.Char __LcName5;
            public System.Char __LcName6;
            public System.Char __LcName7;
            public System.Char __LcName8;
            public System.Char __LcName9;
            public System.Char __LcName10;
            public System.Char __LcName11;
            public System.Char __LcName12;
            public System.Char __LcName13;
            public System.Char __LcName14;
            public System.Char __LcName15;
            public System.Char __LcName16;
            public System.Char __LcName17;
            public System.Char __LcName18;
            public System.Char __LcName19;
            public System.Char __LcName20;
            public System.Char __LcName21;
            public System.Char __LcName22;
            public System.Char __LcName23;
            public System.Char __LcName24;
            public System.Char __LcName25;
            public System.Char __LcName26;
            public System.Char __LcName27;
            public System.Char __LcName28;
            public System.Char __LcName29;
            public System.Char __LcName30;
            public System.Char __LcName31;
            public System.Char __LcName32;
            public System.Char __LcName33;
            public System.Char __LcName34;
            public System.Char __LcName35;
            public System.Char __LcName36;
            public System.Char __LcName37;
            public System.Char __LcName38;
            public System.Char __LcName39;
            public System.UInt32 LcOptions;
            public System.UInt32 LcStatus;
            public System.UInt32 LcLocks;
            public System.UInt32 LcMsgBase;
            public System.UInt32 LcDevice;
            public System.UInt32 LcPktRate;
            public System.Int32 LcPktData;
            public System.Int32 LcPktMode;
            public System.Int32 LcMoveMask;
            public System.Int32 LcBtnDnMask;
            public System.Int32 LcBtnUpMask;
            public System.Int32 LcInOrgX;
            public System.Int32 LcInOrgY;
            public System.Int32 LcInOrgZ;
            public System.Int32 LcInExtX;
            public System.Int32 LcInExtY;
            public System.Int32 LcInExtZ;
            public System.Int32 LcOutOrgX;
            public System.Int32 LcOutOrgY;
            public System.Int32 LcOutOrgZ;
            public System.Int32 LcOutExtX;
            public System.Int32 LcOutExtY;
            public System.Int32 LcOutExtZ;
            public System.Int32 LcSensX;
            public System.Int32 LcSensY;
            public System.Int32 LcSensZ;
            public SharpGen.Runtime.Win32.RawBool LcSysMode;
            public System.Int32 LcSysOrgX;
            public System.Int32 LcSysOrgY;
            public System.Int32 LcSysExtX;
            public System.Int32 LcSysExtY;
            public System.Int32 LcSysSensX;
            public System.Int32 LcSysSensY;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            fixed (void *__ptr = &@ref.LcName)
                LcName = SharpGen.Runtime.StringHelpers.PtrToStringUni((System.IntPtr)__ptr, 39);
            LcOptions = @ref.LcOptions;
            LcStatus = @ref.LcStatus;
            LcLocks = @ref.LcLocks;
            LcMsgBase = @ref.LcMsgBase;
            LcDevice = @ref.LcDevice;
            LcPktRate = @ref.LcPktRate;
            LcPktData = @ref.LcPktData;
            LcPktMode = @ref.LcPktMode;
            LcMoveMask = @ref.LcMoveMask;
            LcBtnDnMask = @ref.LcBtnDnMask;
            LcBtnUpMask = @ref.LcBtnUpMask;
            LcInOrgX = @ref.LcInOrgX;
            LcInOrgY = @ref.LcInOrgY;
            LcInOrgZ = @ref.LcInOrgZ;
            LcInExtX = @ref.LcInExtX;
            LcInExtY = @ref.LcInExtY;
            LcInExtZ = @ref.LcInExtZ;
            LcOutOrgX = @ref.LcOutOrgX;
            LcOutOrgY = @ref.LcOutOrgY;
            LcOutOrgZ = @ref.LcOutOrgZ;
            LcOutExtX = @ref.LcOutExtX;
            LcOutExtY = @ref.LcOutExtY;
            LcOutExtZ = @ref.LcOutExtZ;
            LcSensX = @ref.LcSensX;
            LcSensY = @ref.LcSensY;
            LcSensZ = @ref.LcSensZ;
            LcSysMode = @ref.LcSysMode;
            LcSysOrgX = @ref.LcSysOrgX;
            LcSysOrgY = @ref.LcSysOrgY;
            LcSysExtX = @ref.LcSysExtX;
            LcSysExtY = @ref.LcSysExtY;
            LcSysSensX = @ref.LcSysSensX;
            LcSysSensY = @ref.LcSysSensY;
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            fixed (char *__from = LcName, __to = &@ref.LcName)
            {
                int LcName_length = System.Math.Min((LcName?.Length ?? 0) * 2, 39 * 2);
                SharpGen.Runtime.MemoryHelpers.CopyMemory((System.IntPtr)__to, (System.IntPtr)__from, LcName_length);
                __to[LcName_length] = '\0';
            }

            @ref.LcOptions = LcOptions;
            @ref.LcStatus = LcStatus;
            @ref.LcLocks = LcLocks;
            @ref.LcMsgBase = LcMsgBase;
            @ref.LcDevice = LcDevice;
            @ref.LcPktRate = LcPktRate;
            @ref.LcPktData = LcPktData;
            @ref.LcPktMode = LcPktMode;
            @ref.LcMoveMask = LcMoveMask;
            @ref.LcBtnDnMask = LcBtnDnMask;
            @ref.LcBtnUpMask = LcBtnUpMask;
            @ref.LcInOrgX = LcInOrgX;
            @ref.LcInOrgY = LcInOrgY;
            @ref.LcInOrgZ = LcInOrgZ;
            @ref.LcInExtX = LcInExtX;
            @ref.LcInExtY = LcInExtY;
            @ref.LcInExtZ = LcInExtZ;
            @ref.LcOutOrgX = LcOutOrgX;
            @ref.LcOutOrgY = LcOutOrgY;
            @ref.LcOutOrgZ = LcOutOrgZ;
            @ref.LcOutExtX = LcOutExtX;
            @ref.LcOutExtY = LcOutExtY;
            @ref.LcOutExtZ = LcOutExtZ;
            @ref.LcSensX = LcSensX;
            @ref.LcSensY = LcSensY;
            @ref.LcSensZ = LcSensZ;
            @ref.LcSysMode = LcSysMode;
            @ref.LcSysOrgX = LcSysOrgX;
            @ref.LcSysOrgY = LcSysOrgY;
            @ref.LcSysExtX = LcSysExtX;
            @ref.LcSysExtY = LcSysExtY;
            @ref.LcSysSensX = LcSysSensX;
            @ref.LcSysSensY = LcSysSensY;
        }
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>ORIENTATION</unmanaged>
    /// <unmanaged-short>ORIENTATION</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct Orientation
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>orAzimuth</unmanaged>
        /// <unmanaged-short>orAzimuth</unmanaged-short>
        public System.Int32 OrAzimuth;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>orAltitude</unmanaged>
        /// <unmanaged-short>orAltitude</unmanaged-short>
        public System.Int32 OrAltitude;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>orTwist</unmanaged>
        /// <unmanaged-short>orTwist</unmanaged-short>
        public System.Int32 OrTwist;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>PACKET</unmanaged>
    /// <unmanaged-short>PACKET</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct Packet
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pkContext</unmanaged>
        /// <unmanaged-short>pkContext</unmanaged-short>
        public System.IntPtr PkContext;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pkStatus</unmanaged>
        /// <unmanaged-short>pkStatus</unmanaged-short>
        public System.UInt32 PkStatus;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pkTime</unmanaged>
        /// <unmanaged-short>pkTime</unmanaged-short>
        public System.Int32 PkTime;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pkChanged</unmanaged>
        /// <unmanaged-short>pkChanged</unmanaged-short>
        public System.Int32 PkChanged;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pkSerialNumber</unmanaged>
        /// <unmanaged-short>pkSerialNumber</unmanaged-short>
        public System.UInt32 PkSerialNumber;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pkCursor</unmanaged>
        /// <unmanaged-short>pkCursor</unmanaged-short>
        public System.UInt32 PkCursor;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pkButtons</unmanaged>
        /// <unmanaged-short>pkButtons</unmanaged-short>
        public System.Int32 PkButtons;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pkX</unmanaged>
        /// <unmanaged-short>pkX</unmanaged-short>
        public System.Int32 PkX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pkY</unmanaged>
        /// <unmanaged-short>pkY</unmanaged-short>
        public System.Int32 PkY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pkZ</unmanaged>
        /// <unmanaged-short>pkZ</unmanaged-short>
        public System.Int32 PkZ;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pkNormalPressure</unmanaged>
        /// <unmanaged-short>pkNormalPressure</unmanaged-short>
        public System.Int32 PkNormalPressure;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pkTangentPressure</unmanaged>
        /// <unmanaged-short>pkTangentPressure</unmanaged-short>
        public System.Int32 PkTangentPressure;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pkOrientation</unmanaged>
        /// <unmanaged-short>pkOrientation</unmanaged-short>
        public SharpWintab.Wintab.Orientation PkOrientation;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pkRotation</unmanaged>
        /// <unmanaged-short>pkRotation</unmanaged-short>
        public SharpWintab.Wintab.Rotation PkRotation;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>PACKETEXT</unmanaged>
    /// <unmanaged-short>PACKETEXT</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct Packetext
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pkBase</unmanaged>
        /// <unmanaged-short>pkBase</unmanaged-short>
        public SharpWintab.Wintab.Extensionbase PkBase;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pkExpKeys</unmanaged>
        /// <unmanaged-short>pkExpKeys</unmanaged-short>
        public SharpWintab.Wintab.Expkeysdata PkExpKeys;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pkTouchStrip</unmanaged>
        /// <unmanaged-short>pkTouchStrip</unmanaged-short>
        public SharpWintab.Wintab.Sliderdata PkTouchStrip;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pkTouchRing</unmanaged>
        /// <unmanaged-short>pkTouchRing</unmanaged-short>
        public SharpWintab.Wintab.Sliderdata PkTouchRing;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>ROTATION</unmanaged>
    /// <unmanaged-short>ROTATION</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct Rotation
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>roPitch</unmanaged>
        /// <unmanaged-short>roPitch</unmanaged-short>
        public System.Int32 RoPitch;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>roRoll</unmanaged>
        /// <unmanaged-short>roRoll</unmanaged-short>
        public System.Int32 RoRoll;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>roYaw</unmanaged>
        /// <unmanaged-short>roYaw</unmanaged-short>
        public System.Int32 RoYaw;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>SLIDERDATA</unmanaged>
    /// <unmanaged-short>SLIDERDATA</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct Sliderdata
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>nTablet</unmanaged>
        /// <unmanaged-short>nTablet</unmanaged-short>
        public System.Byte NTablet;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>nControl</unmanaged>
        /// <unmanaged-short>nControl</unmanaged-short>
        public System.Byte NControl;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>nMode</unmanaged>
        /// <unmanaged-short>nMode</unmanaged-short>
        public System.Byte NMode;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>nReserved</unmanaged>
        /// <unmanaged-short>nReserved</unmanaged-short>
        public System.Byte NReserved;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>nPosition</unmanaged>
        /// <unmanaged-short>nPosition</unmanaged-short>
        public System.Int32 NPosition;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>TILT</unmanaged>
    /// <unmanaged-short>TILT</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct Tilt
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>tiltX</unmanaged>
        /// <unmanaged-short>tiltX</unmanaged-short>
        public System.Int32 TiltX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>tiltY</unmanaged>
        /// <unmanaged-short>tiltY</unmanaged-short>
        public System.Int32 TiltY;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>XBTNMASK</unmanaged>
    /// <unmanaged-short>XBTNMASK</unmanaged-short>
    public partial struct Xbtnmask
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>xBtnDnMask</unmanaged>
        /// <unmanaged-short>xBtnDnMask</unmanaged-short>
        public System.Byte[] XBtnDnMask
        {
            get => _XBtnDnMask ?? (_XBtnDnMask = new System.Byte[32]);
            private set => _XBtnDnMask = value;
        }

        internal System.Byte[] _XBtnDnMask;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>xBtnUpMask</unmanaged>
        /// <unmanaged-short>xBtnUpMask</unmanaged-short>
        public System.Byte[] XBtnUpMask
        {
            get => _XBtnUpMask ?? (_XBtnUpMask = new System.Byte[32]);
            private set => _XBtnUpMask = value;
        }

        internal System.Byte[] _XBtnUpMask;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public System.Byte XBtnDnMask;
            public System.Byte __XBtnDnMask1;
            public System.Byte __XBtnDnMask2;
            public System.Byte __XBtnDnMask3;
            public System.Byte __XBtnDnMask4;
            public System.Byte __XBtnDnMask5;
            public System.Byte __XBtnDnMask6;
            public System.Byte __XBtnDnMask7;
            public System.Byte __XBtnDnMask8;
            public System.Byte __XBtnDnMask9;
            public System.Byte __XBtnDnMask10;
            public System.Byte __XBtnDnMask11;
            public System.Byte __XBtnDnMask12;
            public System.Byte __XBtnDnMask13;
            public System.Byte __XBtnDnMask14;
            public System.Byte __XBtnDnMask15;
            public System.Byte __XBtnDnMask16;
            public System.Byte __XBtnDnMask17;
            public System.Byte __XBtnDnMask18;
            public System.Byte __XBtnDnMask19;
            public System.Byte __XBtnDnMask20;
            public System.Byte __XBtnDnMask21;
            public System.Byte __XBtnDnMask22;
            public System.Byte __XBtnDnMask23;
            public System.Byte __XBtnDnMask24;
            public System.Byte __XBtnDnMask25;
            public System.Byte __XBtnDnMask26;
            public System.Byte __XBtnDnMask27;
            public System.Byte __XBtnDnMask28;
            public System.Byte __XBtnDnMask29;
            public System.Byte __XBtnDnMask30;
            public System.Byte __XBtnDnMask31;
            public System.Byte XBtnUpMask;
            public System.Byte __XBtnUpMask1;
            public System.Byte __XBtnUpMask2;
            public System.Byte __XBtnUpMask3;
            public System.Byte __XBtnUpMask4;
            public System.Byte __XBtnUpMask5;
            public System.Byte __XBtnUpMask6;
            public System.Byte __XBtnUpMask7;
            public System.Byte __XBtnUpMask8;
            public System.Byte __XBtnUpMask9;
            public System.Byte __XBtnUpMask10;
            public System.Byte __XBtnUpMask11;
            public System.Byte __XBtnUpMask12;
            public System.Byte __XBtnUpMask13;
            public System.Byte __XBtnUpMask14;
            public System.Byte __XBtnUpMask15;
            public System.Byte __XBtnUpMask16;
            public System.Byte __XBtnUpMask17;
            public System.Byte __XBtnUpMask18;
            public System.Byte __XBtnUpMask19;
            public System.Byte __XBtnUpMask20;
            public System.Byte __XBtnUpMask21;
            public System.Byte __XBtnUpMask22;
            public System.Byte __XBtnUpMask23;
            public System.Byte __XBtnUpMask24;
            public System.Byte __XBtnUpMask25;
            public System.Byte __XBtnUpMask26;
            public System.Byte __XBtnUpMask27;
            public System.Byte __XBtnUpMask28;
            public System.Byte __XBtnUpMask29;
            public System.Byte __XBtnUpMask30;
            public System.Byte __XBtnUpMask31;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            fixed (void *__to = &XBtnDnMask[0], __from = &@ref.XBtnDnMask)
                SharpGen.Runtime.MemoryHelpers.CopyMemory((System.IntPtr)__to, (System.IntPtr)__from, 32 * sizeof (System.Byte));
            fixed (void *__to = &XBtnUpMask[0], __from = &@ref.XBtnUpMask)
                SharpGen.Runtime.MemoryHelpers.CopyMemory((System.IntPtr)__to, (System.IntPtr)__from, 32 * sizeof (System.Byte));
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            fixed (void *__from = &XBtnDnMask[0], __to = &@ref.XBtnDnMask)
                SharpGen.Runtime.MemoryHelpers.CopyMemory((System.IntPtr)__to, (System.IntPtr)__from, 32 * sizeof (System.Byte));
            fixed (void *__from = &XBtnUpMask[0], __to = &@ref.XBtnUpMask)
                SharpGen.Runtime.MemoryHelpers.CopyMemory((System.IntPtr)__to, (System.IntPtr)__from, 32 * sizeof (System.Byte));
        }
    }
}